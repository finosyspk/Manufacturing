{"version":3,"sources":["views/Inventory/Transactions/Adjustment/index.js","ui-component/ElevationScroll.js","utilities/validateLookup.js"],"names":["FormName","Adjustments","lookupTxtField","useState","isDisable","setisDisable","rowEntryCode","setRowEntryCode","isLocationLookUp","setIsLocationLookUp","setLoadingOnSave","selectLookupVal","setSelected","setSearchRows","setFilter","dosaveFunction","setIsEditorView","React","Date","lookupSelectRow","TransNo","TransType","TransDate","RequireDate","LocationCode","Location","Status","Remarks","TransTotalTotal","Header","setHeader","registerNotOpen","viewList","newList","editList","property","setProperty","columns","title","field","cellStyle","width","render","rowData","Dropdown","optionLabel","disabled","disabledItemTable","ViewData","value","UOM","style","border","options","IN_ItemUOMs","onChange","e","updateTableData","placeholder","NumberFormat","InputLabelProps","shrink","display","customInput","TextFieldRightAlignedForNumber","thousandSeparator","decimalScale","fixedDecimalScale","Qty","Number","target","split","join","fullWidth","Price","Amount","rows","ItemTable","SetItemTable","locationLookupList","setLocationLookupList","dispatch","useDispatch","lookupRes","useSelector","AllActionsRes","onViewData","singleList","Message","useEffect","error","nullList","Success","Detail","setOnBlueDisable","HandleSave","ItemCode","undefined","open","severity","msg","Quantity","ShiftHeaLocationd","ADJDetails","ADJStatus","lookupData2","ADJDetail","payload","createOrUpdate","Item","UOMCode","RoutingCode","RoutingName","TransStatus","UnitQuantity","BaseQuantity","prevState","prev","handleSnakeBarClose","getLocationLookUpData","getInventoryLookupData","lookupDataInventory","item","xs","close","onClick","container","Details","DialogClose","prevstate","Prev","dialog","AddData","data","EditData","row","SetRowDataID","Button","ID","CodeMsg","getSingleList","FormID","FormCode","isPostButton","isEditButton","spacing","alignItems","justifyContent","goBack","clearAll_OnClick","clearAll","copyBomDisabled","saveAndClose","saveAndClose_OnClick","submitButton","SaveButton","Button2","submit","SaveButton_OnClick","submitButton_OnClick","postAndSave","Button2_OnClick","printVoucher","isView","label","name","id","Change","date","list","code","reference","lookupOpen","onBlurDiv","onFocus","onBlur","setTimeout","validateLookup","changeLookupVal","propertyName","listForSearch","setSearchRowProp","searchResult","setFilterProp","filter","setLookupEnable","bomCodeLookUp","lookupValuesList","setLookUpData","Lookupname","padding","variant","arr","push","ItemName","CStatus","StageCode","StageName","MachineName","MachineCode","StageSeq","newRowsArr","AddRow","showTitle","paging","actionsColumnIndex","pageSize","pageSizeOptions","search","loadingType","headerStyle","fontWeight","paddingLeft","paddingRight","paddingTop","paddingBottom","textAlign","actionsCellStyle","actions","icon","DeleteOutline","sx","color","red","height","tooltip","event","onClickDelete","localization","body","emptyDataSourceMessage","filterRow","filterTooltip","ElevationScroll","children","window","theme","useTheme","matchDown","useMediaQuery","breakpoints","down","drawerOpen","state","menu","responsiveTop","responsiveRight","responsiveLeft","trigger","useScrollTrigger","disableHysteresis","threshold","darkBorder","palette","mode","dark","grey","cloneElement","backgroundColor","background","default","zIndex","borderTop","borderBottom","borderColor","position","top","right","left","stateProps","headerValuesList","msgProp","callApi","toLowerCase","filteredVal","x","i","toString","indexOf","length","console","log"],"mappings":"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","file":"static/js/10.8e0539b9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, CardActions, Divider, CardContent } from '@mui/material';\r\nimport MaterialTable from 'material-table';\r\nimport Icons from 'ui-component/material-icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getInventoryLookupData, getLookupData, getLookup2Data, createOrUpdate, getSingleList, nullList } from 'store/actions/index';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    DropDown,\r\n    InputDate,\r\n    InputTime,\r\n    Growl\r\n} from 'ui-component/globalcomponents';\r\nimport { validateLookup } from 'utilities/validateLookup';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport GlobalHeader from 'ui-component/globalcomponents/GlobalHeader/GlobalHeader';\r\nimport ElevationScroll from 'ui-component/ElevationScroll';\r\nimport { padding } from '@mui/system';\r\nlet FormName = 'Adjustments';\r\nlet TransType = ''\r\nconst Adjustments = () => {\r\n    const [isDisable, setisDisable] = useState(false);\r\n    const [onBlurDisable, setOnBlurDisable] = useState(false);\r\n    const [rowEntryCode, setRowEntryCode] = useState('');\r\n    const [isLocationLookUp, setIsLocationLookUp] = useState(false);\r\n    const [isBoMLookUp, setIsBoMLookUp] = useState(false);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [selectLookupVal, setSelected] = useState(true);\r\n    const [searchedRows, setSearchRows] = useState([]);\r\n    const [filter, setFilter] = useState(false);\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [IsEditorView, setIsEditorView] = useState(false);\r\n    const [valueBasic, setValueBasic] = React.useState(new Date());\r\n    const [addItemClicked, setAddItemClicked] = useState(false);\r\n\r\n    var lookupSelectRow = false;\r\n    var lookupTxtField;\r\n\r\n    const [Header, setHeader] = useState({\r\n        TransNo: '',\r\n        TransType: 'AdjInward',\r\n        TransDate: new Date(),\r\n        RequireDate: new Date(),\r\n        LocationCode: '',\r\n        Location: '',\r\n        Status: '',\r\n        Remarks: '',\r\n        TransTotalTotal: 0\r\n    });\r\n\r\n    const [property, setProperty] = useState({\r\n        registerNotOpen: true,\r\n        viewList: false,\r\n        newList: false,\r\n        editList: false\r\n    });\r\n\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Item Code',\r\n                field: 'ItemCode',\r\n                cellStyle: {\r\n                    width: '15%'\r\n                }\r\n            },\r\n            {\r\n                title: 'Item',\r\n                field: 'Item',\r\n\r\n                cellStyle: {\r\n                    width: '35%'\r\n                }\r\n            },\r\n            {\r\n                title: 'Job',\r\n                field: 'Job',\r\n                cellStyle: {\r\n                    width: '15%'\r\n                },\r\n                render: (rowData) => (\r\n                    <Dropdown\r\n                        optionLabel=\"JobCode\"\r\n                        disabled={disabledItemTable || rowData.ViewData}\r\n                        value={rowData.UOM}\r\n                        style={{ border: '0px solid' }}\r\n                        options={rowData.IN_ItemUOMs}\r\n                        onChange={(e) => updateTableData(e, rowData, 'Job')}\r\n                        placeholder=\"Select a Job\"\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'UOM',\r\n                field: 'UOM',\r\n                cellStyle: {\r\n                    width: '25%'\r\n                },\r\n                render: (rowData) => (\r\n                    <Dropdown\r\n                        optionLabel=\"UOMCode\"\r\n                        disabled={disabledItemTable || rowData.ViewData}\r\n                        value={rowData.UOM}\r\n                        style={{ border: '0px solid' }}\r\n                        options={rowData.IN_ItemUOMs}\r\n                        onChange={(e) => updateTableData(e, rowData, 'UOM')}\r\n                        placeholder=\"Select a UOM\"\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                field: 'Qty',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData) => (\r\n                    <NumberFormat\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"0.00\"\r\n                        style={{ border: '0px solid', display: 'block' }}\r\n                        customInput={TextFieldRightAlignedForNumber}\r\n                        disabled={rowData.UOM === '' ? true : false || rowData.ViewData}\r\n                        thousandSeparator\r\n                        decimalScale={2}\r\n                        fixedDecimalScale={2}\r\n                        value={rowData.Qty}\r\n                        onChange={(e) => updateTableData(Number(e.target.value.split(',').join('')), rowData, 'Qty')}\r\n                        fullWidth\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'Price',\r\n                field: 'UnitPrice',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData) => (\r\n                    <NumberFormat\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"0.00\"\r\n                        style={{ border: '0px solid', display: 'block' }}\r\n                        customInput={TextFieldRightAlignedForNumber}\r\n                        disabled={rowData.UOM === '' ? true : false || rowData.ViewData}\r\n                        thousandSeparator\r\n                        decimalScale={2}\r\n                        fixedDecimalScale={2}\r\n                        value={rowData.Price}\r\n                        onChange={(e) => updateTableData(Number(e.target.value.split(',').join('')), rowData, 'Price')}\r\n                        fullWidth\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'Amount',\r\n                field: 'Amount',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData) => (\r\n                    <NumberFormat\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"0.00\"\r\n                        style={{ border: '0px solid', display: 'block' }}\r\n                        customInput={TextFieldRightAlignedForNumber}\r\n                        disabled={rowData.UOM === '' ? true : false || rowData.ViewData}\r\n                        thousandSeparator\r\n                        decimalScale={2}\r\n                        fixedDecimalScale={2}\r\n                        value={rowData.Amount}\r\n                        onChange={(e) => updateTableData(Number(e.target.value.split(',').join('')), rowData, 'Amount')}\r\n                        fullWidth\r\n                    />\r\n                )\r\n            }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    const [locationLookupList, setLocationLookupList] = useState({\r\n        columns: [],\r\n        rows: []\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const lookupRes = useSelector(({ lookupRes }) => lookupRes);\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n    const onViewData = AllActionsRes?.singleList?.Message?.Header;\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes?.singleList?.Message.Header);\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: AllActionsRes?.singleList?.Message.Detail\r\n                });\r\n                dispatch(nullList());\r\n            } else {\r\n                setOnBlueDisable(false);\r\n            }\r\n        }\r\n    }, [AllActionsRes]);\r\n\r\n    const goback = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true,\r\n            msg: ''\r\n        }));\r\n\r\n        setHeader({\r\n            TransNo: '',\r\n            TransType: 'AdjInward',\r\n            TransDate: new Date(),\r\n            RequireDate: new Date(),\r\n            LocationCode: '',\r\n            Location: '',\r\n            Status: '',\r\n            Remarks: '',\r\n            TransTotalTotal: 0\r\n        });\r\n\r\n        SetItemTable((Prev) => ({\r\n            ...Prev,\r\n            rows: []\r\n        }));\r\n\r\n        setIsEditorView(false);\r\n\r\n        setisDisable(false);\r\n        // setOnBlurDisable(false)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true,\r\n            msg: ''\r\n        }));\r\n\r\n        setHeader({\r\n            TransNo: '',\r\n            TransType: 'AdjInward',\r\n            TransDate: new Date(),\r\n            RequireDate: new Date(),\r\n            LocationCode: '',\r\n            Location: '',\r\n            Status: '',\r\n            Remarks: '',\r\n            TransTotalTotal: 0\r\n        });\r\n\r\n        SetItemTable((Prev) => ({\r\n            ...Prev,\r\n            rows: []\r\n        }));\r\n\r\n        setIsEditorView(false);\r\n\r\n        setisDisable(false);\r\n        // setOnBlurDisable(false)\r\n    };\r\n\r\n    const addData = (data) => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: false,\r\n            viewList: false\r\n        }));\r\n        getLocationLookUpData();\r\n        SetItemTable({\r\n            ...ItemTable,\r\n            rows: []\r\n        });\r\n    };\r\n\r\n    const editData = (row) => {\r\n        setIsEditorView(true);\r\n        setHeader(row);\r\n        SetItemTable({\r\n            ...ItemTable,\r\n            rows: lookupRes?.lookupData2?.Message.ADJDetail\r\n        });\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: false,\r\n            viewList: false\r\n        }));\r\n        getLocationLookUpData();\r\n    };\r\n\r\n    const viewData = (row) => {\r\n        setIsEditorView(true);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            CodeMsg: '',\r\n            registerNotOpen: false,\r\n            viewList: true\r\n        }));\r\n\r\n        let payload = `FormName=${'Adjustments'}&TransNo=${row.TransNo}`;\r\n        dispatch(getSingleList(payload));\r\n        setHeader({\r\n            ...Header,\r\n            RoutingName: onViewData?.RoutingName\r\n        });\r\n        setisDisable(true);\r\n    };\r\n\r\n    const SetRowDataID = (data, Button) => {\r\n        if (Button === 'Delete') {\r\n            if (data.TransStatus == '1') {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'This entry cannot b deleted',\r\n                    registerNotOpen: true\r\n                });\r\n                setRowEntryCode('');\r\n            } else {\r\n                setRowEntryCode(data.TransNo);\r\n            }\r\n        }\r\n    };\r\n\r\n    const validationOnSave = () => {\r\n        if (Header.ItemCode === '' || Header.ItemCode === undefined || Header.ItemCode === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty BoM Code Not Allowed'\r\n            });\r\n            return false;\r\n        } else if (Header.Quantity === '' || Header.Quantity === undefined || Header.Quantity === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Qunatity Not Allowed'\r\n            });\r\n            return false;\r\n        } else if (Header.Location === '' || Header.Location === undefined || Header.ShiftHeaLocationd === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Location Not Allowed'\r\n            });\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const HandleSave = () => {\r\n        if (validationOnSave()) {\r\n            let ADJDetails = Header.ADJStatus === 'Release' ? [...lookupRes?.lookupData2?.Message?.ADJDetail] : [];\r\n\r\n            let payload = {\r\n                FormName,\r\n                Header,\r\n                Detail: ADJDetails\r\n            };\r\n\r\n            dispatch(createOrUpdate(payload));\r\n\r\n            setHeader({\r\n                TransDate: new Date(),\r\n                TransNo: '',\r\n                TransType: 'AdjInward',\r\n                LocationCode: '',\r\n                Location: '',\r\n                ItemCode: '',\r\n                Item: '',\r\n                UOMCode: '',\r\n                UOM: '',\r\n                RoutingCode: '',\r\n                RoutingName: '',\r\n                TransStatus: '',\r\n                UnitQuantity: '',\r\n                Quantity: '',\r\n                BaseQuantity: '',\r\n                ADJStatus: ''\r\n            });\r\n\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                registerNotOpen: true,\r\n                open: false,\r\n                severity: null,\r\n                msg: ''\r\n            }));\r\n\r\n            SetItemTable((prev) => ({\r\n                ...prev,\r\n                rows: []\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const changeLookupVal = (property, value) => {\r\n        lookupTxtField = value;\r\n        lookupSelectRow = false;\r\n        // Header[property] = value;\r\n        // setHeader({ ...Header,  })\r\n    };\r\n\r\n    const setLookUpData = (e, rowData, Lookupname) => {\r\n        let value = e.target.value;\r\n        if (Lookupname == 'Location') {\r\n            setHeader({\r\n                ...Header,\r\n                Location: rowData?.Location,\r\n                LocationCode: rowData?.LocationCode\r\n            });\r\n            setIsLocationLookUp(false);\r\n        }\r\n    };\r\n\r\n    const getLocationLookUpData = () => {\r\n        dispatch(getInventoryLookupData(`FormName=${'Locations'}`));\r\n    };\r\n\r\n    const getAdjustmentsData = () => {\r\n        dispatch(getLookup2Data(`FormName=Adjustments&BOMID=${Header.BOMID}&Qty=${Header.BaseQuantity}`));\r\n    };\r\n\r\n    const clearAll = () => {\r\n        setHeader({\r\n            ...Header,\r\n            TransNo: '',\r\n            TransType: 'AdjInward',\r\n            TransDate: new Date(),\r\n            RequireDate: new Date(),\r\n            LocationCode: '',\r\n            Location: '',\r\n            Status: '',\r\n            Remarks: '',\r\n            TransTotalTotal: 0\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupDataInventory) {\r\n            if (lookupRes?.lookupDataInventory.Success === true) {\r\n                setLocationLookupList(lookupRes.lookupDataInventory.Message.Location);\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupDataInventory]);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupData2) {\r\n            if (lookupRes?.lookupData2?.Success === true) {\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: lookupRes?.lookupData2?.Message.ADJDetail\r\n                });\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupData2]);\r\n\r\n    const handleGetRowId = (e) => {\r\n        return e.CItemCode;\r\n    };\r\n\r\n    const AddRow = () => {\r\n        let arr = [...ItemTable.rows];\r\n        let Item = {\r\n            ItemCode: '',\r\n            ItemName: '',\r\n            UOMCode: '',\r\n            CStatus: 0,\r\n            UOM: '',\r\n            UnitQuantity: 1,\r\n            Quantity: 1,\r\n            BaseQuantity: 1,\r\n            StageCode: '',\r\n            StageName: '',\r\n            MachineName: '',\r\n            MachineCode: '',\r\n            StageSeq: ''\r\n            // MachineName: \"\",\r\n            // MachineCode: \"\",\r\n            // LaborPerUnit: \"\",\r\n            // OutputPerUnit: \"\",\r\n            // PowerPerUnit: \"\",\r\n        };\r\n\r\n        arr.push({ ...Item });\r\n        newRowsArr = arr;\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid item xs={12}>\r\n                <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n            </Grid>\r\n            {property.registerNotOpen ? (\r\n                <Grid container>\r\n                    <Register\r\n                        Details={'Transfer Entry List'}\r\n                        FormName={FormName}\r\n                        DialogClose={handleClose}\r\n                        dialog={true}\r\n                        AddData={addData}\r\n                        EditData={editData}\r\n                        SetRowDataID={SetRowDataID}\r\n                        dosaveFunction={dosaveFunction}\r\n                        setLoadingOnSave={setLoadingOnSave}\r\n                        ID={rowEntryCode}\r\n                        ViewData={viewData}\r\n                        FormID={FormName}\r\n                        FormCode={'TransNo'}\r\n                        isPostButton={true}\r\n                        isEditButton={true}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <MainCard>\r\n                                <ElevationScroll>\r\n                                    <CardActions>\r\n                                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                            <Grid item>\r\n                                                <GlobalHeader\r\n                                                    goBack={() => goback()}\r\n                                                    clearAll_OnClick={() => clearAll()}\r\n                                                    clearAll={isDisable}\r\n                                                    copyBomDisabled={isDisable}\r\n                                                    saveAndClose={property.viewList}\r\n                                                    saveAndClose_OnClick={() => {\r\n                                                        saveAndClose();\r\n                                                    }}\r\n                                                    FormID={1}\r\n                                                    submitButton={property.viewList}\r\n                                                    SaveButton={property.viewList}\r\n                                                    Button2={!property.newList}\r\n                                                    submit={!property.viewList}\r\n                                                    SaveButton_OnClick={() => HandleSave()}\r\n                                                    submitButton_OnClick={() => postAndSave()}\r\n                                                    Button2_OnClick={() => printVoucher()}\r\n                                                    isView={isDisable}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                </ElevationScroll>\r\n                                <Divider />\r\n                                <CardContent>\r\n                                    <Grid container spacing={2} alignItems=\"center\">\r\n                                        <Grid item xs={4}>\r\n                                            <InputText label=\"Trans No\" name=\"TransNo\" value={Header.TransNo} disabled={true} />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputDate\r\n                                                id=\"ADJDate\"\r\n                                                label=\"Trans Date *\"\r\n                                                name=\"TransaDate\"\r\n                                                value={Header.TransDate}\r\n                                                Change={(date) => setHeader({ ...Header, TransDate: date })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <DropDown\r\n                                                disabled={isDisable}\r\n                                                list={[\r\n                                                    { code: 'AdjInward', value: 'Inward Adjustment' },\r\n                                                    { code: 'Adjustment', value: 'Outward Adjustment' },\r\n                                                    { code: 'Consumption', value: 'Consumption' },\r\n                                                    { code: 'Damage', value: 'Damage' },\r\n                                                    { code: 'Expiry', value: 'Expiry' }\r\n                                                ]}\r\n                                                value={Header.TransType}\r\n                                                id=\"Adjustment Type\"\r\n                                                Change={(data) => {\r\n                                                    setHeader({ ...Header, TransType: data.target.value });\r\n                                                    TransType = data.target.value;\r\n                                                }}\r\n                                                label=\"Adjustment Type\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                disabled={isDisable}\r\n                                                label=\"Location *\"\r\n                                                name=\"Location\"\r\n                                                reference={'Location'}\r\n                                                onClick={() => setIsLocationLookUp(true)}\r\n                                                lookupOpen={isLocationLookUp}\r\n                                                columns={locationLookupList.columns}\r\n                                                rows={locationLookupList?.rows}\r\n                                                onBlurDiv={() => setIsLocationLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup(\r\n                                                            {\r\n                                                                setProperty,\r\n                                                                property,\r\n                                                                Header,\r\n                                                                setHeader,\r\n                                                                selectLookupVal,\r\n                                                                lookupSelectRow\r\n                                                            },\r\n                                                            lookupTxtField,\r\n                                                            locationLookupList.rows,\r\n                                                            ['LocationCode', 'Location'],\r\n                                                            ['Code', 'Description'],\r\n                                                            'Location Code'\r\n                                                        );\r\n                                                        setIsLocationLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"LocationCode\"\r\n                                                listForSearch={locationLookupList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                value={Header.Location}\r\n                                                lookupValuesList={['LocationCode', 'Location']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Location')}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={8}>\r\n                                            <InputText\r\n                                                label=\"Remarks\"\r\n                                                name=\"Remarks\"\r\n                                                value={Header.Remarks}\r\n                                                disabled={isDisable}\r\n                                                Change={(e) => setHeader({ ...Header, Remarks: e })}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </MainCard>\r\n                            <br />\r\n\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={12}>\r\n                                    <br />\r\n                                    <MaterialTable\r\n                                        style={{ padding: '15px' }}\r\n                                        title={\r\n                                            <div>\r\n                                                <Button variant=\"text\" onClick={() => AddRow()}>\r\n                                                    + Add Item\r\n                                                </Button>\r\n                                            </div>\r\n                                        }\r\n                                        columns={ItemTable.columns}\r\n                                        data={ItemTable.rows}\r\n                                        options={{\r\n                                            showTitle: property.viewList === true ? false : true,\r\n                                            paging: false,\r\n                                            actionsColumnIndex: -1,\r\n                                            pageSize: 5,\r\n                                            pageSizeOptions: [5, 10, 20, 30],\r\n                                            search: false,\r\n                                            loadingType: 'linear',\r\n                                            headerStyle: {\r\n                                                fontWeight: 'bold',\r\n                                                paddingLeft: '10px',\r\n                                                paddingRight: '0px',\r\n                                                paddingTop: '0px',\r\n                                                paddingBottom: '0px',\r\n                                                textAlign: 'left'\r\n                                            },\r\n                                            actionsCellStyle: {\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                                width: 20\r\n                                            }\r\n                                        }}\r\n                                        actions={[\r\n                                            (rowData) => ({\r\n                                                icon: () => (\r\n                                                    <DeleteOutline sx={{ color: red[500] }} style={{ height: '1em', width: '1em' }} />\r\n                                                ),\r\n                                                tooltip: 'Delete',\r\n                                                onClick: (event) => {\r\n                                                    onClickDelete(event, rowData);\r\n                                                }\r\n                                            })\r\n                                        ]}\r\n                                        localization={{\r\n                                            body: {\r\n                                                emptyDataSourceMessage: 'No records to display',\r\n                                                filterRow: {\r\n                                                    filterTooltip: 'Filter'\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Adjustments;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useMediaQuery, useScrollTrigger } from '@mui/material';\r\n\r\n// project import\r\nimport { useSelector } from 'store';\r\n\r\n// ==============================|| elevation scroll ||============================== //\r\nfunction ElevationScroll({ children, window }) {\r\n    const theme = useTheme();\r\n    const matchDown = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const { drawerOpen } = useSelector((state) => state.menu);\r\n\r\n    const fullStickyLeft = drawerOpen ? 281 : 42;\r\n\r\n    const responsiveTop = matchDown ? 80 : 83;\r\n    const responsiveRight = matchDown ? 38 : 41;\r\n    const responsiveLeft = matchDown ? 38 : fullStickyLeft;\r\n\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 180,\r\n        target: window || undefined\r\n    });\r\n\r\n    const darkBorder = theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.grey[200];\r\n\r\n    return React.cloneElement(children, {\r\n        style: {\r\n            backgroundColor: theme.palette.background.default,\r\n            zIndex: 1099,\r\n            borderTop: trigger ? '1px solid' : 'none',\r\n            borderBottom: trigger ? '1px solid' : 'none',\r\n            borderColor: trigger ? darkBorder : '',\r\n            position: trigger ? 'fixed' : 'relative',\r\n\r\n            top: trigger ? responsiveTop : 'auto',\r\n            right: trigger ? responsiveRight : 'auto',\r\n            left: trigger ? responsiveLeft : 'auto'\r\n        }\r\n    });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n    children: PropTypes.node,\r\n    window: PropTypes.object\r\n};\r\n\r\nexport default ElevationScroll;\r\n","\r\nexport function validateLookup(stateProps, value, listForSearch, headerValuesList, lookupValuesList, msgProp, callApi, setLookUpData) {\r\n\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            value = value.toLowerCase()\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toString().toLowerCase().indexOf(value) > -1 ||\r\n                    x[lookupValuesList[1]].toString().toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty((prevState) => ({\r\n                        ...prevState,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    }));\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        stateProps.Header[headerValuesList[i]] = \"\"\r\n                        stateProps.setHeader({ ...stateProps.Header })\r\n                    }\r\n                    console.log({ Header: stateProps.Header })\r\n                    // stateProps.setHeader({ ...stateProps.Header })\r\n                }\r\n                else if (filteredVal.length && value) {\r\n                    if (callApi) {\r\n                        switch (msgProp) {\r\n                            case \"Customers\":\r\n                                setLookUpData(null, filteredVal[0], \"Customers\")\r\n                                break;\r\n                            case \"Item\":\r\n                                setLookUpData(null, filteredVal[0], \"Item\")\r\n                                break;\r\n                            case \"Routing\":\r\n                                setLookUpData(null, filteredVal[0], \"Routing\")\r\n                                break;\r\n                            default:\r\n                                setLookUpData(\"donor\", filteredVal[0], headerValuesList, lookupValuesList)\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else {\r\n                        for (var i = 0; i < headerValuesList.length; i++) {\r\n                            stateProps.Header[headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                            stateProps.setHeader({ ...stateProps.Header })\r\n                        }\r\n\r\n                        if (msgProp === 'Bank') {\r\n                            // const dispatch = useDispatch();\r\n                            setLookUpData(filteredVal[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                stateProps.Header[headerValuesList[i]] = \"\";\r\n                stateProps.setHeader({ ...stateProps.Header })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateLookupinJV(stateProps, value, listForSearch, rowData, filterFlag, headerValuesList, lookupValuesList, msgProp) {\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toLowerCase().indexOf(value) > -1 || x[lookupValuesList[1]].toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty({\r\n                        ...stateProps.property,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    });\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                        stateProps.setJV({ ...stateProps.JV })\r\n                    }\r\n                    stateProps.setJV({ ...stateProps.JV })\r\n                }\r\n                else if (filteredVal.length && value && filterFlag === false) {\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                        stateProps.setJV({ ...stateProps.JV });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                let index = stateProps.JV.indexOf(rowData);\r\n                stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                stateProps.setJV({ ...stateProps.JV })\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}