{"version":3,"sources":["views/Manufacturing/Setup/ShiftMaintenance/index.js"],"names":["FormName","ShiftMaintenance","useState","setLoadingOnSave","onBlurDisable","setOnBlurDisable","Shifts","setShifts","isDisable","setisDisable","rowMachineCode","setRowMachineCode","dispatch","useDispatch","SingleList","useSelector","AllActionsRes","singleList","ShiftHead","ShiftName","IsActive","StartAt","CreatedUser","ModifyUser","Header","setHeader","dialogNotOpen","property","setProperty","columns","title","field","render","rowData","value","ShiftDName","name","disabled","label","EndAt","rows","ItemTable","SetItemTable","HandleOnBlur","payload","FormNameID","FormCode","FormNameIDValue","getSingleList","handleSnakeBarClose","open","useEffect","Prev","details","moment","duration","subtract","Hours","hours","Mint","minutes","push","i","startAtHours","StartAtMint","forDetails","add","second","HandleShifts","error","nullList","Success","Message","container","item","xs","close","onClick","Details","dialog","AddData","prevstate","prevState","EditData","row","SetRowDataID","data","ID","ViewData","FormID","isEditButton","Title","IsOpen","Save","undefined","severity","msg","length","Detail","createOrUpdate","prev","Close","Body","spacing","alignItems","type","Change","e","target","Blur","checked","style","paddingTop","list","id","border","backgroundColor","boxShadow","options","showTitle","toolbar","paging","actionsColumnIndex","pageSize","pageSizeOptions","search","loadingType","headerStyle","fontWeight","paddingLeft","paddingRight","paddingBottom","textAlign","actionsCellStyle","justifyContent","width","ButtonTitle1","ButtonTitle2","ShowSave"],"mappings":"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","file":"static/js/22.7ca79f6b.chunk.js","sourcesContent":["import { Grid, Card, Button } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport React, { useEffect, useState } from 'react';\r\nimport moment from 'moment';\r\nimport ReusableDialog from 'ui-component/globalcomponents/ReusableDialog';\r\nimport MaterialTable from 'material-table';\r\nimport { nullList, getSingleList, createOrUpdate, getAll } from 'store/actions/index';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    Growl,\r\n    Loader,\r\n    InputCode,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    FormButton,\r\n    DropDown,\r\n    InputDate,\r\n    PopupLookup,\r\n    InputTime\r\n} from 'ui-component/globalcomponents';\r\n\r\nlet FormName = 'Shift';\r\n\r\nconst ShiftMaintenance = () => {\r\n    const [DialogOpen, setDialogOpen] = useState(false);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [onBlurDisable, setOnBlurDisable] = useState(false);\r\n    const [Shifts, setShifts] = useState([]);\r\n    const [isDisable, setisDisable] = useState(false);\r\n    const [rowMachineCode, setRowMachineCode] = useState('');\r\n    const [dd, setdd] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const SingleList = useSelector(({ AllActionsRes }) => AllActionsRes?.singleList);\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n\r\n    const [Header, setHeader] = useState({\r\n        ShiftHead: '',\r\n        ShiftName: '',\r\n        IsActive: true,\r\n        StartAt: '00:00',\r\n        Shifts: '',\r\n        CreatedUser: '',\r\n        ModifyUser: ''\r\n    });\r\n\r\n    const [property, setProperty] = useState({\r\n        dialogNotOpen: false\r\n    });\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Shift Name',\r\n                field: 'ShiftDName',\r\n                render: (rowData) => <InputText value={rowData.ShiftDName} name=\"shiftName\" disabled={isDisable} />\r\n            },\r\n\r\n            {\r\n                title: 'Start At',\r\n                field: 'StartAt',\r\n                render: (rowData) => <InputTime label={''} value={rowData.StartAt} disabled={isDisable} />\r\n            },\r\n            {\r\n                title: 'End At',\r\n                field: 'EndAt',\r\n                render: (rowData) => <InputTime label={''} value={rowData.EndAt} disabled={isDisable} />\r\n            }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    const handleOpen = () => {\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            dialogNotOpen: false\r\n        }));\r\n\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            ShiftHead: '',\r\n            ShiftName: '',\r\n            IsActive: true,\r\n            StartAt: '00:00',\r\n            Shifts: ''\r\n        }));\r\n\r\n        SetItemTable((Prev) => ({\r\n            ...Prev,\r\n            rows: []\r\n        }));\r\n\r\n        setisDisable(false);\r\n        setOnBlurDisable(false);\r\n    };\r\n\r\n    const addData = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            dialogNotOpen: true\r\n        }));\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            ShiftHead: '',\r\n            ShiftName: '',\r\n            IsActive: true,\r\n            StartAt: '00:00',\r\n            Shifts: ''\r\n        }));\r\n    };\r\n\r\n    const editData = (row) => {\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            ShiftHead: row.ShiftHead,\r\n            ShiftName: row.ShiftName,\r\n            IsActive: row.IsActive,\r\n            StartAt: row.StartAt,\r\n            Shifts: row.Shifts\r\n        }));\r\n\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            dialogNotOpen: true\r\n        }));\r\n        setOnBlurDisable(true);\r\n    };\r\n\r\n    const HandleOnBlur = () => {\r\n        let payload = {\r\n            FormNameID: FormName,\r\n            FormCode: 'ShiftHead',\r\n            FormNameIDValue: Header.ShiftHead\r\n        };\r\n        setOnBlurDisable(true);\r\n        dispatch(getSingleList(payload));\r\n    };\r\n\r\n    const validationOnSave = () => {\r\n        if (Header.ShiftHead === '' || Header.ShiftHead === undefined || Header.ShiftHead === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Code Not Allowed',\r\n                dialogNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.ShiftName === '' || Header.ShiftHead === undefined || Header.ShiftHead === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Description Not Allowed',\r\n                dialogNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Shifts.length === 0 || Header.ShiftHead === undefined || Header.ShiftHead === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Shifts Not Allowed',\r\n                dialogNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const HandleSave = () => {\r\n        if (validationOnSave()) {\r\n            let payload = {\r\n                FormName,\r\n                Header,\r\n                Detail: Shifts\r\n            };\r\n\r\n            dispatch(createOrUpdate(payload));\r\n            setHeader({\r\n                ShiftHead: '',\r\n                ShiftName: '',\r\n                IsActive: true,\r\n                StartAt: '00:00',\r\n                Shifts: '',\r\n                CreatedUser: '',\r\n                ModifyUser: ''\r\n            });\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                dialogNotOpen: false,\r\n                open: false,\r\n                severity: null,\r\n                msg: ''\r\n            }));\r\n\r\n            SetItemTable((prev) => ({\r\n                ...prev,\r\n                rows: []\r\n            }));\r\n        }\r\n    };\r\n\r\n    const HandleShifts = () => {\r\n        let details = [];\r\n        let StartAt = moment.duration(Header.StartAt);\r\n        let EndAt;\r\n        if (Header.Shifts === 1) {\r\n            StartAt.subtract(1, 's');\r\n\r\n            let Hours = StartAt.hours();\r\n            let Mint = StartAt.minutes();\r\n\r\n            if (Hours < 10) {\r\n                Hours = `0${Hours}`;\r\n            }\r\n            if (Mint < 10) {\r\n                Mint = `0${Mint}`;\r\n            }\r\n\r\n            EndAt = `${Hours}:${Mint}`;\r\n\r\n            details.push({\r\n                ShiftDName: 'Shift',\r\n                StartAt: Header.StartAt,\r\n                EndAt\r\n            });\r\n\r\n            setShifts(details);\r\n        } else if (Header.Shifts === 2) {\r\n            for (let i = 0; i < Header.Shifts; i++) {\r\n                let startAtHours = StartAt.hours();\r\n                let StartAtMint = StartAt.minutes();\r\n                if (startAtHours < 10) {\r\n                    startAtHours = `0${startAtHours}`;\r\n                }\r\n                if (StartAtMint < 10) {\r\n                    StartAtMint = `0${StartAtMint}`;\r\n                }\r\n                let forDetails = `${startAtHours}:${StartAtMint}`;\r\n\r\n                StartAt.add({ hours: '12' }).subtract({ second: '1' });\r\n\r\n                let Hours = StartAt.hours();\r\n                let Mint = StartAt.minutes();\r\n                if (Hours < 10) {\r\n                    Hours = `0${Hours}`;\r\n                }\r\n                if (Mint < 10) {\r\n                    Mint = `0${Mint}`;\r\n                }\r\n                EndAt = `${Hours}:${Mint}`;\r\n\r\n                details.push({\r\n                    ShiftDName: 'Shift' + ' - ' + (i + 1 === 1 ? 'A' : 'B'),\r\n                    StartAt: forDetails,\r\n                    EndAt\r\n                });\r\n\r\n                StartAt = moment.duration(EndAt).add({ minutes: '1' });\r\n\r\n                setShifts(details);\r\n            }\r\n        } else if (Header.Shifts === 3) {\r\n            for (let i = 0; i < Header.Shifts; i++) {\r\n                let startAtHours = StartAt.hours();\r\n                let StartAtMint = StartAt.minutes();\r\n                if (startAtHours < 10) {\r\n                    startAtHours = `0${startAtHours}`;\r\n                }\r\n                if (StartAtMint < 10) {\r\n                    StartAtMint = `0${StartAtMint}`;\r\n                }\r\n                let forDetails = `${startAtHours}:${StartAtMint}`;\r\n\r\n                StartAt.add({ hours: '8' }).subtract({ second: '1' });\r\n\r\n                let Hours = StartAt.hours();\r\n                let Mint = StartAt.minutes();\r\n                if (Hours < 10) {\r\n                    Hours = `0${Hours}`;\r\n                }\r\n                if (Mint < 10) {\r\n                    Mint = `0${Mint}`;\r\n                }\r\n                EndAt = `${Hours}:${Mint}`;\r\n\r\n                details.push({\r\n                    ShiftDName: 'Shift' + ' - ' + (i + 1 === 1 ? 'A' : i + 1 === 2 ? 'B' : 'C'),\r\n                    StartAt: forDetails,\r\n                    EndAt\r\n                });\r\n\r\n                StartAt = moment.duration(EndAt).add({ minutes: '1' });\r\n\r\n                setShifts(details);\r\n            }\r\n        }\r\n    };\r\n\r\n    const viewData = (row) => {\r\n        setHeader(row);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            dialogNotOpen: true\r\n        }));\r\n        setisDisable(true);\r\n    };\r\n    const SetRowDataID = (data) => {\r\n        setRowMachineCode(data.ShiftHead);\r\n    };\r\n\r\n    const DiloagBody = () => {\r\n        return (\r\n            <>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <MainCard>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={8}>\r\n                                    <InputText\r\n                                        label={'Shift Code'}\r\n                                        type={'text'}\r\n                                        value={Header.ShiftHead}\r\n                                        Change={(e) => setHeader({ ...Header, ShiftHead: e.target.value })}\r\n                                        Blur={HandleOnBlur}\r\n                                        disabled={onBlurDisable || isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1}></Grid>\r\n                                <Grid item xs={3}>\r\n                                    <CheckboxButton\r\n                                        label={'Is Active'}\r\n                                        disabled={isDisable}\r\n                                        checked={Header.IsActive}\r\n                                        Change={(e) => setHeader({ ...Header, IsActive: e.target.checked })}\r\n                                    />\r\n\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <InputText\r\n                                        disabled={isDisable}\r\n                                        label={'Shift Name'}\r\n                                        type={'text'}\r\n                                        value={Header.ShiftName}\r\n                                        Change={(e) => setHeader({ ...Header, ShiftName: e.target.value })}\r\n                                    // disable={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                {/* <Grid item xs={1}>\r\n\r\n                    </Grid> */}\r\n\r\n                                <Grid item xs={6} style ={{paddingTop:24}}>\r\n                                    <InputTime\r\n                                        label={'Day Start At'}\r\n                                        value={Header.StartAt}\r\n                                        Change={(e) => setHeader({ ...Header, StartAt: e.target.value })}\r\n                                        disabled={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6} style ={{paddingTop:24}}>\r\n                                    <DropDown\r\n                                        label={'Total Shifts'}\r\n                                        value={Header.Shifts}\r\n                                        list={[1, 2, 3]}\r\n                                        id={'totalShifts'}\r\n                                        Change={(e) => {\r\n                                            setHeader({ ...Header, Shifts: e.target.value });\r\n                                        }}\r\n                                        disabled={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container>\r\n                                <Grid item xs={12}>\r\n                                    <MaterialTable\r\n                                        columns={ItemTable.columns}\r\n                                        data={ItemTable.rows}\r\n                                        style={{\r\n                                            border: 'none',\r\n                                            backgroundColor: 'transparent',\r\n                                            boxShadow: 'none',\r\n                                            paddingTop: '30px !important'\r\n                                        }}\r\n                                        options={{\r\n                                            showTitle: false,\r\n                                            toolbar: true,\r\n                                            paging: false,\r\n                                            actionsColumnIndex: -1,\r\n                                            pageSize: 5,\r\n                                            pageSizeOptions: [5, 10, 20, 30],\r\n                                            search: false,\r\n                                            loadingType: 'linear',\r\n                                            headerStyle: {\r\n                                                fontWeight: 'bold',\r\n                                                paddingLeft: '10px',\r\n                                                paddingRight: '0px',\r\n                                                paddingTop: '0px',\r\n                                                paddingBottom: '0px',\r\n                                                textAlign: 'left'\r\n                                            },\r\n                                            actionsCellStyle: {\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                                width: 20\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    useEffect(() => {\r\n        SetItemTable((Prev) => ({\r\n            ...Prev,\r\n            rows: Shifts\r\n        }));\r\n    }, [Shifts]);\r\n\r\n    useEffect(() => {\r\n        HandleShifts();\r\n    }, [Header?.Shifts]);\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (SingleList) {\r\n            if (SingleList?.Success) {\r\n                setHeader({\r\n                    ShiftHead: SingleList.Message.Header.ShiftHead,\r\n                    ShiftName: SingleList.Message.Header.ShiftName,\r\n                    IsActive: SingleList.Message.Header.IsActive,\r\n                    StartAt: SingleList.Message.Header.StartAt,\r\n                    Shifts: SingleList.Message.Header.Shifts,\r\n                    CreatedUser: '',\r\n                    ModifyUser: ''\r\n                });\r\n            }\r\n        }\r\n    }, [SingleList?.Message]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n                </Grid>\r\n                <Register\r\n                    Details={'Shift Maintenance List'}\r\n                    FormName={FormName}\r\n                    // FormID={constant.GeneralEntryFormID}\r\n                    // props={props}\r\n\r\n                    dialog={true}\r\n                    AddData={addData}\r\n                    EditData={editData}\r\n                    // payload={payload}\r\n                    // saveFunction={saveFunction}\r\n                    SetRowDataID={SetRowDataID}\r\n                    // hideDialog={hideDialog}\r\n                    // dosaveFunction={dosaveFunction}\r\n                    setLoadingOnSave={setLoadingOnSave}\r\n                    ID={rowMachineCode}\r\n                    ViewData={viewData}\r\n                    FormID={FormName}\r\n                    FormCode={'ShiftHead'}\r\n                    isEditButton={true}\r\n                // type='JV'\r\n                // postingIcons={false}\r\n                />\r\n            </Grid>\r\n\r\n            <ReusableDialog\r\n                Title={'Shift Maintenance'}\r\n                IsOpen={property.dialogNotOpen}\r\n                Save={HandleSave}\r\n                Close={handleClose}\r\n                Body={DiloagBody()}\r\n                ButtonTitle1={'Save'}\r\n                ButtonTitle2={'Cancel'}\r\n                ShowSave={isDisable}\r\n            />\r\n\r\n            {/* <PopupLookup\r\n    LookUpOpen={LookupOpen}\r\n    large={false}\r\n    LookUpHeading={'Machine LookUp'}\r\n    changeSize={true}\r\n    pageSize={10}\r\n    LookupList={MachineLookUpList}\r\n    LookUpClose={() => setLookupOpen(false)}\r\n    DialogActions={true}\r\n    ok={() => setLookupOpen(false) }\r\n     /> */}\r\n\r\n            {/* <PopupLookup large={false}\r\n        LookUpHeading={\"Machine LookUp\"}\r\n        LookUpOpen={LookupOpen}\r\n        LookUpClose={() => setLookupOpen(false)}\r\n        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Machine')}\r\n        LookupList={[]} /> */}\r\n\r\n            {/* <PopupLookup\r\n        LookUpOpen={StageLookupOpen}\r\n        large={false}\r\n        LookUpHeading={'Stage LookUp'}\r\n        // changeSize={true}\r\n        // pageSize={10}\r\n\r\n        LookupList={StageLookUpList}\r\n        LookUpClose={() => setStageLookupOpen(false)}\r\n        // DialogActions={true}\r\n        ok={() => setStageLookupOpen(false)}\r\n    /> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ShiftMaintenance;\r\n"],"sourceRoot":""}