{"version":3,"sources":["views/Manufacturing/Setup/MachineMaintenance/index.js"],"names":["FormName","MachineMaintenance","props","useState","MachineCode","MachineName","PurchaseDate","Date","InstalledDate","IsActive","PowerPerUnit","LaborPerUnit","OutputPerUnit","Header","setHeader","dispatch","useDispatch","open","severity","msg","property","setProperty","dialogOpen","setDialogOpen","setViewData","isEdit","setEditData","onBlueDisable","setOnBlueDisable","saveFunction","dosaveFunction","setLoadingOnSave","rowMachineCode","setRowMachineCode","isDisable","setIsDisable","AllActionsRes","useSelector","useEffect","error","nullList","singleList","Success","Message","handleClose","handleSnakeBarClose","HandleOnBlur","prevState","CodeMsg","payload","getSingleList","container","item","xs","close","onClick","Details","dialog","DialogClose","AddData","NameError","NameMsg","EditData","row","SetRowDataID","data","FormCode","ID","ViewData","FormID","postingIcons","isEditButton","Title","widthAllow","ShowSave","IsOpen","Close","Body","spacing","alignItems","iserror","CodeError","helperText","label","value","Change","e","target","Blur","disabled","checked","id","date","symbol","ButtonTitle1","ButtonTitle2","ButtonTitle3","Save","undefined","createOrUpdate","console","log"],"mappings":"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","file":"static/js/21.7053db1b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    Growl,\r\n    Loader,\r\n    InputCode,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    FormButton,\r\n    DropDown,\r\n    InputDate,\r\n} from 'ui-component/globalcomponents';\r\nimport { nullList, getSingleList, createOrUpdate, getAll } from 'store/actions/index';\r\nimport { Grid, Card, Switch } from '@mui/material';\r\nimport ReusableDialog from 'ui-component/globalcomponents/ReusableDialog';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nlet FormName = \"Machine\"\r\n\r\nconst MachineMaintenance = (props) => {\r\n    const [Header, setHeader] = useState({\r\n        MachineCode: '',\r\n        MachineName: '',\r\n        PurchaseDate: new Date(),\r\n        InstalledDate: new Date(),\r\n        IsActive: true,\r\n        PowerPerUnit: 0,\r\n        LaborPerUnit: 0,\r\n        OutputPerUnit: 0,\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const [property, setProperty] = useState({\r\n        open: false,\r\n        severity: null,\r\n        msg: '',\r\n        // CodeError:false,\r\n        // CodeMsg:'',\r\n        // NameError: false,\r\n        // NameMsg: ''\r\n    });\r\n    const [dialogOpen, setDialogOpen] = useState(false)\r\n\r\n    const [isView, setViewData] = useState(false); // for View\r\n    const [isEdit, setEditData] = useState(false); // for Edit\r\n    const [onBlueDisable, setOnBlueDisable] = useState(false);\r\n\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [rowMachineCode, setRowMachineCode] = useState('');\r\n\r\n    const [isDisable, setIsDisable] = useState(false)\r\n    const [onBlurDisable, setonBlurDisable] = useState(false)\r\n\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n\r\n            dispatch(nullList());\r\n        }\r\n\r\n        else if (AllActionsRes?.singleList) {\r\n\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes.singleList.Message)\r\n                setOnBlueDisable(true);\r\n                dispatch(nullList());\r\n            }\r\n            else {\r\n                setOnBlueDisable(false);\r\n            }\r\n\r\n        }\r\n    }, [AllActionsRes])\r\n\r\n    const handleOpen = () => {\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setDialogOpen(false)\r\n        // setIsDisable(false)\r\n\r\n    };\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const addData = () => {\r\n        setIsDisable(false)\r\n        setHeader({\r\n            MachineCode: '',\r\n            MachineName: '',\r\n            PurchaseDate: new Date(),\r\n            InstalledDate: new Date(),\r\n            IsActive: true,\r\n            PowerPerUnit: 0,\r\n            LaborPerUnit: 0,\r\n            OutputPerUnit: 0,\r\n        });\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            NameError: false,\r\n            NameMsg: '',\r\n            NameError: false,\r\n            NameError: ''\r\n\r\n\r\n        }))\r\n        setViewData(false);\r\n        setOnBlueDisable(false)  // Cause user add then on blur then add \r\n        setEditData(false);\r\n\r\n        setDialogOpen(true)\r\n    };\r\n\r\n    const viewData = (row) => {\r\n        setIsDisable(true)\r\n        setHeader(row);\r\n        setDialogOpen(true)\r\n        setViewData(false);\r\n        setEditData(false);\r\n\r\n    };\r\n\r\n    const editData = (row) => {\r\n        setIsDisable(false)\r\n        setHeader(row);\r\n        setViewData(false);\r\n        setDialogOpen(true)\r\n        setEditData(true);\r\n    };\r\n\r\n    const SetRowDataID = (data) => {\r\n        setRowMachineCode(data.MachineCode);\r\n    };\r\n\r\n    const onChaneHandler = (e) => {\r\n\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        let checked = e.target.checked;\r\n\r\n        if (checked) {\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                [name]: checked\r\n            }));\r\n        } else {\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                [name]: value\r\n            }));\r\n        }\r\n    };\r\n\r\n    const validationOnSave = () => {\r\n        if (Header.MachineCode === '' || Header.MachineCode === undefined || Header.MachineCode === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Machine Code is Empty',\r\n                CodeError: true,\r\n                CodeMsg: 'Machine Code is Empty'\r\n\r\n            });\r\n            return false;\r\n        }\r\n        if (Header.MachineName === '' || Header.MachineName === undefined || Header.MachineName === null) {\r\n\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Machine Name is Empty',\r\n                NameError: true,\r\n                NameMsg: 'Machine Name is Empty'\r\n\r\n            });\r\n            return false;\r\n        }\r\n\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (validationOnSave()) {\r\n            let payload = {\r\n                FormName: 'Machine',\r\n                Header\r\n            };\r\n            dispatch(createOrUpdate(payload));\r\n            console.log({ Header })\r\n        }\r\n    };\r\n\r\n    const HandleOnBlur = () => {\r\n        if (Header.MachineCode != '') {\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                CodeMsg: ''\r\n            }))\r\n            let payload = `FormName=${FormName}&MachineCode=${Header.MachineCode}`\r\n            dispatch(getSingleList(payload));\r\n\r\n        }\r\n    };\r\n\r\n    const DialogBody = () => {\r\n        return (\r\n            <>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <MainCard>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={5}>\r\n                                    <InputText\r\n                                        iserror={property.CodeError}\r\n                                        helperText={property.CodeMsg}\r\n                                        label=\"Machine Code\"\r\n                                        value={Header.MachineCode}\r\n                                        Change={(e) => setHeader({ ...Header, MachineCode: e.target.value })}\r\n                                        Blur={HandleOnBlur}\r\n                                        disabled={isDisable || onBlueDisable || isEdit}\r\n                                    />\r\n                                </Grid>\r\n                                {/* <Grid item xs={1}></Grid> */}\r\n                                <Grid item xs={5}>\r\n                                    <InputText\r\n                                        iserror={property.NameError}\r\n                                        helperText={property.NameMsg}\r\n                                        label=\"Machine Name\"\r\n                                        value={Header.MachineName}\r\n                                        Change={(e) => setHeader({ ...Header, MachineName: e.target.value })}\r\n                                        // Blur={HandleOnBlur}\r\n                                        disabled={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={2} >\r\n                                    <CheckboxButton\r\n                                        label={'Is Active'}\r\n                                        disabled={isDisable}\r\n                                        checked={Header.IsActive}\r\n                                        Change={(e) => setHeader({ ...Header, IsActive: e.target.checked })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} >\r\n                                    <InputDate\r\n                                        value={Header.PurchaseDate}\r\n                                        id=\"InstalledDate\"\r\n                                        Change={(date) => {\r\n                                            setHeader({ ...Header, PurchaseDate: date });\r\n                                        }}\r\n                                        disabled={isDisable}\r\n                                        Blur={() => null}\r\n                                        label=\"Purchase Date\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <InputDate\r\n                                        value={Header.InstalledDate}\r\n                                        id=\"InstalledDate\"\r\n                                        Change={(date) => {\r\n                                            setHeader({ ...Header, InstalledDate: date });\r\n                                        }}\r\n                                        disabled={isDisable}\r\n                                        Blur={() => null}\r\n                                        // disabled={property.viewList}\r\n                                        label=\"Install Date\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <InputNumber\r\n                                        label={'Power Per Hour'}\r\n                                        value={Header.PowerPerUnit}\r\n                                        Change={(e) => setHeader({ ...Header, PowerPerUnit: e.target.value })}\r\n                                        symbol={false}\r\n                                        disabled={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <InputNumber\r\n                                        label={'Labour Per Hour'}\r\n                                        value={Header.LaborPerUnit}\r\n                                        Change={(e) => setHeader({ ...Header, LaborPerUnit: e.target.value })}\r\n                                        symbol={false}\r\n                                        disabled={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <InputNumber\r\n                                        label={'Output Per Hour'}\r\n                                        value={Header.OutputPerUnit}\r\n                                        Change={(e) => setHeader({ ...Header, OutputPerUnit: e.target.value })}\r\n                                        symbol={false}\r\n                                        disabled={isDisable}\r\n                                    // Change={(e) => console.log('Output',e.target.value)}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n                </Grid>\r\n\r\n                <Register\r\n                    Details={'Machine Maintenance List'}\r\n                    FormName={FormName}\r\n                    dialog={true}\r\n                    DialogClose={handleClose}\r\n                    AddData={addData}\r\n                    EditData={editData}\r\n                    props={props}\r\n                    saveFunction={saveFunction}\r\n                    SetRowDataID={SetRowDataID}\r\n                    FormCode={'MachineCode'}\r\n                    dosaveFunction={dosaveFunction}\r\n                    setLoadingOnSave={setLoadingOnSave}\r\n                    ID={rowMachineCode}\r\n                    ViewData={viewData}\r\n                    FormID={'Machine'}\r\n                    postingIcons={false}\r\n                    isEditButton={true}\r\n                />\r\n\r\n                <ReusableDialog\r\n                    Title={'Machine Maintenance'}\r\n                    widthAllow={'md'}\r\n                    ShowSave={isDisable}\r\n                    IsOpen={dialogOpen}\r\n                    Close={handleClose}\r\n                    Body={DialogBody()}\r\n                    ButtonTitle1={'Save'}\r\n                    ButtonTitle2={'Cancel'}\r\n                    ButtonTitle3={'OK'}\r\n                    Save={handleSave}\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MachineMaintenance;\r\n"],"sourceRoot":""}