{"version":3,"sources":["views/Manufacturing/Setup/RoutingMaintenance/index.js","ui-component/globalcomponents/Lookup/TableLookup.js"],"names":["FormName","newRowsArr","RoutingMaintenance","props","useState","LookupOpen","setLookupOpen","SelectedRowData","SetSelectedRowData","StageLookupOpen","setStageLookupOpen","saveFunction","dosaveFunction","setLoadingOnSave","columns","rows","MachineLookUpList","setMachineLookUpList","StageLookUpList","setStageLookUpList","recID","setRecID","isDisable","setIsDisable","onBlurDisable","setonBlurDisable","AllActionsRes","useSelector","lookupRes","dispatch","useDispatch","RoutingCode","RoutingName","IsActive","Header","setHeader","open","severity","msg","viewList","editList","newList","property","setProperty","getLookUpData","getLookupData","title","field","render","rowData","StageSeq","type","disabled","isDisabled","value","StageName","onClick","onBlurDiv","lookupOpen","MachineName","variant","symbol","textAlign","InputLabelProps","shrink","placeholder","customInput","TextField","thousandSeparator","decimalScale","fixedDecimalScale","StandardHours","Change","e","updateTableData","Number","target","replace","split","Symbol","join","ItemTable","SetItemTable","console","log","useEffect","error","nullList","createOrUpdateData","Success","prevState","registerNotOpen","singleList","Message","arrForView","Detail","map","eachItem","RoutingHead","message","nullLookup","lookupData","Machine","Stages","nullLookup1","fieldName","arr","index","indexOf","handleClose","handleSnakeBarClose","setLookUpData","name","MachineCode","LaborPerUnit","OutputPerUnit","PowerPerUnit","StageCode","getSingleRec","payload","getSingleList","HandleOnBlur","container","item","xs","close","Details","FormCode","FormId","RoutingId","dialog","AddData","editData","newData","EditData","DialogClose","SetRowDataID","data","ID","ViewData","FormID","postingIcons","isEditButton","widthAllow","Title","IsOpen","Close","Body","spacing","alignItems","label","Blur","checked","Active","ItemRow","length","push","addNewRow","icons","Icons","style","border","backgroundColor","boxShadow","paddingTop","options","showTitle","toolbar","paging","actionsColumnIndex","pageSize","pageSizeOptions","search","loadingType","headerStyle","fontWeight","paddingLeft","paddingRight","paddingBottom","actionsCellStyle","justifyContent","width","actions","icon","sx","color","red","height","tooltip","event","splice","onClickDelete","ButtonTitle1","ButtonTitle2","ButtonTitle3","Save","undefined","filter","i","createOrUpdate","ShowSave","large","LookUpHeading","LookUpOpen","LookUpClose","LookupList","ok","Component"],"mappings":"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","file":"static/js/20.d5b1874e.chunk.js","sourcesContent":["import { Grid, Card, Button } from '@mui/material';\r\nimport React, { useState, useEffect } from 'react';\r\nimport ReusableDialog from 'ui-component/globalcomponents/ReusableDialog';\r\nimport MaterialTable from 'material-table';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport DeleteOutline from '@mui/icons-material/DeleteOutline';\r\nimport { red } from '@mui/material/colors';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    Growl,\r\n    InputCode,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    FormButton,\r\n    DropDown,\r\n    InputDate,\r\n    PopupLookup\r\n} from 'ui-component/globalcomponents';\r\nimport TableLookup from 'ui-component/globalcomponents/Lookup/TableLookup';\r\nimport {\r\n    getLookupData,\r\n    getLookup2Data,\r\n    nullList,\r\n    insertAll,\r\n    getSingleList,\r\n    nullLookup1,\r\n    nullLookup2,\r\n    nullLookup,\r\n    createOrUpdate\r\n} from 'store/actions/index';\r\nimport NumberFormat from 'react-number-format';\r\nimport { TextField } from '@mui/material';\r\nimport Icons from 'ui-component/material-icons';\r\nimport { RoutingId } from 'utilities/FormIds';\r\nlet FormName = 'Routing';\r\nvar newRowsArr = [];\r\n\r\nconst RoutingMaintenance = (props) => {\r\n    const [DialogOpen, setDialogOpen] = useState(false);\r\n    const [LookupOpen, setLookupOpen] = useState(false);\r\n    const [Loading, setLoading] = useState(true);\r\n    const [SelectedRowData, SetSelectedRowData] = useState({});\r\n    const [StageLookupOpen, setStageLookupOpen] = useState(false);\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [MachineLookUpList, setMachineLookUpList] = useState({ columns: [], rows: [] });\r\n    const [StageLookUpList, setStageLookUpList] = useState({ columns: [], rows: [] });\r\n    const [recID, setRecID] = useState(0);\r\n    const [isDisable, setIsDisable] = useState(false)\r\n    const [onBlurDisable, setonBlurDisable] = useState(false)\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n    const lookupRes = useSelector(({ lookupRes }) => lookupRes);\r\n    const dispatch = useDispatch();\r\n\r\n    const [Header, setHeader] = useState({\r\n        RoutingCode: '',\r\n        RoutingName: '',\r\n        IsActive: false\r\n    });\r\n\r\n    const [property, setProperty] = useState({\r\n        open: false,\r\n        severity: null,\r\n        msg: '',\r\n        viewList: false,\r\n        editList: false,\r\n        newList: false\r\n    });\r\n\r\n    const getLookUpData = () => {\r\n        dispatch(getLookupData(`FormName=${FormName}`));\r\n    };\r\n\r\n    const checkFields = () => {\r\n        if (Header.RoutingCode === null || Header.RoutingCode === undefined || Header.RoutingCode === '') {\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Routing Code is Empty',\r\n                registerNotOpen: true\r\n            }));\r\n            return false\r\n        } else if (Header.RoutingName === null || Header.RoutingName === undefined || Header.RoutingName === '') {\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'RoutingName is Empty',\r\n                registerNotOpen: true\r\n            }));\r\n            return false\r\n        } else if (ItemTable.rows.length === 0) {\r\n            setProperty({\r\n                ...property,\r\n                msg: ' Sequence Data can not be empyt',\r\n                severity: 'error',\r\n                open: true,\r\n                registerNotOpen: true\r\n            });\r\n            return false;\r\n        }\r\n\r\n        let flag = 0;\r\n        flag = ItemTable.rows.filter((item, i) => {\r\n            return item.StageCode === '' || item.StageName === '' || item.MachineCode === '' || item.StandardHours === '';\r\n        });\r\n\r\n        if (flag.length > 0) {\r\n            setProperty({\r\n                ...property,\r\n                msg: 'Please completly Fill Rows Data',\r\n                severity: 'error',\r\n                open: true,\r\n                registerNotOpen: true\r\n            });\r\n            return false\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Sequence',\r\n                field: 'StageSeq',\r\n                render: (rowData) => <p>{rowData.StageSeq}</p>\r\n            },\r\n\r\n            {\r\n                title: 'Stage',\r\n                field: 'StageName',\r\n                type: 'numeric',\r\n                render: (rowData) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        disabled={rowData.isDisabled}\r\n                        value={rowData.StageName}\r\n                        // disabled={}\r\n                        onClick={() => {\r\n                            setStageLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={LookupOpen}\r\n                        rows={[]}\r\n                    />\r\n                )\r\n\r\n                // cellStyle: {\r\n                //     width: '15%'\r\n                // },\r\n            },\r\n            // {\r\n            //     title: 'Stage Name',\r\n            //     field: 'StageName',\r\n            //     render: (rowData) => <InputText value={rowData.StageName} name=\"StageName\" disabled={true} />\r\n\r\n            //     // cellStyle: {\r\n            //     //     width: '25%'\r\n            //     // }\r\n            // },\r\n            {\r\n                title: 'Machine',\r\n                field: 'MachineName',\r\n                render: (rowData) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.MachineName}\r\n                        disabled={rowData.isDisabled}\r\n                        onClick={() => {\r\n                            setLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={LookupOpen}\r\n                        rows={[]}\r\n                    />\r\n                ),\r\n                type: 'numeric'\r\n                // cellStyle: {\r\n                //     width: '15%'\r\n                // },\r\n            },\r\n            // {\r\n            //     title: 'Machine Name',\r\n            //     field: 'MachineName',\r\n            //     render: (rowData) => <InputText \r\n            //     value={rowData.MachineName} \r\n            //     name=\"MachineName\" disabled={true}\r\n            //      />\r\n            //     // cellStyle: {\r\n            //     //     width: '25%'\r\n            //     // },\r\n            // },\r\n            {\r\n                title: 'Std Time',\r\n                field: 'StandardHours',\r\n                render: (rowData) => (\r\n                    <InputNumber\r\n                        variant=\"outlined\"\r\n                        symbol={false}\r\n                        textAlign=\"left\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        placeholder=\"0.00\"\r\n                        customInput={TextField}\r\n                        disabled={rowData.isDisabled}\r\n                        thousandSeparator\r\n                        decimalScale={2}\r\n                        fixedDecimalScale={2}\r\n                        value={rowData.StandardHours}\r\n                        // onChange={(e) =>\r\n                        //     updateTableData(\r\n                        //         Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')),\r\n                        //         rowData,\r\n                        //         'StandardHours'\r\n                        //     )\r\n                        // }\r\n                        Change={e => updateTableData(Number((e.target.value.replace(/,/gi, \"\").split(rowData.Symbol).join(\"\"))), rowData, \"StandardHours\")}\r\n                    />\r\n                )\r\n            }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    console.log('Header', Header);\r\n\r\n    const LookUpOnClick = () => {\r\n        setLookupOpen(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes.createOrUpdateData) {\r\n            if (AllActionsRes.createOrUpdateData.Success === true) {\r\n                // console.log({ message: AllActionsRes.createOrUpdateData })\r\n                // setProperty({\r\n                //     ...property,\r\n                //     open: true,\r\n                //     registerNotOpen: false,\r\n                //     severity: 'success',\r\n                //     msg: AllActionsRes?.createOrUpdateData?.Message,\r\n                // });\r\n                // setDialogOpen(false)\r\n                setProperty((prevState) => ({\r\n                    ...prevState,\r\n                    registerNotOpen: false\r\n                }));\r\n            } else {\r\n                // setProperty({\r\n                //     ...property,\r\n                //     open: true,\r\n                //     severity: 'error',\r\n                //     msg: AllActionsRes?.insertData?.Message,\r\n                //     dialogOpen: false,\r\n                //     loadingOnSave: false,\r\n                // });\r\n            }\r\n            // dispatch(nullList());\r\n        } else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes.singleList.Message.Header);\r\n                if (isDisable) {\r\n                    let arrForView = AllActionsRes.singleList.Message.Detail;\r\n                    arrForView.map((eachItem) => {\r\n                        eachItem['isDisabled'] = true\r\n                    })\r\n                    console.log({ arrForView })\r\n                    SetItemTable((prevState) => ({\r\n                        ...prevState,\r\n                        rows: arrForView\r\n                    }));\r\n                    newRowsArr = arrForView;\r\n\r\n                }\r\n                else {\r\n                    SetItemTable((prevState) => ({\r\n                        ...prevState,\r\n                        rows: AllActionsRes.singleList.Message.Detail\r\n                    }));\r\n                    newRowsArr = AllActionsRes.singleList.Message.Detail;\r\n\r\n                }\r\n\r\n                setHeader((prevState) => ({\r\n                    ...prevState,\r\n                    RoutingHead: ''\r\n                }));\r\n\r\n                // setisDisable(true)\r\n            } else {\r\n                // setProperty({\r\n                //     ...property,\r\n                //     open: true,\r\n                //     severity: 'error',\r\n                //     msg: AllActionsRes?.singleList?.Message,\r\n                //     dialogOpen: false,\r\n                //     loadingOnSave: false,\r\n                // });\r\n            }\r\n        }\r\n    }, [AllActionsRes]);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes.error) {\r\n            setProperty({\r\n                ...property,\r\n                msg: lookupRes.error.message,\r\n                severity: 'error',\r\n                open: true\r\n            });\r\n            dispatch(nullLookup());\r\n        }\r\n        if (lookupRes.lookupData) {\r\n            if (lookupRes.lookupData.Success === true) {\r\n                setMachineLookUpList(lookupRes.lookupData.Message.Machine);\r\n                setStageLookUpList(lookupRes.lookupData.Message.Stages);\r\n            } else {\r\n            }\r\n            dispatch(nullLookup1());\r\n        }\r\n    }, [lookupRes]);\r\n\r\n    const updateTableData = (value, rowData, fieldName) => {\r\n        console.log({ value });\r\n        console.log({ rowData });\r\n        let arr = [...newRowsArr];\r\n        // let index = arr.indexOf(SelectedRowData)\r\n        let index = arr.indexOf(rowData);\r\n        arr[index][fieldName] = value;\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n    };\r\n\r\n    const StageLookUpOnClick = () => {\r\n        setStageLookupOpen(true);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: false\r\n        }));\r\n        // setIsDisable(false)\r\n    };\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const addNewRow = () => {\r\n\r\n        let arr = [...ItemTable.rows];\r\n        let ItemRow = {\r\n            StageCode: '',\r\n            StageName: '',\r\n            LaborPerUnit: '',\r\n            OutputPerUnit: '',\r\n            PowerPerUnit: '',\r\n            MachineCode: '',\r\n            MachineName: '',\r\n            StandardHours: '',\r\n            isDisabled: false\r\n        };\r\n        if (arr.length) {\r\n            let lastIndex = arr.length - 1;\r\n            let lastArrObject = arr[lastIndex];\r\n            ItemRow['StageSeq'] = arr.length + 1;\r\n            arr.push({ ...ItemRow });\r\n        } else {\r\n            ItemRow['StageSeq'] = 1;\r\n            arr.push({ ...ItemRow });\r\n        }\r\n        newRowsArr = arr;\r\n        SetItemTable({ ...ItemTable, rows: newRowsArr });\r\n    };\r\n\r\n    const onClickDelete = (rowData) => {\r\n        let arr = [...ItemTable.rows];\r\n        let index = arr.indexOf(rowData);\r\n        arr.splice(index, 1);\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n    };\r\n\r\n    const setLookUpData = (e, rowData, name) => {\r\n        if (name === 'Machine') {\r\n            let arr = newRowsArr;\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['MachineCode'] = rowData.MachineCode;\r\n            arr[index]['MachineName'] = rowData.MachineName;\r\n            arr[index]['LaborPerUnit'] = rowData.LaborPerUnit;\r\n            arr[index]['OutputPerUnit'] = rowData.OutputPerUnit;\r\n            arr[index]['PowerPerUnit'] = rowData.PowerPerUnit;\r\n            setLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        } else if (name === 'Stage') {\r\n            let arr = newRowsArr;\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['StageCode'] = rowData.StageCode;\r\n            arr[index]['StageName'] = rowData.StageName;\r\n            setStageLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n    };\r\n\r\n    const addData = () => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            editData: false,\r\n            registerNotOpen: true,\r\n            newData: true\r\n        }));\r\n        SetItemTable((prevState) => ({\r\n            ...prevState,\r\n            rows: []\r\n        }));\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            RoutingCode: '',\r\n            RoutingName: '',\r\n            IsActive: true\r\n        }));\r\n        setIsDisable(false)\r\n        setonBlurDisable(false) // cause user add then \r\n        getLookUpData();\r\n    };\r\n\r\n    const viewData = (rowData) => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: true,\r\n            editData: false,\r\n            newData: false\r\n        }));\r\n        getSingleRec(rowData)\r\n        setIsDisable(true)\r\n    };\r\n\r\n    const handleSave = () => {\r\n        setIsDisable(false)\r\n        if (checkFields()) {\r\n            let payload = {\r\n                FormName: FormName,\r\n                Header,\r\n                Detail: ItemTable.rows\r\n            };\r\n\r\n            // console.log({ payload })\r\n            dispatch(createOrUpdate(payload));\r\n        }\r\n    };\r\n\r\n    const getSingleRec = (rowData) => {\r\n\r\n\r\n        let payload = `FormName=${FormName}&RoutingCode=${rowData.RoutingCode}`\r\n        dispatch(getSingleList(payload));\r\n\r\n    }\r\n\r\n    const editData = (rowData) => {\r\n        setHeader(rowData);\r\n        setIsDisable(false)\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: true,\r\n            editList: true,\r\n            newList: false\r\n        }));\r\n        getSingleRec(rowData)\r\n\r\n        getLookUpData();\r\n\r\n    };\r\n\r\n    const SetRowDataID = (data) => {\r\n        setRecID(data.RoutingCode);\r\n    };\r\n\r\n    const HandleOnBlur = () => {\r\n        setonBlurDisable(true)\r\n        getSingleRec({ RoutingCode: Header.RoutingCode })\r\n    };\r\n\r\n    const DiloagBody = () => {\r\n        return (\r\n            <>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <MainCard>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={5}>\r\n                                    <InputText\r\n                                        label=\"Routing Code\"\r\n                                        value={Header.RoutingCode}\r\n                                        Change={(e) => setHeader({ ...Header, RoutingCode: e.target.value })}\r\n                                        Blur={HandleOnBlur}\r\n                                        disabled={isDisable || onBlurDisable || property.editList}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={5}>\r\n                                    <InputText\r\n                                        label=\"Routing Name\"\r\n                                        value={Header.RoutingName}\r\n                                        Change={(e) => setHeader({ ...Header, RoutingName: e.target.value })}\r\n                                        disabled={isDisable}\r\n                                    />\r\n                                </Grid>\r\n                                {/* <Grid item xs={1}></Grid> */}\r\n                                <Grid item xs={2}>\r\n                                    <CheckboxButton\r\n                                        label={'Active'}\r\n                                        disabled={isDisable}\r\n                                        checked={Header.IsActive}\r\n                                        Change={(e) => setHeader({ ...Header, Active: Header.IsActive })}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={1}></Grid>\r\n\r\n                                <Grid item xs={12}>\r\n                                    <MaterialTable\r\n                                        columns={ItemTable.columns}\r\n                                        data={ItemTable.rows}\r\n                                        title={\r\n                                            !isDisable === true ?\r\n                                                <div><Button variant=\"text\" onClick={() => addNewRow()}>\r\n                                                    + Add Item\r\n                                                </Button></div> : null}\r\n                                        icons={Icons}\r\n                                        // isLoading={Loading}\r\n                                        style={{\r\n                                            border: 'none',\r\n                                            backgroundColor: 'transparent',\r\n                                            boxShadow: 'none',\r\n                                            paddingTop: '0px !important'\r\n                                        }}\r\n                                        options={{\r\n                                            showTitle: true,\r\n                                            toolbar: true,\r\n                                            paging: false,\r\n                                            actionsColumnIndex: -1,\r\n                                            pageSize: 5,\r\n                                            pageSizeOptions: [5, 10, 20, 30],\r\n                                            search: false,\r\n                                            loadingType: 'linear',\r\n                                            headerStyle: {\r\n                                                fontWeight: 'bold',\r\n                                                paddingLeft: '10px',\r\n                                                paddingRight: '0px',\r\n                                                paddingTop: '0px',\r\n                                                paddingBottom: '0px',\r\n                                                textAlign: 'left'\r\n                                            },\r\n                                            actionsCellStyle: {\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                                width: 20\r\n                                            }\r\n                                        }}\r\n                                        actions={[\r\n                                            (rowData) => ({\r\n                                                icon: () => <DeleteOutline sx={{ color: red[500] }} style={{ height: '1em', width: '1em' }} />,\r\n                                                tooltip: 'Delete',\r\n                                                disabled: isDisable,\r\n                                                onClick: (event) => {\r\n                                                    onClickDelete(event, rowData);\r\n                                                }\r\n                                            })\r\n                                        ]}\r\n                                    // actions={[\r\n                                    //     {\r\n                                    //         icon: 'delete',\r\n                                    //         tooltip: 'Delete',\r\n                                    //         hidden: property.viewList,\r\n                                    //         onClick: (event, rowData) => {\r\n                                    //             onClickDelete(rowData);\r\n                                    //         }\r\n                                    //     }\r\n                                    // ]}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n                </Grid>\r\n\r\n                <Register\r\n                    Details={'Routing Maintenance List'}\r\n                    FormName={'Routing'}\r\n                    FormCode={'RoutingCode'}\r\n                    FormId={RoutingId}\r\n                    props={props}\r\n                    dialog={true}\r\n                    AddData={addData}\r\n                    EditData={editData}\r\n                    DialogClose={handleClose}\r\n                    // payload={payload}\r\n                    saveFunction={saveFunction}\r\n                    SetRowDataID={SetRowDataID}\r\n                    // hideDialog={hideDialog}\r\n                    dosaveFunction={dosaveFunction}\r\n                    setLoadingOnSave={setLoadingOnSave}\r\n                    ID={recID}\r\n                    ViewData={viewData}\r\n                    FormID={'Routing'}\r\n                    postingIcons={false}\r\n                    isEditButton={true}\r\n                />\r\n            </Grid>\r\n            <ReusableDialog\r\n                widthAllow={'md'}\r\n                Title={'Routing Maintenance'}\r\n                IsOpen={property.registerNotOpen}\r\n                Close={handleClose}\r\n                Body={DiloagBody()}\r\n                ButtonTitle1={'Save'}\r\n                ButtonTitle2={'Cancel'}\r\n                ButtonTitle3={'OK'}\r\n                Save={handleSave}\r\n                ShowSave={isDisable}\r\n            />\r\n\r\n            <PopupLookup\r\n                large={false}\r\n                LookUpHeading={'Machine LookUp'}\r\n                LookUpOpen={LookupOpen}\r\n                LookUpClose={() => setLookupOpen(false)}\r\n                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Machine')}\r\n                LookupList={MachineLookUpList}\r\n            />\r\n\r\n            <PopupLookup\r\n                LookUpOpen={StageLookupOpen}\r\n                large={false}\r\n                LookUpHeading={'Stage LookUp'}\r\n                LookupList={StageLookUpList}\r\n                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Stage')}\r\n                LookUpClose={() => setStageLookupOpen(false)}\r\n                ok={() => setStageLookupOpen(false)}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RoutingMaintenance;\r\n","import React, { Component } from 'react';\r\nimport { Dialog } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport MaterialTable from 'material-table'\r\n\r\nclass TableLookup extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            lookUpFilter: null,\r\n            pageSize: 20\r\n\r\n        };\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.LookUpOpen === false && this.state.lookUpFilter !== null) {\r\n            this.setState({\r\n                lookUpFilter: null,\r\n                pageSize: 20\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    pageChange = (e) => {\r\n        this.setState({ pageSize: e })\r\n        console.log(\"Page change\", e)\r\n    }\r\n\r\n    render() {\r\n        var { LookUpClose, setLookUpData, onSelChangeLookUpData, LookUpOpen } = this.props;\r\n        return (\r\n            <Dialog dismissable={true} style={this.props.large === true ? { width: \"80%\", marginLeft: '2cm' } : { width: \"50%\", marginLeft: '2cm' }} header={this.props.LookUpHeading} visible={LookUpOpen} modal={true} onHide={LookUpClose}  >\r\n                {this.props.LookupList &&\r\n                    <MaterialTable\r\n                        icons={{ Filter: () => <div /> }}\r\n                        options={{\r\n                            pageSize: this.props.changeSize === true ? this.props.pageSize : 20,\r\n                            selection: this.props.selection,\r\n                            // pageSizeOptions: [15],\r\n                            showTitle: false,\r\n                            search: false,\r\n                            filtering: true,\r\n                            filterCellStyle: {\r\n                                paddingTop: 1,\r\n                                paddingBottom: 1,\r\n                            },\r\n                            headerStyle: {\r\n                                fontWeight: \"bolder\"\r\n                            },\r\n                            showTextRowsSelected: false,\r\n                        }}\r\n                        onRowClick={(e, x) => setLookUpData(e, x)}\r\n                        onChangeRowsPerPage={(e) => { console.log(\"Page change\", e) }}\r\n                        columns={this.props.LookupList.columns}\r\n                        data={this.props.LookupList.rows}\r\n                    />\r\n                }\r\n            </Dialog>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nTableLookup.propTypes = {\r\n\r\n    LookUpClose: PropTypes.func,\r\n    setLookUpData: PropTypes.func,\r\n    onSelChangeLookUpData: PropTypes.func,\r\n    lookUpOpen: PropTypes.bool\r\n};\r\n\r\n\r\nexport default TableLookup;\r\n"],"sourceRoot":""}