{"version":3,"sources":["views/Transactions/MoIssuance/index.js","ui-component/ElevationScroll.js","utilities/validateLookup.js"],"names":["lookupTxtField","FormName","lookupSelectRow","newRowsArr","MoIssuance","props","theme","useTheme","useState","isDisable","setisDisable","setRowMachineCode","isLocationLookUp","setIsLocationLookUp","isMoNumberLookUp","setIsMoNumberLookUp","isStageLookUp","setIsStageLookUp","setIsMachineLookUp","selectLookupVal","setSelected","SelectedRowData","SetSelectedRowData","searchedRows","setSearchRows","dispatch","useDispatch","AllActionsRes","useSelector","lookupRes","ItemTableLookupOpen","setItemTableLookupOpen","setUomTableLookupOpen","StageTableLookupOpen","setStageTableLookupOpen","payload","saveFunction","setLoadingOnSave","recID","filter","setFilter","TransDate","Date","TransNo","TransType","MOTransNo","ItemCode","Item","MOID","UOMCode","UOM","UnitQuantity","BaseQuantity","RoutingCode","RoutingName","LocationCode","Location","StageCode","StageName","MachineName","MachineCode","StartTime","EndTime","TotalHours","UnitStarted","UnitsProduced","RequireQC","Completed","Header","setHeader","columns","title","field","cellStyle","width","render","rowData","i","value","CItemCode","onClick","onBlurDiv","lookupOpen","rows","CItemName","placeholder","symbolIcon","thousandSeparator","disabled","Quantity","Change","e","updateTableData","Number","target","replace","split","Symbol","join","ItemTable","SetItemTable","registerNotOpen","newList","viewList","editList","property","setProperty","setItemLookUpList","MONumberLookupList","setMONumberLookupList","setUomListForTable","stageLookupList","setStageLookupList","border","paddingTop","paddingBottom","headerStyle","fontWeight","background","locationLookupList","setLocationLookupList","useEffect","getItemCodeLookUp","getInventoryLookupData1","error","nullLookup","lookupData","Success","Message","MO","nullLookup1","lookupData2","RoutingStages","nullLookup2","lookupData3","MOStages","prevState","nullLookup3","lookupDataInventory","nullLookupInventory","lookupDataInventory1","nullLookupInventory1","lookupDataInventory2","ItemUOM","nullLookupInventory2","nullList","createOrUpdateData","open","severity","msg","singleList","Detail","fetchApiCalls","getInventoryLookupData","getLookupData","getSingleRec","getSingleList","getStagesData","getLookup2Data","getUomData","getInventoryLookupData2","checkFields","undefined","areRowsCompletelyFilled","length","item","handleSnakeBarClose","changeLookupVal","setLookUpData","Lookupname","MOStatus","getLookup3Data","arr","index","indexOf","console","log","StageSeq","prop","Start","End","diff","moment","diffMOment","duration","Hours","hours","minutes","Math","sign","parseFloat","container","justify","xs","close","alignItems","justifyContent","goBack","clearAll_OnClick","clearAll","saveAndClose","saveAndClose_OnClick","FormID","submitButton","SaveButton","Button2","submit","SaveButton_OnClick","createOrUpdate","handleSave","submitButton_OnClick","postAndSave","Button2_OnClick","printVoucher","spacing","id","label","date","reference","onFocus","onBlur","setTimeout","validateLookup","propertyName","listForSearch","setSearchRowProp","searchResult","setFilterProp","setLookupEnable","bomCodeLookUp","lookupValuesList","symbol","StageCodeLookUp","sx","mx","mb","bgcolor","palette","mode","dark","main","primary","light","style","padding","variant","push","CStatus","AddRow","data","options","showTitle","paging","actionsColumnIndex","pageSize","pageSizeOptions","search","loadingType","paddingLeft","paddingRight","textAlign","actionsCellStyle","actions","icon","color","red","height","tooltip","event","splice","onClickDelete","localization","body","emptyDataSourceMessage","filterRow","filterTooltip","Details","dialog","AddData","prevstate","EditData","SetRowDataID","ShiftHead","ID","FormCode","ViewData","type","postingIcons","isEditButton","ElevationScroll","children","window","matchDown","useMediaQuery","breakpoints","down","drawerOpen","state","menu","responsiveTop","responsiveRight","responsiveLeft","trigger","useScrollTrigger","disableHysteresis","threshold","darkBorder","grey","React","cloneElement","backgroundColor","default","zIndex","borderTop","borderBottom","borderColor","position","top","right","left","stateProps","headerValuesList","msgProp","callApi","toLowerCase","filteredVal","x","toString"],"mappings":"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","file":"static/js/11.199f0396.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { Grid, Card, Button, CardActions, Divider, CardContent } from '@mui/material';\r\nimport ReusableDialog from '../../../ui-component/globalcomponents/ReusableDialog';\r\nimport MaterialTable from 'material-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    Growl,\r\n    Loader,\r\n    InputCode,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    FormButton,\r\n    DropDown,\r\n    InputDate,\r\n    PopupLookup,\r\n    InputTime\r\n} from '../../../ui-component/globalcomponents';\r\nimport {\r\n    getLookupData,\r\n    getLookup2Data,\r\n    getLookup3Data,\r\n    getInventoryLookupData1,\r\n    nullList,\r\n    insertAll,\r\n    getSingleList,\r\n    nullLookup1,\r\n    nullLookup2,\r\n    nullLookup,\r\n    createOrUpdate,\r\n    getInventoryLookupData,\r\n    nullLookupInventory,\r\n    getInventoryLookupData2,\r\n    nullLookupInventory1,\r\n    nullLookupInventory2,\r\n    nullLookup3\r\n} from '../../../store/actions/index';\r\nimport DeleteOutline from '@mui/icons-material/DeleteOutline';\r\nimport { validateLookup } from '../../../utilities/validateLookup';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport { useTheme } from '@mui/styles';\r\nimport { red } from '@mui/material/colors';\r\nimport GlobalHeader from 'ui-component/globalcomponents/GlobalHeader/GlobalHeader';\r\nimport ElevationScroll from 'ui-component/ElevationScroll';\r\nlet FormName = 'MOIssuance';\r\nlet lookupSelectRow = false;\r\nlet lookupTxtField;\r\nlet newRowsArr = [];\r\nlet aF = [];\r\n\r\nconst MoIssuance = (props) => {\r\n    const theme = useTheme();\r\n\r\n    const [isDisable, setisDisable] = useState(false);\r\n    const [onBlurDisable, setOnBlurDisable] = useState(false);\r\n    const [rowMachineCode, setRowMachineCode] = useState('');\r\n    const [isLocationLookUp, setIsLocationLookUp] = useState(false);\r\n    const [isMoNumberLookUp, setIsMoNumberLookUp] = useState(false);\r\n    const [isStageLookUp, setIsStageLookUp] = useState(false);\r\n    const [isMachineLookUp, setIsMachineLookUp] = useState(false);\r\n    const [selectLookupVal, setSelected] = useState(true);\r\n    const [array, setArray] = useState([]);\r\n    const [SelectedRowData, SetSelectedRowData] = useState({});\r\n    const [searchedRows, setSearchRows] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n    const lookupRes = useSelector(({ lookupRes }) => lookupRes);\r\n\r\n    // Truthy Values\r\n    const [ItemTableLookupOpen, setItemTableLookupOpen] = useState(false);\r\n    const [UomTableLookupOpen, setUomTableLookupOpen] = useState(false);\r\n    const [StageTableLookupOpen, setStageTableLookupOpen] = useState(false);\r\n    // const [disableUomLookUp, setDisableUomLookUp] = useState(true);\r\n\r\n    // States for Register\r\n    const [payload, Setpayload] = useState(null);\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [recID, setRecID] = useState(0);\r\n\r\n    const [filter, setFilter] = useState(false);\r\n\r\n    const [Header, setHeader] = useState({\r\n        TransDate: new Date(),\r\n        TransNo: '',\r\n        TransType: 'PCK',\r\n        MOTransNo: '',\r\n        ItemCode: '',\r\n        Item: '',\r\n        MOID: '',\r\n        UOMCode: '',\r\n        UOM: '',\r\n        UnitQuantity: '',\r\n        BaseQuantity: '',\r\n        RoutingCode: '',\r\n        RoutingName: '',\r\n        LocationCode: '',\r\n        Location: '',\r\n        StageCode: '',\r\n        StageName: '',\r\n        MachineName: '',\r\n        MachineCode: '',\r\n        StartTime: '00:00',\r\n        EndTime: '00:00',\r\n        TotalHours: '00:00',\r\n        UnitStarted: '',\r\n        UnitsProduced: '',\r\n        RequireQC: false,\r\n        Completed: false\r\n    });\r\n\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                title: 'ItemCode',\r\n                field: 'CItemCode',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData, i) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.CItemCode}\r\n                        onClick={() => {\r\n                            setItemTableLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={ItemTableLookupOpen}\r\n                        rows={[]}\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'Item',\r\n                field: 'CItemName',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData, i) => <p>{rowData.CItemName}</p>\r\n            },\r\n\r\n            {\r\n                title: 'UOM',\r\n                field: 'UOMCode',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.UOMCode}\r\n                        onClick={() => {\r\n                            setUomTableLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={false}\r\n                        rows={[]}\r\n                    />\r\n                    // <DropDown\r\n                    //     value={Header.BillStatus}\r\n                    //     label=\"BOM Status*\"\r\n                    //     disabled={property.viewList}\r\n                    //     list={statusList}\r\n                    // />\r\n                )\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                field: 'Quantity',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData) => (\r\n                    <InputNumber\r\n                        placeholder=\"0.00\"\r\n                        symbolIcon=\"\"\r\n                        thousandSeparator\r\n                        disabled={false}\r\n                        value={rowData.Quantity === 1 ? '' : rowData.Quantity}\r\n                        Change={(e) =>\r\n                            updateTableData(Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')), rowData, 'Quantity')\r\n                        }\r\n                    />\r\n\r\n                    // <NumberFormat\r\n                    //     textAlign='right'\r\n                    //     InputLabelProps={{ shrink: true, }}\r\n                    //     placeholder='0.00'\r\n                    //     style={{ border: '0px solid' }}\r\n                    //     customInput={TextField}\r\n                    //     disabled={property.viewList}\r\n                    //     thousandSeparator\r\n                    //     decimalScale={2}\r\n                    //     fixedDecimalScale={2}\r\n                    //     value={rowData.Quantity === 1 ? \"\" : rowData.Quantity}\r\n                    //     onChange={e => updateTableData(Number((e.target.value.replace(/,/gi, \"\").split(rowData.Symbol).join(\"\"))), rowData, \"Quantity\")}\r\n                    //     fullWidth\r\n                    // />\r\n                )\r\n            },\r\n\r\n            {\r\n                title: 'Stage',\r\n                field: 'StageName',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.StageName}\r\n                        onClick={() => {\r\n                            setStageTableLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={StageTableLookupOpen}\r\n                        rows={[]}\r\n                    />\r\n                )\r\n            }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    const [property, setProperty] = useState({\r\n        registerNotOpen: false,\r\n        newList: false,\r\n        viewList: false,\r\n        editList: false\r\n    });\r\n\r\n    const [itemLookUpList, setItemLookUpList] = useState({ rows: [], columns: [] });\r\n\r\n    const [MONumberLookupList, setMONumberLookupList] = useState({\r\n        columns: [],\r\n        rows: []\r\n    });\r\n    const [uomListForTable, setUomListForTable] = useState({});\r\n\r\n    const [stageLookupList, setStageLookupList] = useState({\r\n        columns: [],\r\n        rows: []\r\n    });\r\n\r\n    const [MachineLookupList, setMachineLookupList] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Machine Code',\r\n                field: 'MachineCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'Machine Name',\r\n                field: 'MachineName',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            }\r\n        ],\r\n        rows: [\r\n            { MachineCode: '001', MachineName: 'Sweing Machine' },\r\n            { MachineCode: '002', MachineName: 'Washing Machine' },\r\n            { MachineCode: '003', MachineName: 'Dry Machine' }\r\n        ]\r\n    });\r\n\r\n    const [locationLookupList, setLocationLookupList] = useState({ columns: [], rows: [] });\r\n\r\n    useEffect(() => {\r\n        // dispatch(getInventoryLookupData(`FormName=${'Locations'}`));\r\n        // dispatch(getLookupData(`FormName=ActiveMO`));\r\n    }, []);\r\n\r\n    const clearAll = () => {\r\n        setHeader({\r\n            ...Header,\r\n            TransDate: new Date(),\r\n            TransNo: '',\r\n            TransType: 'PCK',\r\n            ItemCode: '',\r\n            Item: '',\r\n            UOMCode: '',\r\n            UOM: '',\r\n            UnitQuantity: 0,\r\n            Quantity: 0,\r\n            BaseQuantity: 0,\r\n            StartTime: '00:00',\r\n            EndTime: '00:00',\r\n            TotalHours: 0,\r\n            UnitStarted: 0,\r\n            UnitsProduced: 0,\r\n            RequireQC: 0\r\n        });\r\n    };\r\n\r\n    const getItemCodeLookUp = () => {\r\n        dispatch(getInventoryLookupData1(`FormName=${'Items'}`));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (lookupRes.error) {\r\n            // setGrowlSetting('error', lookupRes.error.message)\r\n            dispatch(nullLookup());\r\n        }\r\n        if (lookupRes.lookupData) {\r\n            if (lookupRes.lookupData.Success === true) {\r\n                setMONumberLookupList(lookupRes.lookupData.Message.MO);\r\n                // setRoutingLookUpList(lookupRes.lookupData.Message.Routing)\r\n            } else {\r\n                // setGrowlSetting('error', 'Failed  to get BOM LookUps !')\r\n            }\r\n            dispatch(nullLookup1());\r\n        }\r\n        if (lookupRes.lookupData2) {\r\n            if (lookupRes.lookupData2.Success === true) {\r\n                setStageLookupList(lookupRes.lookupData2.Message.RoutingStages);\r\n            } else {\r\n                // setGrowlSetting('error', 'Failed  to get Stages !')\r\n            }\r\n            dispatch(nullLookup2());\r\n        }\r\n        if (lookupRes.lookupData3) {\r\n            if (lookupRes.lookupData3.Success === true) {\r\n                newRowsArr = lookupRes.lookupData3.Message.MOStages; //For  Refrencin Array\r\n                SetItemTable((prevState) => ({\r\n                    ...prevState,\r\n                    rows: lookupRes.lookupData3.Message.MOStages\r\n                }));\r\n            } else {\r\n                // setGrowlSetting('error', 'Failed  to get BOM Detail !')\r\n            }\r\n            dispatch(nullLookup3());\r\n        }\r\n        if (lookupRes.lookupDataInventory) {\r\n            if (lookupRes.lookupDataInventory.Success === true) {\r\n                setLocationLookupList(lookupRes.lookupDataInventory.Message.Location);\r\n                // setItemLookUpList(lookupRes.lookupDataInventory.Message.Item)\r\n            } else {\r\n                // setGrowlSetting('error', 'Failed  to get Items !')\r\n            }\r\n            dispatch(nullLookupInventory());\r\n        }\r\n        if (lookupRes.lookupDataInventory1) {\r\n            if (lookupRes.lookupDataInventory1.Success === true) {\r\n                setItemLookUpList(lookupRes.lookupDataInventory1.Message.Item);\r\n                // setUomLookUpList(lookupRes.lookupDataInventory1.Message.ItemUOM)\r\n            } else {\r\n                // setGrowlSetting('error', 'Failed  to get UOMs !')\r\n            }\r\n            dispatch(nullLookupInventory1());\r\n        }\r\n        if (lookupRes.lookupDataInventory2) {\r\n            if (lookupRes.lookupDataInventory2.Success === true) {\r\n                setUomListForTable(lookupRes.lookupDataInventory2.Message.ItemUOM);\r\n            } else {\r\n                // setGrowlSetting('error', 'Failed  to get UOMs For Table !')\r\n            }\r\n            dispatch(nullLookupInventory2());\r\n        }\r\n    }, [lookupRes]);\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes.createOrUpdateData) {\r\n            if (AllActionsRes.createOrUpdateData.Success === true) {\r\n                // setGrowlSetting('success', AllActionsRes?.createOrUpdateData?.Message, false)\r\n                setProperty((prevState) => ({\r\n                    ...prevState,\r\n                    open: true,\r\n                    severity: 'success',\r\n                    msg: AllActionsRes.createOrUpdateData.Message,\r\n                    registerNotOpen: false\r\n                }));\r\n            } else {\r\n                // setGrowlSetting('error', AllActionsRes?.createOrUpdateData?.Message, true)\r\n                setProperty((prevState) => ({\r\n                    ...prevState,\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: AllActionsRes.createOrUpdateData.Message,\r\n                    registerNotOpen: true\r\n                }));\r\n            }\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes.singleList.Message.Header);\r\n                SetItemTable((prevState) => ({\r\n                    ...prevState,\r\n                    rows: AllActionsRes.singleList.Message.Detail\r\n                }));\r\n                newRowsArr = AllActionsRes.singleList.Message.Detail; //For  Refrencin Array\r\n\r\n                // setGrowlSetting('success', AllActionsRes?.createOrUpdateData?.Message, false)\r\n            } else {\r\n                setProperty((prevState) => ({\r\n                    ...prevState,\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: AllActionsRes.singleList.Message,\r\n                    registerNotOpen: true\r\n                }));\r\n                // setGrowlSetting('error', AllActionsRes?.createOrUpdateData?.Message, true)\r\n            }\r\n            dispatch(nullList());\r\n        }\r\n    }, [AllActionsRes]);\r\n\r\n    const AddRow = () => {\r\n        let arr = [...ItemTable.rows];\r\n        let Item = {\r\n            CItemCode: '',\r\n            CItemName: '',\r\n            UOMCode: '',\r\n            CStatus: 0,\r\n            UOM: '',\r\n            UnitQuantity: 1,\r\n            Quantity: 1,\r\n            BaseQuantity: 1,\r\n            StageCode: '',\r\n            StageName: '',\r\n            MachineName: '',\r\n            MachineCode: '',\r\n            StageSeq: ''\r\n            // MachineName: \"\",\r\n            // MachineCode: \"\",\r\n            // LaborPerUnit: \"\",\r\n            // OutputPerUnit: \"\",\r\n            // PowerPerUnit: \"\",\r\n        };\r\n\r\n        arr.push({ ...Item });\r\n        newRowsArr = arr;\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n    };\r\n\r\n    const onClickDelete = (rowData) => {\r\n        // let arr = ItemTable.rows\r\n        let arr = [...ItemTable.rows];\r\n        let index = arr.indexOf(rowData);\r\n        arr.splice(index, 1);\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n    };\r\n\r\n    const handleClose = () => { };\r\n\r\n    const handleSave = () => {\r\n        if (checkFields()) {\r\n            let payload = {\r\n                FormName: FormName,\r\n                Header,\r\n                Detail: ItemTable.rows\r\n            };\r\n            dispatch(createOrUpdate(payload));\r\n            console.log({ payload });\r\n        }\r\n    };\r\n\r\n    const fetchApiCalls = () => {\r\n        dispatch(getInventoryLookupData(`FormName=${'Locations'}`));\r\n        dispatch(getLookupData(`FormName=ActiveMO`));\r\n    };\r\n\r\n    const addData = (data) => {\r\n        getItemCodeLookUp();\r\n        fetchApiCalls();\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true,\r\n            newList: true,\r\n            editList: false,\r\n            viewList: false\r\n        }));\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            TransDate: new Date(),\r\n            TransNo: '',\r\n            TransType: 'PCK',\r\n            MOTransNo: '',\r\n            ItemCode: '',\r\n            Item: '',\r\n            MOID: '',\r\n            UOMCode: '',\r\n            UOM: '',\r\n            UnitQuantity: '',\r\n            BaseQuantity: '',\r\n            RoutingCode: '',\r\n            RoutingName: '',\r\n            LocationCode: '',\r\n            Location: '',\r\n            StageCode: '',\r\n            StageName: '',\r\n            MachineName: '',\r\n            MachineCode: '',\r\n            StartTime: '00:00',\r\n            EndTime: '00:00',\r\n            TotalHours: '00:00',\r\n            UnitStarted: '',\r\n            UnitsProduced: '',\r\n            RequireQC: false\r\n        }));\r\n        SetItemTable((prevState) => ({\r\n            ...prevState,\r\n            rows: []\r\n        }));\r\n    };\r\n\r\n    const editData = (rowData) => {\r\n        getItemCodeLookUp();\r\n        fetchApiCalls();\r\n        getUomData(rowData.ItemCode);\r\n        getStagesData(rowData.RoutingCode);\r\n        getSingleRec(rowData);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            viewList: false,\r\n            newList: false,\r\n            editList: true,\r\n            registerNotOpen: true\r\n        }));\r\n    };\r\n\r\n    const getSingleRec = (rowData) => {\r\n        let payload = `FormName=${FormName}&TransNo=${rowData.TransNo}`\r\n        dispatch(getSingleList(payload));\r\n    };\r\n\r\n    const getStagesData = (RoutingCode) => {\r\n        dispatch(getLookup2Data(`FormName=${'RoutingStages'}&RoutingCode=${RoutingCode}`));\r\n    };\r\n\r\n    const viewData = (rowData) => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: true,\r\n            viewList: true,\r\n            editList: false,\r\n            newList: false\r\n        }));\r\n        getSingleRec(rowData);\r\n        setisDisable(true);\r\n    };\r\n\r\n    const SetRowDataID = (data) => {\r\n        setRowMachineCode(data.ShiftHead);\r\n    };\r\n\r\n    const getUomData = (ItemCode) => {\r\n        dispatch(getInventoryLookupData2(`FormName=${'ItemUOM'}&ItemCode=${ItemCode}`));\r\n    };\r\n\r\n    const checkFields = () => {\r\n        if (Header.Location === '' || Header.Location === undefined || Header.Location === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Location Code is Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.MOTransNo === '' || Header.MOTransNo === undefined || Header.MOTransNo === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'MO Number is Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.Item === 0 || Header.Item === undefined || Header.Item === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Item Name is Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.UOM === '' || Header.UOM === undefined || Header.UOM === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'UOM is Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        }\r\n        // else if (Header.RoutingName === '' || Header.RoutingName === undefined || Header.RoutingName === null) {\r\n\r\n        //     setProperty({\r\n        //         open: true,\r\n        //         severity: \"error\",\r\n        //         msg: \"Routing Name is Empty! \",\r\n        //     })\r\n\r\n        //     return false;\r\n        // }\r\n        else if (Header.StageName === '' || Header.StageName === undefined || Header.StageName === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Stage Name is Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.MachineName === '' || Header.MachineName === undefined || Header.MachineName === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Machine Name is Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.UnitStarted === '' || Header.UnitStarted === undefined || Header.UnitStarted === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Start Units  are Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.UnitsProduced === '' || Header.UnitsProduced === undefined || Header.UnitsProduced === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Produced Units  are Empty! ',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        }\r\n        //\r\n        else if (areRowsCompletelyFilled().length > 0) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Please Completely fill Rows! '\r\n            });\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const areRowsCompletelyFilled = () => {\r\n        let flag = 0;\r\n        flag = ItemTable.rows.filter((item, i) => {\r\n            return item.StageCode === '' || item.CItemCode === '' || item.UOM === '' || item.Quantity === '' || item.StageName === '';\r\n        });\r\n        return flag;\r\n    };\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const changeLookupVal = (property, value) => {\r\n        lookupTxtField = value;\r\n        lookupSelectRow = false;\r\n        Header[property] = value;\r\n        setHeader({ ...Header });\r\n    };\r\n\r\n    const setLookUpData = (e, rowData, Lookupname) => {\r\n        let value = e.target.value;\r\n        if (Lookupname == 'Location') {\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                Location: rowData.Location,\r\n                LocationCode: rowData.LocationCode\r\n            }));\r\n\r\n            setIsLocationLookUp(false);\r\n        }\r\n        if (Lookupname == 'MONumber') {\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                Item: rowData.Item,\r\n                ItemCode: rowData.ItemCode,\r\n                MOID: rowData.MOID,\r\n                MOStatus: rowData.MOStatus,\r\n                RoutingName: rowData.RoutingName,\r\n                RoutingCode: rowData.RoutingCode,\r\n                MOTransNo: rowData.TransNo,\r\n                UOM: rowData.UOM,\r\n                UOMCode: rowData.UOMCode,\r\n                Quantity: rowData.Quantity,\r\n                UnitQuantity: rowData.UnitQuantity,\r\n                BaseQuantity: rowData.BaseQuantity,\r\n                // MachineCode: rowData.MachineCode,\r\n                // MachineName: rowData.MachineName,\r\n                Quantity: rowData.Quantity\r\n            }));\r\n\r\n            dispatch(getLookup2Data(`FormName=${'RoutingStages'}&RoutingCode=${rowData.RoutingCode}`));\r\n            setIsMoNumberLookUp(false);\r\n        }\r\n        if (Lookupname == 'Stage') {\r\n            setHeader({\r\n                ...Header,\r\n                StageName: rowData.StageName,\r\n                StageCode: rowData.StageCode,\r\n                MachineName: rowData.MachineName,\r\n                MachineCode: rowData.MachineCode\r\n            });\r\n            dispatch(getLookup3Data(`FormName=${'MOStages'}&MOID=${Header.MOID}&StageCode=${rowData.StageCode}`));\r\n            setIsStageLookUp(false);\r\n        }\r\n        if (Lookupname == 'Machine') {\r\n            setHeader({\r\n                ...Header,\r\n                MachineName: rowData.MachineName,\r\n                MachineCode: rowData.MachineCode\r\n            });\r\n            setIsMachineLookUp(false);\r\n        }\r\n        if (Lookupname === 'ItemLookUp') {\r\n            let arr = newRowsArr;\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['CItemCode'] = rowData.ItemCode;\r\n            arr[index]['CItemName'] = rowData.Item;\r\n            console.log({ rowData });\r\n            getUomData(rowData.ItemCode);\r\n            setItemTableLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n        if (Lookupname === 'UOMLookUp') {\r\n            let arr = newRowsArr;\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['UOMCode'] = rowData.UOMCode;\r\n            arr[index]['UOM'] = rowData.UOMCode;\r\n            arr[index]['UnitQuantity'] = rowData.UnitQuantity;\r\n\r\n            setUomTableLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n\r\n        if (Lookupname === 'StageLookUp') {\r\n            let arr = newRowsArr;\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['StageCode'] = rowData.StageCode;\r\n            arr[index]['StageName'] = rowData.StageName;\r\n            arr[index]['MachineName'] = rowData.MachineName;\r\n            arr[index]['MachineCode'] = rowData.MachineCode;\r\n            arr[index]['StageSeq'] = rowData.StageSeq;\r\n            // arr[index]['LaborPerUnit'] = rowData.LaborPerUnit\r\n            // arr[index]['OutputPerUnit'] = rowData.OutputPerUnit\r\n            // arr[index]['PowerPerUnit'] = rowData.PowerPerUnit\r\n\r\n            setStageTableLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n    };\r\n\r\n    const updateTableData = (e, rowData, prop) => {\r\n        let arr = newRowsArr;\r\n        let index = arr.indexOf(rowData);\r\n        arr[index][prop] = e;\r\n\r\n        let BaseQuantity = arr[index]['UnitQuantity'] * arr[index]['Quantity']; // Calculate Base Quantity\r\n        arr[index]['BaseQuantity'] = BaseQuantity;\r\n\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n        newRowsArr = arr;\r\n    };\r\n\r\n    const calculateHours = () => {\r\n        console.log(Header.StartTime);\r\n        if (Header.StartTime != '' && Header.EndTime != '') {\r\n            // let startTime = moment.duration(Header.StartTime);\r\n            // let endTime = moment.duration(Header.EndTime);\r\n            // let startHours = startTime.hours()\r\n            // let endHours = endTime.hours()\r\n            // let startMins = startTime.minutes()\r\n            // let endMins = endTime.minutes()\r\n            // let startFin = new Date().setHours(startHours, startMins)s\r\n            // let endFin = new Date().setHours(endHours, endMins)\r\n            // var ms = moment(endFin).diff(moment(startFin));\r\n            // ms = moment(ms).format(\"hh:mm\")\r\n            // console.log({ ms })\r\n            // setHeader((prevState) => ({\r\n            //   ...prevState,\r\n            //   TotalHours: diff\r\n            // }))\r\n        }\r\n    };\r\n\r\n    const goback = () => {\r\n        setProperty((prevState) => ({ ...prevState, registerNotOpen: false }));\r\n    };\r\n\r\n    // console.log(Header.StartTime);\r\n    // console.log(Header.EndTime);\r\n\r\n    useEffect(() => {\r\n        console.log('jaasa ');\r\n        var Start = Header.StartTime;\r\n        var End = Header.EndTime;\r\n        let isNegativeHours;\r\n        let isNegativeMinutes;\r\n\r\n        var diff = moment(End, 'HH:mm').diff(moment(Start, 'HH:mm'));\r\n        var diffMOment = moment.duration(diff);\r\n        let Hours = diffMOment.hours();\r\n        let minutes = diffMOment.minutes();\r\n        console.log({ Hours });\r\n        console.log({ minutes });\r\n\r\n        isNegativeHours = Math.sign(parseFloat(Hours));\r\n        isNegativeMinutes = Math.sign(parseFloat(minutes));\r\n\r\n        if (isNegativeHours === -1) {\r\n            Hours = Hours + 24;\r\n        }\r\n        if (isNegativeMinutes === -1) {\r\n            minutes = minutes + 60;\r\n        }\r\n\r\n        if (Hours < 10) {\r\n            Hours = `0${Hours}`;\r\n        }\r\n\r\n        if (minutes < 10) {\r\n            minutes = `0${minutes}`;\r\n        }\r\n\r\n        setHeader({\r\n            ...Header,\r\n            TotalHours: `${Hours}:${minutes}`\r\n        });\r\n        // var FormattedDiff = diffMOment.format(\"hh:mm:ss\");\r\n        // console.log('diffMOment',diffMOment);\r\n        // console.log('Difference',`${Hours}:${minutes}`);\r\n    }, [Header.StartTime, Header.EndTime]);\r\n\r\n    return (\r\n        <>\r\n            {property.registerNotOpen === true ? (\r\n                <>\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12}>\r\n                            <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <MainCard>\r\n                                <ElevationScroll>\r\n                                    <CardActions>\r\n                                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                            <Grid item>\r\n                                                <GlobalHeader\r\n                                                    goBack={() => goback()}\r\n                                                    clearAll_OnClick={() => clearAll()}\r\n                                                    clearAll={property.newList}\r\n                                                    saveAndClose={property.viewList}\r\n                                                    saveAndClose_OnClick={() => {\r\n                                                        saveAndClose();\r\n                                                    }}\r\n                                                    FormID={1}\r\n                                                    submitButton={property.viewList}\r\n                                                    SaveButton={property.viewList}\r\n                                                    Button2={!property.newList}\r\n                                                    submit={!property.viewList}\r\n                                                    SaveButton_OnClick={() => handleSave()}\r\n                                                    submitButton_OnClick={() => postAndSave()}\r\n                                                    Button2_OnClick={() => printVoucher()}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                </ElevationScroll>\r\n                                <Divider />\r\n                                <CardContent>\r\n                                    <Grid container justify=\"center\">\r\n                                        <Grid item xs={7}>\r\n                                            <Grid container spacing={2} justify=\"center\">\r\n                                                <Grid item xs={4}>\r\n                                                    <InputText value={Header.TransNo} id=\"TransNo\" disabled={true} label=\"Pick Number\" />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <InputDate\r\n                                                        id=\"PickDate\"\r\n                                                        label=\"Pick Date*\"\r\n                                                        value={Header.TransDate}\r\n                                                        Change={(date) => setHeader({ ...Header, TransDate: date })}\r\n                                                        disabled={property.viewList}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <DropDownLookup\r\n                                                        disabled={property.viewList}\r\n                                                        label=\"Location*\"\r\n                                                        reference={'Location'}\r\n                                                        onClick={() => setIsLocationLookUp(true)}\r\n                                                        lookupOpen={isLocationLookUp}\r\n                                                        columns={locationLookupList.columns}\r\n                                                        rows={filter ? searchedRows : locationLookupList.rows}\r\n                                                        onBlurDiv={() => setIsLocationLookUp(false)}\r\n                                                        onFocus={() => setSelected(false)}\r\n                                                        onBlur={(e) => {\r\n                                                            setTimeout(() => {\r\n                                                                setFilter(false);\r\n                                                                validateLookup(\r\n                                                                    {\r\n                                                                        setProperty,\r\n                                                                        property,\r\n                                                                        Header,\r\n                                                                        setHeader,\r\n                                                                        selectLookupVal,\r\n                                                                        lookupSelectRow\r\n                                                                    },\r\n                                                                    lookupTxtField,\r\n                                                                    locationLookupList.rows,\r\n                                                                    ['LocationCode', 'Location'],\r\n                                                                    ['Code', 'Description'],\r\n                                                                    'Location Code'\r\n                                                                );\r\n                                                                setIsLocationLookUp(false);\r\n                                                            }, 200);\r\n                                                        }}\r\n                                                        changeLookupVal={changeLookupVal}\r\n                                                        propertyName=\"Location\"\r\n                                                        listForSearch={locationLookupList?.rows}\r\n                                                        setSearchRowProp={(searchResult) => {\r\n                                                            setSearchRows(searchResult);\r\n                                                        }}\r\n                                                        setFilterProp={(filter) => setFilter(filter)}\r\n                                                        setLookupEnable={() =>\r\n                                                            setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))\r\n                                                        }\r\n                                                        value={Header.Location}\r\n                                                        lookupValuesList={['LocationCode', 'Location']}\r\n                                                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Location')}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <DropDownLookup\r\n                                                        label=\"MO Number*\"\r\n                                                        reference={'MO Number'}\r\n                                                        onClick={() => setIsMoNumberLookUp(true)}\r\n                                                        lookupOpen={isMoNumberLookUp}\r\n                                                        disabled={property.viewList}\r\n                                                        columns={MONumberLookupList.columns}\r\n                                                        rows={filter ? searchedRows : MONumberLookupList.rows}\r\n                                                        onBlurDiv={() => setIsMoNumberLookUp(false)}\r\n                                                        onFocus={() => setSelected(false)}\r\n                                                        onBlur={(e) => {\r\n                                                            setTimeout(() => {\r\n                                                                setFilter(false);\r\n                                                                validateLookup(\r\n                                                                    {\r\n                                                                        setProperty,\r\n                                                                        property,\r\n                                                                        Header,\r\n                                                                        setHeader,\r\n                                                                        selectLookupVal,\r\n                                                                        lookupSelectRow\r\n                                                                    },\r\n                                                                    lookupTxtField,\r\n                                                                    MONumberLookupList.rows,\r\n                                                                    ['Mo Number', 'Mo, Date, Item Code'],\r\n                                                                    ['Code', 'Description, Item'],\r\n                                                                    'MO Number'\r\n                                                                );\r\n                                                                setIsMoNumberLookUp(false);\r\n                                                            }, 200);\r\n                                                        }}\r\n                                                        changeLookupVal={changeLookupVal}\r\n                                                        propertyName=\"MOTransNo\"\r\n                                                        listForSearch={MONumberLookupList?.rows}\r\n                                                        setSearchRowProp={(searchResult) => {\r\n                                                            setSearchRows(searchResult);\r\n                                                        }}\r\n                                                        setFilterProp={(filter) => setFilter(filter)}\r\n                                                        setLookupEnable={() =>\r\n                                                            setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))\r\n                                                        }\r\n                                                        value={Header.MOTransNo}\r\n                                                        lookupValuesList={['MO Mumber', 'MO Date', 'Item Code']}\r\n                                                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'MONumber')}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <InputText value={Header.Item} disabled={true} label=\"Item Name\" />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <InputText\r\n                                                        label=\"UOM\"\r\n                                                        value={Header.UOM}\r\n                                                        Change={(e) => setHeader({ ...Header, UOM: e.target.value })}\r\n                                                        disabled={true}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <InputText label=\"Routing\" value={Header.RoutingName} disabled={true} />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <InputNumber\r\n                                                        label={'MO Quantity'}\r\n                                                        value={Header.Quantity}\r\n                                                        symbol={false}\r\n                                                        Change={(e) => setHeader({ ...Header, Quantity: e.target.value })}\r\n                                                        disabled={true}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <DropDownLookup\r\n                                                        disabled={property.viewList}\r\n                                                        label=\"Stage*\"\r\n                                                        reference={'stage'}\r\n                                                        onClick={() => setIsStageLookUp(true)}\r\n                                                        lookupOpen={isStageLookUp}\r\n                                                        columns={stageLookupList.columns}\r\n                                                        rows={filter ? searchedRows : stageLookupList.rows}\r\n                                                        onBlurDiv={() => setIsStageLookUp(false)}\r\n                                                        onFocus={() => setSelected(false)}\r\n                                                        onBlur={(e) => {\r\n                                                            setTimeout(() => {\r\n                                                                setFilter(false);\r\n                                                                validateLookup(\r\n                                                                    {\r\n                                                                        setProperty,\r\n                                                                        property,\r\n                                                                        Header,\r\n                                                                        setHeader,\r\n                                                                        selectLookupVal,\r\n                                                                        lookupSelectRow\r\n                                                                    },\r\n                                                                    lookupTxtField,\r\n                                                                    stageLookupList.rows,\r\n                                                                    ['StageCode', 'StageName'],\r\n                                                                    ['Code', 'Description'],\r\n                                                                    'Stage'\r\n                                                                );\r\n                                                                setIsStageLookUp(false);\r\n                                                            }, 200);\r\n                                                        }}\r\n                                                        changeLookupVal={changeLookupVal}\r\n                                                        propertyName=\"StageName\"\r\n                                                        listForSearch={stageLookupList?.rows}\r\n                                                        setSearchRowProp={(searchResult) => {\r\n                                                            setSearchRows(searchResult);\r\n                                                        }}\r\n                                                        setFilterProp={(filter) => setFilter(filter)}\r\n                                                        setLookupEnable={() =>\r\n                                                            setProperty((prevState) => ({ ...prevState, StageCodeLookUp: true }))\r\n                                                        }\r\n                                                        value={Header.StageName}\r\n                                                        lookupValuesList={['Stage Code', 'StageName']}\r\n                                                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Stage')}\r\n                                                    />\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={4}>\r\n                                                    <InputText\r\n                                                        label=\"Machine\"\r\n                                                        value={Header.MachineName}\r\n                                                        // Change={(e) => setHeader({ ...Header, UOM: e.target.value })}\r\n                                                        disabled={true}\r\n                                                    />\r\n                                                    {/* <DropDownLookup\r\n                                                        disabled={property.viewList}\r\n                                                        label=\"Machine*\"\r\n                                                        reference={'Machine'}\r\n                                                        onClick={() => setIsMachineLookUp(true)}\r\n                                                        lookupOpen={isMachineLookUp}\r\n                                                        columns={MachineLookupList.columns}\r\n                                                        rows={MachineLookupList?.rows}\r\n                                                        onBlurDiv={() => setIsMachineLookUp(false)}\r\n                                                        onFocus={() => setSelected(false)}\r\n                                                        onBlur={(e) => {\r\n                                                            setTimeout(() => {\r\n                                                                setFilter(false);\r\n                                                                validateLookup(\r\n                                                                    {\r\n                                                                        setProperty,\r\n                                                                        property,\r\n                                                                        Header,\r\n                                                                        setHeader,\r\n                                                                        selectLookupVal,\r\n                                                                        lookupSelectRow\r\n                                                                    },\r\n                                                                    lookupTxtField,\r\n                                                                    MachineLookupList.rows,\r\n                                                                    ['MachineCode', 'MachineName'],\r\n                                                                    ['Code', 'Description'],\r\n                                                                    'Machine Code'\r\n                                                                );\r\n                                                                setIsMachineLookUp(false);\r\n                                                            }, 200);\r\n                                                        }}\r\n                                                        changeLookupVal={changeLookupVal}\r\n                                                        propertyName=\"MachineName\"\r\n                                                        listForSearch={MachineLookupList?.rows}\r\n                                                        setSearchRowProp={(searchResult) => {\r\n                                                            setSearchRows(searchResult);\r\n                                                        }}\r\n                                                        // rows={filter ? searchedRows : bomCode.rows}\r\n                                                        setFilterProp={(filter) => setFilter(filter)}\r\n                                                        setLookupEnable={() =>\r\n                                                            setProperty((prevState) => ({ ...prevState, StageCodeLookUp: true }))\r\n                                                        }\r\n                                                        value={Header.MachineName}\r\n                                                        lookupValuesList={['Machine Code', 'Machine Name']}\r\n                                                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Machine')}\r\n<<<<<<< HEAD\r\n                                                    /> */}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2}>\r\n                                                    {/* <CheckboxButton\r\n                                                        label={'Completed'}\r\n                                                        checked={Header.Completed}\r\n                                                        Change={(e) => setHeader({ ...Header, Completed: e.target.checked })}\r\n                                                        disabled={property.viewList}\r\n                                                    /> */}\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={2}></Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={1}></Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <SubCard\r\n                                                sx={{\r\n                                                    mx: 0,\r\n                                                    mb: 0,\r\n                                                    bgcolor:\r\n                                                        theme.palette.mode === 'dark'\r\n                                                            ? theme.palette.dark.main\r\n                                                            : theme.palette.primary.light\r\n                                                }}\r\n                                            >\r\n                                                <Grid container spacing={2} justify=\"center\" style={{ paddingBottom: 10 }}>\r\n                                                    <Grid item xs={6}>\r\n                                                        <InputTime\r\n                                                            label=\"Start Time\"\r\n                                                            width={120}\r\n                                                            value={Header.StartTime}\r\n                                                            disabled={isDisable}\r\n                                                            Change={(e) => setHeader({ ...Header, StartTime: e.target.value })}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={6}>\r\n                                                        <InputTime\r\n                                                            label=\"End Time\"\r\n                                                            width={120}\r\n                                                            value={Header.EndTime}\r\n                                                            disabled={isDisable}\r\n                                                            Change={(e) => setHeader({ ...Header, EndTime: e.target.value })}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <InputText\r\n                                                            label=\"Total Hours\"\r\n                                                            value={Header.TotalHours}\r\n                                                            symbol={false}\r\n                                                            disabled={true}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    {/* <Grid item xs={6}>\r\n                                                        <CheckboxButton label={'Require QC'} value={Header.RequireQC}\r\n                                                            symbol={false} disabled={true} />\r\n                                                        \r\n                                                    </Grid> */}\r\n\r\n                                                    <Grid item xs={6}>\r\n                                                        <InputNumber\r\n                                                            label=\"Units Started\"\r\n                                                            value={Header.UnitStarted}\r\n                                                            Change={(e) => {\r\n                                                                setHeader((prevState) => ({ ...prevState, UnitStarted: e.target.value }));\r\n                                                            }}\r\n                                                            symbol={false}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item xs={6}>\r\n                                                        <InputNumber\r\n                                                            label=\"Units Produced\"\r\n                                                            Change={(e) => {\r\n                                                                setHeader((prevState) => ({ ...prevState, UnitsProduced: e.target.value }));\r\n                                                            }}\r\n                                                            value={Header.UnitsProduced}\r\n                                                            symbol={false}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </SubCard>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </MainCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <MaterialTable\r\n                        style={{ padding: '10px' }}\r\n                        title={\r\n                            <div>\r\n                                <Button variant=\"text\" onClick={() => AddRow()}>\r\n                                    + Add Item\r\n                                </Button>\r\n                            </div>\r\n                        }\r\n                        columns={ItemTable.columns}\r\n                        data={ItemTable.rows}\r\n                        // data={array}\r\n                        options={{\r\n                            showTitle: property.viewList === true ? false : true,\r\n                            paging: false,\r\n                            actionsColumnIndex: -1,\r\n                            pageSize: 5,\r\n                            pageSizeOptions: [5, 10, 20, 30],\r\n                            search: false,\r\n                            loadingType: 'linear',\r\n                            headerStyle: {\r\n                                fontWeight: 'bold',\r\n                                paddingLeft: '10px',\r\n                                paddingRight: '0px',\r\n                                paddingTop: '0px',\r\n                                paddingBottom: '0px',\r\n                                textAlign: 'left'\r\n                            },\r\n                            actionsCellStyle: {\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                width: 20\r\n                            }\r\n                        }}\r\n                        actions={[\r\n                            (rowData) => ({\r\n                                icon: () => <DeleteOutline sx={{ color: red[500] }} style={{ height: '1em', width: '1em' }} />,\r\n                                tooltip: 'Delete',\r\n                                onClick: (event) => {\r\n                                    onClickDelete(event, rowData);\r\n                                }\r\n                            })\r\n                        ]}\r\n                        localization={{\r\n                            body: {\r\n                                emptyDataSourceMessage: 'No records to display',\r\n                                filterRow: {\r\n                                    filterTooltip: 'Filter'\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Register\r\n                        Details={''}\r\n                        FormName={FormName}\r\n                        props={props}\r\n                        dialog={true}\r\n                        AddData={addData}\r\n                        EditData={editData}\r\n                        payload={payload}\r\n                        saveFunction={saveFunction}\r\n                        SetRowDataID={SetRowDataID}\r\n                        setLoadingOnSave={setLoadingOnSave}\r\n                        ID={recID}\r\n                        FormCode={'BOMID'}\r\n                        ViewData={viewData}\r\n                        FormID={FormName}\r\n                        type=\"JV\"\r\n                        postingIcons={false}\r\n                        isEditButton={true}\r\n                    />\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MoIssuance;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useMediaQuery, useScrollTrigger } from '@mui/material';\r\n\r\n// project import\r\nimport { useSelector } from 'store';\r\n\r\n// ==============================|| elevation scroll ||============================== //\r\nfunction ElevationScroll({ children, window }) {\r\n    const theme = useTheme();\r\n    const matchDown = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const { drawerOpen } = useSelector((state) => state.menu);\r\n\r\n    const fullStickyLeft = drawerOpen ? 281 : 42;\r\n\r\n    const responsiveTop = matchDown ? 80 : 83;\r\n    const responsiveRight = matchDown ? 38 : 41;\r\n    const responsiveLeft = matchDown ? 38 : fullStickyLeft;\r\n\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 180,\r\n        target: window || undefined\r\n    });\r\n\r\n    const darkBorder = theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.grey[200];\r\n\r\n    return React.cloneElement(children, {\r\n        style: {\r\n            backgroundColor: theme.palette.background.default,\r\n            zIndex: 1099,\r\n            borderTop: trigger ? '1px solid' : 'none',\r\n            borderBottom: trigger ? '1px solid' : 'none',\r\n            borderColor: trigger ? darkBorder : '',\r\n            position: trigger ? 'fixed' : 'relative',\r\n\r\n            top: trigger ? responsiveTop : 'auto',\r\n            right: trigger ? responsiveRight : 'auto',\r\n            left: trigger ? responsiveLeft : 'auto'\r\n        }\r\n    });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n    children: PropTypes.node,\r\n    window: PropTypes.object\r\n};\r\n\r\nexport default ElevationScroll;\r\n","\r\nexport function validateLookup(stateProps, value, listForSearch, headerValuesList, lookupValuesList, msgProp, callApi, setLookUpData) {\r\n\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            value = value.toLowerCase()\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toString().toLowerCase().indexOf(value) > -1 ||\r\n                    x[lookupValuesList[1]].toString().toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty((prevState) => ({\r\n                        ...prevState,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    }));\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        stateProps.Header[headerValuesList[i]] = \"\"\r\n                        stateProps.setHeader({ ...stateProps.Header })\r\n                    }\r\n                    console.log({ Header: stateProps.Header })\r\n                    // stateProps.setHeader({ ...stateProps.Header })\r\n                }\r\n                else if (filteredVal.length && value) {\r\n                    if (callApi) {\r\n                        switch (msgProp) {\r\n                            case \"Customers\":\r\n                                setLookUpData(null, filteredVal[0], \"Customers\")\r\n                                break;\r\n                            case \"Item\":\r\n                                setLookUpData(null, filteredVal[0], \"Item\")\r\n                                break;\r\n                            case \"Routing\":\r\n                                setLookUpData(null, filteredVal[0], \"Routing\")\r\n                                break;\r\n                            default:\r\n                                setLookUpData(\"donor\", filteredVal[0], headerValuesList, lookupValuesList)\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else {\r\n                        for (var i = 0; i < headerValuesList.length; i++) {\r\n                            stateProps.Header[headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                            stateProps.setHeader({ ...stateProps.Header })\r\n                        }\r\n\r\n                        if (msgProp === 'Bank') {\r\n                            // const dispatch = useDispatch();\r\n                            setLookUpData(filteredVal[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                stateProps.Header[headerValuesList[i]] = \"\";\r\n                stateProps.setHeader({ ...stateProps.Header })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateLookupinJV(stateProps, value, listForSearch, rowData, filterFlag, headerValuesList, lookupValuesList, msgProp) {\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toLowerCase().indexOf(value) > -1 || x[lookupValuesList[1]].toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty({\r\n                        ...stateProps.property,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    });\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                        stateProps.setJV({ ...stateProps.JV })\r\n                    }\r\n                    stateProps.setJV({ ...stateProps.JV })\r\n                }\r\n                else if (filteredVal.length && value && filterFlag === false) {\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                        stateProps.setJV({ ...stateProps.JV });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                let index = stateProps.JV.indexOf(rowData);\r\n                stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                stateProps.setJV({ ...stateProps.JV })\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}