{"version":3,"sources":["views/Manufacturing/Setup/BillOfMaterial/index.js","ui-component/ElevationScroll.js","utilities/validateLookup.js"],"names":["lookupTxtField","statusList","code","value","stockMethodsList","FormName","newRowsArr","lookupSelectRow","BillOfMaterial","props","useState","viewList","open","severity","msg","editList","newList","bomCodeLookUp","registerNotOpen","bomCodeLookUpCopy","property","setProperty","ItemCode","ItemName","BillStatus","EffectiveDate","Date","ObseleteDate","StockMethod","UOMCode","UOM","RoutingCode","RoutingName","UnitQty","Header","setHeader","BOMID","DialogItemCode","CopyBom","setCopyBom","ObseleteBomStatus","setObseleteBomStatus","UomTableLookupOpen","setUomTableLookupOpen","uomLookUp","setUomLookUp","routingLookUp","setRoutingLookUp","ItemTableLookupOpen","setItemTableLookupOpen","StageTableLookupOpen","setStageTableLookupOpen","copyBomDialog","setCopyBomDialog","bomLookUp","setBomLookUp","disableStatusForCopyBom","setDisableStatusForCopyBom","setbomCodeLookUpCopy","disableBOMStatus","setDisableBOMStatus","loadingForRows","isDisable","setisDisable","rows","columns","BomLookUpListCopy","setBomLookUpListCopy","itemLookUpList","setItemLookUpList","uomLookUpList","setUomLookUpList","uomListForTable","setUomListForTable","stageLookUpList","setStageLookUpList","RoutingLookUpList","setRoutingLookUpList","filter","setFilter","searchedRows","setSearchRows","payload","saveFunction","setLoadingOnSave","recID","setRecID","SelectedRowData","SetSelectedRowData","AllActionsRes","useSelector","lookupRes","selectLookupVal","setSelected","dispatch","useDispatch","title","field","cellStyle","width","render","rowData","i","CItemCode","onClick","onBlurDiv","lookupOpen","CItemName","placeholder","symbolIcon","thousandSeparator","disabled","Quantity","Change","e","updateTableData","Number","target","replace","split","Symbol","join","Wastage","StageName","ItemTable","SetItemTable","useEffect","error","setGrowlSetting","message","nullLookup","lookupData","Success","Message","Routing","BOM","nullLookup1","lookupData2","RoutingStages","nullLookup2","lookupData3","BOMDetail","setTableRows","nullLookup3","lookupDataInventory","Item","nullLookupInventory","lookupDataInventory1","ItemUOM","nullLookupInventory1","lookupDataInventory2","nullLookupInventory2","nullList","createOrUpdateData","singleList","prevState","RoutingHead","arrForView","Detail","map","eachItem","apiResponse","undefined","getLookUpData","getLookupData","getItemCodeLookUp","getInventoryLookupData","getUomData","getInventoryLookupData1","getStagesData","getLookup2Data","handleSave","createOrUpdate","console","log","prop","arr","index","indexOf","BaseQuantity","setLookUpData","LookUpName","UntQty","UnitQuantity","getInventoryLookupData2","StageCode","LaborPerUnit","OutputPerUnit","PowerPerUnit","MachineName","MachineCode","StandardHours","StageSeq","setBomStates","setRoutingHeader","row","getSingleRec","payload1","getSingleList","changeLookupVal","handleSnakeBarClose","container","spacing","item","xs","close","alignItems","justifyContent","goBack","clearAll_OnClick","clearAll","copyBomDisabled","saveAndClose","saveAndClose_OnClick","FormID","submitButton","SaveButton","Button2","submit","showCopyBomIcon","SaveButton_OnClick","submitButton_OnClick","postAndSave","Button2_OnClick","printVoucher","copyBom","isView","isBOM","label","reference","onFocus","onBlur","setTimeout","validateLookup","propertyName","listForSearch","setSearchRowProp","searchResult","setFilterProp","setLookupEnable","lookupValuesList","status","bomStatusHandler","list","effectiveDate","id","date","Blur","obseleteDate","style","padding","variant","push","CStatus","disableKeys","AddRow","alignContent","data","options","showTitle","toolbar","paging","actionsColumnIndex","pageSize","pageSizeOptions","search","loadingType","actionsCellStyle","headerStyle","fontWeight","paddingRight","paddingTop","paddingBottom","textAlign","isLoading","actions","icon","sx","color","red","height","tooltip","event","splice","deleteRow","LookUpOpen","large","LookUpHeading","LookupList","LookUpClose","ok","Title","Body","hideDialog","IsOpen","ButtonTitle1","Close","ButtonTitle2","Save","getLookup3Data","Details","ModuleName","dialog","AddData","EditData","isEditButton","SetRowDataID","ID","FormCode","ViewData","type","postingIcons","ElevationScroll","children","window","theme","useTheme","matchDown","useMediaQuery","breakpoints","down","drawerOpen","state","menu","responsiveTop","responsiveRight","responsiveLeft","trigger","useScrollTrigger","disableHysteresis","threshold","darkBorder","palette","mode","dark","grey","React","cloneElement","backgroundColor","background","default","zIndex","borderTop","borderBottom","borderColor","position","top","right","left","stateProps","headerValuesList","msgProp","callApi","toLowerCase","filteredVal","x","toString","length"],"mappings":"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","file":"static/js/14.45c13919.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Icons from 'ui-component/material-icons';\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    Growl,\r\n    Loader,\r\n    InputDate,\r\n    DropDown,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    ReusableDialog,\r\n    PopupLookup\r\n} from 'ui-component/globalcomponents';\r\nimport {\r\n    getLookupData,\r\n    getLookup2Data,\r\n    getLookup3Data,\r\n    nullList,\r\n    insertAll,\r\n    getSingleList,\r\n    nullLookup1,\r\n    nullLookup2,\r\n    nullLookup,\r\n    createOrUpdate,\r\n    getInventoryLookupData,\r\n    nullLookupInventory,\r\n    getInventoryLookupData1,\r\n    getInventoryLookupData2,\r\n    nullLookupInventory1,\r\n    nullLookupInventory2,\r\n    nullLookup3\r\n} from 'store/actions/index';\r\nimport { Grid, Card, Button, TextField, Menu, MenuItem, CardActions, Divider, CardContent } from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport NumberFormat from 'react-number-format';\r\nimport MaterialTable from 'material-table';\r\nimport { BomId } from 'utilities/FormIds'\r\nimport GlobalHeader from 'ui-component/globalcomponents/GlobalHeader/GlobalHeader';\r\nimport ElevationScroll from 'ui-component/ElevationScroll';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport DeleteOutline from '@mui/icons-material/DeleteOutline';\r\nimport { red } from '@mui/material/colors';\r\nimport { validateLookup } from 'utilities/validateLookup'\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n\r\nlet statusList = [\r\n    { code: 'Active', value: 'Active' },\r\n    { code: 'Pending', value: 'Pending' },\r\n    { code: 'Obselete', value: 'Obselete' }\r\n];\r\n\r\nlet stockMethodsList = [\r\n    { code: 'Build if necessary', value: 'Build if necessary' },\r\n    { code: 'Build', value: 'Build' },\r\n    { code: 'Stock', value: 'Stock' }\r\n];\r\n\r\nlet changeLookupVal = '';\r\nlet FormName = 'BOM';\r\nlet ModuleName = 'Manufacturing'\r\nlet newRowsArr = [];\r\nlet lookupSelectRow = false;\r\nlet lookupTxtField;\r\n\r\n\r\nexport default function BillOfMaterial(props) {\r\n    const [property, setProperty] = useState({\r\n        viewList: false,\r\n        open: false,\r\n        severity: '',\r\n        msg: '',\r\n        editList: false,\r\n        newList: false,\r\n        bomCodeLookUp: false,\r\n        registerNotOpen: false,\r\n        bomCodeLookUpCopy: false\r\n    });\r\n\r\n    const [Header, setHeader] = useState({\r\n        ItemCode: '',\r\n        ItemName: '',\r\n        BillStatus: '', // bom Status\r\n        EffectiveDate: new Date(),\r\n        ObseleteDate: new Date(), // will enable jb bill status obs\r\n        StockMethod: '',\r\n        UOMCode: '',\r\n        UOM: '',\r\n        RoutingCode: '',\r\n        RoutingName: '',\r\n        UnitQty: '' // UntQty\r\n    });\r\n\r\n    const [CopyBom, setCopyBom] = useState({\r\n        BOMID: '',\r\n        DialogItemCode: '',\r\n        ItemName: '',\r\n        RoutingCode: '',\r\n        RoutingName: '',\r\n        StockMethod: '',\r\n        UOM: '',\r\n        UOMCode: ''\r\n    });\r\n    // States for Disable Fields\r\n    const [ObseleteBomStatus, setObseleteBomStatus] = useState(false);\r\n    const [disableUomLookUp, setDisableUomLookUp] = useState(true);\r\n    const [UomTableLookupOpen, setUomTableLookupOpen] = useState(false);\r\n    const [isBoMLookUp, setIsBoMLookUp] = useState(false);\r\n    const [uomLookUp, setUomLookUp] = useState(false);\r\n    const [routingLookUp, setRoutingLookUp] = useState(false);\r\n    const [ItemTableLookupOpen, setItemTableLookupOpen] = useState(false);\r\n    const [StageTableLookupOpen, setStageTableLookupOpen] = useState(false);\r\n    const [copyBomDialog, setCopyBomDialog] = useState(false);\r\n    const [bomLookUp, setBomLookUp] = useState(false);\r\n    const [disableStatusForCopyBom, setDisableStatusForCopyBom] = useState(false);\r\n    const [bomCodeLookUpCopy, setbomCodeLookUpCopy] = useState(false);\r\n    const [disableBOMStatus, setDisableBOMStatus] = useState(true);\r\n    const [loadingForRows, setLoadingForRows] = useState(false);\r\n    const [menuOpen, setMenuOpen] = useState('');\r\n    const [menuAnchor, setMenuAnchor] = useState('');\r\n    const [isDisable, setisDisable] = useState(false);\r\n\r\n    //States For LooKups\r\n    const [routingCode, setRoutingCode] = useState({ rows: [], columns: [] });\r\n    const [BomLookUpList, setBomLookUpList] = useState({ rows: [], columns: [] });\r\n    const [BomLookUpListCopy, setBomLookUpListCopy] = useState({ rows: [], columns: [] });\r\n    const [itemLookUpList, setItemLookUpList] = useState({ rows: [], columns: [] });\r\n    const [uomLookUpList, setUomLookUpList] = useState({ rows: [], columns: [] });\r\n    const [uomListForTable, setUomListForTable] = useState({});\r\n    const [stageLookUpList, setStageLookUpList] = useState({ rows: [], columns: [] });\r\n    const [RoutingLookUpList, setRoutingLookUpList] = useState({ columns: [], rows: [] });\r\n\r\n    //  States for Register\r\n    const [filter, setFilter] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [searchedRows, setSearchRows] = useState([]);\r\n    const [payload, Setpayload] = useState(null);\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [recID, setRecID] = useState(0);\r\n    const [SelectedRowData, SetSelectedRowData] = useState({});\r\n    // State For Detail \r\n    const [row, setRow] = useState({})\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n    const lookupRes = useSelector(({ lookupRes }) => lookupRes);\r\n\r\n    // States for dropdownLookUp\r\n    const [selectLookupVal, setSelected] = useState(true)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                title: 'ItemCode',\r\n                field: 'CItemCode',\r\n                cellStyle: {\r\n                    width: '15%'\r\n                },\r\n                render: (rowData, i) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.CItemCode}\r\n                        onClick={() => {\r\n                            setItemTableLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={ItemTableLookupOpen}\r\n                        rows={[]}\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'Item',\r\n                field: 'CItemName',\r\n                cellStyle: {\r\n                    width: '20%'\r\n                },\r\n                render: (rowData, i) => <p>{rowData.CItemName}</p>\r\n            },\r\n\r\n            {\r\n                title: 'UOM',\r\n                field: 'UOMCode',\r\n                cellStyle: {\r\n                    width: '15%'\r\n                },\r\n                render: (rowData) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.UOMCode}\r\n                        onClick={() => {\r\n                            setUomTableLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={false}\r\n                        rows={[]}\r\n                    />\r\n\r\n                )\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                field: 'Quantity',\r\n                cellStyle: {\r\n                    width: '15%'\r\n                },\r\n                render: (rowData) => (\r\n                    <InputNumber\r\n                        placeholder='0.00'\r\n                        symbolIcon=''\r\n                        thousandSeparator\r\n                        disabled={false}\r\n                        value={rowData.Quantity}\r\n                        Change={e => updateTableData(Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')), rowData, 'Quantity')}\r\n                    />\r\n                    // <NumberFormat // Input Number  Currency Symbo false \r\n                    //     decimalScale={2}\r\n                    //     fixedDecimalScale={2}\r\n                    //     onChange={(e) =>\r\n                    //         updateTableData(Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')), rowData, 'Quantity')\r\n                    //     }\r\n                    // />\r\n                )\r\n            },\r\n            {\r\n                title: 'Wastage',\r\n                field: 'Wastage',\r\n                cellStyle: {\r\n                    width: '15%'\r\n                },\r\n                render: (rowData) => (\r\n                    <InputNumber\r\n                        placeholder='0.00'\r\n                        symbolIcon=''\r\n                        thousandSeparator\r\n                        disabled={false}\r\n                        value={rowData.Wastage}\r\n                        Change={e => updateTableData(Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')), rowData, 'Wastage')}\r\n                    />\r\n                )\r\n            },\r\n            {\r\n                title: 'Stage',\r\n                field: 'StageName',\r\n                cellStyle: {\r\n                    width: '25%'\r\n                },\r\n                render: (rowData) => (\r\n                    <DropDownLookup\r\n                        columns={[]}\r\n                        value={rowData.StageName}\r\n                        onClick={() => {\r\n                            setStageTableLookupOpen(true);\r\n                            SetSelectedRowData(rowData);\r\n                        }}\r\n                        onBlurDiv={() => null}\r\n                        lookupOpen={StageTableLookupOpen}\r\n                        rows={[]}\r\n                    />\r\n                )\r\n            }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (lookupRes.error) {\r\n            setGrowlSetting('error', lookupRes.error.message);\r\n            dispatch(nullLookup());\r\n        }\r\n        if (lookupRes.lookupData) {\r\n            if (lookupRes.lookupData.Success === true) {\r\n                setRoutingLookUpList(lookupRes.lookupData.Message.Routing);\r\n                setBomLookUpListCopy(lookupRes.lookupData.Message.BOM);\r\n            } else {\r\n                setGrowlSetting('error', 'Failed  to get BOM LookUps !');\r\n            }\r\n            dispatch(nullLookup1());\r\n        }\r\n        if (lookupRes.lookupData2) {\r\n            if (lookupRes.lookupData2.Success === true) {\r\n                setStageLookUpList(lookupRes.lookupData2.Message.RoutingStages);\r\n            } else {\r\n                setGrowlSetting('error', 'Failed  to get Stages !');\r\n            }\r\n            dispatch(nullLookup2());\r\n        }\r\n        if (lookupRes.lookupData3) {\r\n            if (lookupRes.lookupData3.Success === true) {\r\n                newRowsArr = lookupRes.lookupData3.Message.BOMDetail; //For  Refrencin Array\r\n                setTableRows(lookupRes.lookupData3.Message.BOMDetail);\r\n            } else {\r\n                setGrowlSetting('error', 'Failed  to get BOM Detail !');\r\n            }\r\n            dispatch(nullLookup3());\r\n        }\r\n        if (lookupRes.lookupDataInventory) {\r\n            if (lookupRes.lookupDataInventory.Success === true) {\r\n                setItemLookUpList(lookupRes.lookupDataInventory.Message.Item);\r\n            } else {\r\n                setGrowlSetting('error', 'Failed  to get Items !');\r\n            }\r\n            dispatch(nullLookupInventory());\r\n        }\r\n        if (lookupRes.lookupDataInventory1) {\r\n            if (lookupRes.lookupDataInventory1.Success === true) {\r\n                setUomLookUpList(lookupRes.lookupDataInventory1.Message.ItemUOM);\r\n            } else {\r\n                setGrowlSetting('error', 'Failed  to get UOMs !');\r\n            }\r\n            dispatch(nullLookupInventory1());\r\n        }\r\n        if (lookupRes.lookupDataInventory2) {\r\n            if (lookupRes.lookupDataInventory2.Success === true) {\r\n                setUomListForTable(lookupRes.lookupDataInventory2.Message.ItemUOM);\r\n            } else {\r\n                setGrowlSetting('error', 'Failed  to get UOMs For Table !');\r\n            }\r\n            dispatch(nullLookupInventory2());\r\n        }\r\n    }, [lookupRes]);\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes.createOrUpdateData) {\r\n            if (AllActionsRes.createOrUpdateData.Success === true) {\r\n                setGrowlSetting('success', AllActionsRes?.createOrUpdateData?.Message, false);\r\n            } else {\r\n                setGrowlSetting('error', AllActionsRes?.createOrUpdateData?.Message, true);\r\n            }\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes.singleList.Message.Header);\r\n                setHeader((prevState) => ({\r\n                    ...prevState,\r\n                    RoutingHead: ''\r\n                }));\r\n\r\n                if (property.viewList) { // disable keys for view Mode\r\n                    let arrForView = AllActionsRes.singleList.Message.Detail;\r\n                    arrForView.map((eachItem) => {\r\n                        eachItem['disableKeys'] = true\r\n                    })\r\n                    newRowsArr = [...arrForView]\r\n                    setTableRows(arrForView);\r\n\r\n                }\r\n                else {\r\n                    newRowsArr = [...AllActionsRes.singleList.Message.Detail]\r\n                    setTableRows(AllActionsRes.singleList.Message.Detail);\r\n                }\r\n\r\n            } else {\r\n                setGrowlSetting('error', AllActionsRes.singleList.Message);\r\n            }\r\n            dispatch(nullList());\r\n        }\r\n    }, [AllActionsRes]);\r\n\r\n    const setGrowlSetting = (severity, apiResponse, registerNotOpen) => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            open: true,\r\n            registerNotOpen: registerNotOpen === undefined ? property.registerNotOpen : registerNotOpen,\r\n            severity: severity,\r\n            msg: apiResponse\r\n        }))\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setMenuOpen(false);\r\n    };\r\n\r\n    const setTableRows = (rows) => {\r\n        SetItemTable((prevState) => ({\r\n            ...prevState,\r\n            rows: rows\r\n        }));\r\n    };\r\n\r\n    // Api calls Functions\r\n\r\n    const getLookUpData = () => {\r\n        dispatch(getLookupData(`FormName=${FormName}`));\r\n    };\r\n\r\n    // useEffect(()=>{\r\n    //     getItemCodeLookUp()\r\n    // },[])\r\n\r\n    const getItemCodeLookUp = () => {\r\n        dispatch(getInventoryLookupData(`FormName=${'Items'}`));\r\n    };\r\n\r\n    const getUomData = (ItemCode) => {\r\n        dispatch(getInventoryLookupData1(`FormName=${'ItemUOM'}&ItemCode=${ItemCode}`));\r\n    };\r\n\r\n    const getStagesData = (RoutingCode) => {\r\n        dispatch(getLookup2Data(`FormName=${'RoutingStages'}&RoutingCode=${RoutingCode}`));\r\n    };\r\n\r\n    const copyBomOk = () => {\r\n        dispatch(getLookup3Data(`FormName=${'BOMDetail'}&BOMID=${CopyBom.BOMID}`));\r\n        setCopyBomDialog(false);\r\n        setDisableStatusForCopyBom(true)\r\n    };\r\n\r\n    const SetRowDataID = (data) => {\r\n        console.log({ data });\r\n        setRecID(data.BOMID);\r\n    };\r\n\r\n    const validationOnSave = () => {\r\n        if (Header.ItemCode === '' || Header.ItemCode === undefined || Header.ItemCode === null) {\r\n            setGrowlSetting('error', 'Item Code is Empty !');\r\n            return false;\r\n        } else if (Header.ItemName === '' || Header.ItemName === undefined || Header.ItemName === null) {\r\n            setGrowlSetting('error', 'Item Name is Empty !');\r\n            return false;\r\n        } else if (Header.BillStatus === '' || Header.BillStatus === undefined || Header.BillStatus === null) {\r\n            setGrowlSetting('error', 'Bill Status is Empty !');\r\n            return false;\r\n        } else if (Header.StockMethod === '' || Header.StockMethod === undefined || Header.StockMethod === null) {\r\n            setGrowlSetting('error', 'Stock Method is Empty!');\r\n            return false;\r\n        } else if (Header.RoutingCode === '' || Header.RoutingCode === undefined || Header.RoutingCode === null) {\r\n            setGrowlSetting('error', 'Routing Code is Empty!');\r\n            return false;\r\n        } else if (Header.UOMCode === '' || Header.UOMCode === undefined || Header.UOMCode === null) {\r\n            setGrowlSetting('error', 'UOM Code is Empty!');\r\n        }\r\n        // else if (areRowsCompletelyFilled().length > 0) {\r\n        //     setGrowlSetting('error', 'Please Completely Fill Rows!');\r\n        // }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    // const areRowsCompletelyFilled = () => {\r\n    //     let flag = 0;\r\n    //     flag = ItemTable.rows.filter((item, i) => {\r\n    //         return item.StageCode === '' || item.CItemCode === '' || item.DesignQty === '' || item.Wastage === '';\r\n    //     });\r\n    //     return flag;\r\n    // };\r\n\r\n    const handleSave = () => {\r\n        if (validationOnSave()) {\r\n            let payload = {\r\n                FormName: FormName,\r\n                Header,\r\n                Detail: ItemTable.rows\r\n            };\r\n            dispatch(createOrUpdate(payload));\r\n            console.log({ payload })\r\n        }\r\n    };\r\n\r\n    const updateTableData = (e, rowData, prop) => {\r\n        let arr = newRowsArr;\r\n        let index = arr.indexOf(rowData);\r\n        arr[index][prop] = e;\r\n        let BaseQuantity = arr[index]['UnitQuantity'] * arr[index]['Quantity']; // Calculate Base Quantity\r\n        arr[index]['BaseQuantity'] = BaseQuantity;\r\n        SetItemTable({ ...ItemTable, rows: arr });\r\n        newRowsArr = arr;\r\n    };\r\n\r\n\r\n    const setLookUpData = (e, rowData, LookUpName) => {\r\n        if (LookUpName === 'Item') {\r\n            console.log({ rowData });\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                ItemCode: rowData.ItemCode,\r\n                ItemName: rowData.Item,\r\n                UOMCode: rowData.UOMCode,\r\n                UOM: rowData.UOM,\r\n                UnitQty: rowData.UntQty === undefined ? 1 : rowData.UntQty\r\n\r\n            }));\r\n\r\n            // setProperty((prevState) => ({\r\n            //     ...prevState,\r\n            //     bomCodeLookUp: false\r\n            // }));\r\n            // setIsBoMLookUp(false)\r\n            setBomLookUp(false)\r\n            getUomData(rowData.ItemCode);\r\n            // setDisableUomLookUp(false);\r\n            setDisableBOMStatus(false)\r\n        }\r\n        if (LookUpName === 'UOM') {\r\n            console.log({ rowData });\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                UOMCode: rowData.UOMCode,\r\n                // UOM: rowData.UOM,\r\n                // UntQty: rowData.UntQty\r\n            }));\r\n\r\n            // setProperty((prevState) => ({\r\n            //     ...prevState,\r\n            //     uomCodeLookUp: false\r\n            // }));\r\n            setUomLookUp(false)\r\n        }\r\n        if (LookUpName === 'Routing') {\r\n            getStagesData(rowData.RoutingCode);\r\n            setHeader((prevState) => ({\r\n                ...prevState,\r\n                RoutingCode: rowData.RoutingCode,\r\n                RoutingName: rowData.RoutingName\r\n            }));\r\n\r\n            // setProperty((prevState) => ({\r\n            //     ...prevState,\r\n            //     routingCodeLookUp: false\r\n            // }));\r\n            setRoutingLookUp(false)\r\n        }\r\n        if (LookUpName === 'ItemLookUp') {\r\n            let arr = [...newRowsArr];\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['CItemCode'] = rowData.ItemCode;\r\n            arr[index]['CItemName'] = rowData.Item;\r\n            arr[index]['UOMCode'] = rowData.UOMCode;\r\n            arr[index]['UOM'] = rowData.UOM;\r\n            arr[index]['UnitQuantity'] = rowData.UnitQuantity === undefined ? 1 : rowData.UnitQuantity;\r\n            dispatch(getInventoryLookupData2(`FormName=${'ItemUOM'}&ItemCode=${rowData.ItemCode}`));\r\n            // setLookupOpen(false)\r\n            setItemTableLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n        if (LookUpName === 'StageLookUp') {\r\n            let arr = [...newRowsArr];\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['StageCode'] = rowData.StageCode;\r\n            arr[index]['StageName'] = rowData.StageName;\r\n            arr[index]['LaborPerUnit'] = rowData.LaborPerUnit;\r\n            arr[index]['OutputPerUnit'] = rowData.OutputPerUnit;\r\n            arr[index]['PowerPerUnit'] = rowData.PowerPerUnit;\r\n            arr[index]['MachineName'] = rowData.MachineName;\r\n            arr[index]['MachineCode'] = rowData.MachineCode;\r\n            arr[index]['StandardHours'] = rowData.StandardHours;\r\n            arr[index]['StageSeq'] = rowData.StageSeq;\r\n            setStageTableLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n        if (LookUpName === 'UOMLookUp') {\r\n            let arr = [...newRowsArr];\r\n            let index = arr.indexOf(SelectedRowData);\r\n            arr[index]['UOMCode'] = rowData.UOMCode;\r\n            arr[index]['UOM'] = rowData.UOMCode;\r\n            arr[index]['UnitQuantity'] = rowData.UnitQuantity;\r\n\r\n            setUomTableLookupOpen(false);\r\n            SetItemTable({ ...ItemTable, rows: arr });\r\n        }\r\n        if (LookUpName === 'BOMLookUpDialog') {\r\n            setBomStates(rowData);\r\n            setRoutingHeader(rowData);\r\n            setbomCodeLookUpCopy(false)\r\n            // setProperty((prevState) => ({ ...prevState, bomCodeLookUpCopy: false }));\r\n        }\r\n    };\r\n\r\n    const setBomStates = (row) => {\r\n        setCopyBom((prevState) => ({\r\n            ...prevState,\r\n            BOMID: row.BOMID,\r\n            DialogItemCode: row.ItemCode,\r\n            ItemName: row.ItemName,\r\n            RoutingCode: row.RoutingCode,\r\n            StockMethod: row.StockMethod,\r\n            UOM: row.UOM,\r\n            UOMCode: row.UOMCode\r\n        }));\r\n\r\n        getStagesData(row.RoutingCode);\r\n    };\r\n\r\n    const setRoutingHeader = (row) => {\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            RoutingCode: row.RoutingCode,\r\n            RoutingName: row.RoutingName,\r\n            StockMethod: row.StockMethod,\r\n            BillStatus: 'Active'\r\n        }));\r\n        // getStagesData(row.RoutingCode);\r\n\r\n    };\r\n\r\n    const AddRow = () => {\r\n        if (Header.RoutingCode != \"\") {\r\n            let arr = [...ItemTable.rows];\r\n            let Item = {\r\n                CItemCode: '',\r\n                CItemName: '',\r\n                UOMCode: '',\r\n                CStatus: 0,\r\n                UOM: '',\r\n                MachineName: '',\r\n                MachineCode: '',\r\n                LaborPerUnit: '',\r\n                OutputPerUnit: '',\r\n                PowerPerUnit: '',\r\n                UnitQuantity: 1,\r\n                Quantity: '',\r\n                BaseQuantity: ' ',\r\n                Wastage: '',\r\n                RoutingCode: '',\r\n                StageCode: '',\r\n                StageSeq: '',\r\n                StandardHours: '',\r\n                disableKeys: false\r\n            };\r\n\r\n            arr.push({ ...Item });\r\n            newRowsArr = arr;\r\n            SetItemTable((prevState) => ({\r\n                ...prevState,\r\n                rows: arr\r\n            }))\r\n\r\n        }\r\n        else {\r\n            setGrowlSetting('error', 'Please Select Routing First !');\r\n        }\r\n        // SetItemTable({ ...ItemTable, rows: arr });\r\n    };\r\n\r\n    const dialogBody = () => {\r\n        return (\r\n            <>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <MainCard>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={12}>\r\n                                    <DropDownLookup\r\n                                        disabled={false}\r\n                                        label=\"BoM Code*\"\r\n                                        reference={'BoM Code'}\r\n                                        onClick={() => setbomCodeLookUpCopy(true)}\r\n                                        lookupOpen={bomCodeLookUpCopy}\r\n                                        columns={BomLookUpListCopy.columns}\r\n                                        rows={BomLookUpListCopy?.rows}\r\n                                        onBlurDiv={() => setbomCodeLookUpCopy(false)}\r\n                                        onFocus={() => setSelected(false)}\r\n                                        onBlur={(e) => {\r\n                                            setTimeout(() => {\r\n                                                setFilter(false);\r\n                                                validateLookup(\r\n                                                    {\r\n                                                        setProperty,\r\n                                                        property,\r\n                                                        Header,\r\n                                                        setHeader,\r\n                                                        selectLookupVal,\r\n                                                        lookupSelectRow\r\n                                                    },\r\n                                                    lookupTxtField,\r\n                                                    BomLookUpListCopy?.rows,\r\n                                                    ['LocationCode', 'Location'],\r\n                                                    ['Code', 'Description'],\r\n                                                    'Location Code'\r\n                                                );\r\n                                                setbomCodeLookUpCopy(false);\r\n                                            }, 200);\r\n                                        }}\r\n                                        changeLookupVal={changeLookupVal}\r\n                                        propertyName=\"DialogItemCode\"\r\n                                        listForSearch={BomLookUpListCopy?.rows}\r\n                                        setSearchRowProp={(searchResult) => {\r\n                                            setSearchRows(searchResult);\r\n                                        }}\r\n                                        // rows={filter ? searchedRows : bomCode.rows}\r\n                                        setFilterProp={(filter) => setFilter(filter)}\r\n                                        setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                        value={CopyBom.ItemCode}\r\n                                        lookupValuesList={['ItemCode', 'Item', 'UoMCode', 'RoutingCode']}\r\n                                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"BOMLookUpDialog\")}\r\n                                    />\r\n                                    {/* <DropDownLookup\r\n                                        disabled={property.viewList}\r\n                                        label={'BOM Code*'}\r\n                                        reference={'BOMCode'}\r\n                                        onFocus={() => setSelected(false)}\r\n                                        onBlurDiv={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUpCopy: false }))}\r\n                                        onBlur={(e) => {\r\n                                            setTimeout(() => {\r\n                                                setFilter(false);\r\n                                                validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, itemLookUpList.rows, [\"ItemCode\", \"Item\"], [\"ItemCode\", \"Item\"], \"BOMLookUpDialog\", false, setLookUpData);\r\n                                                setProperty((prevState) => ({ ...prevState, bomCodeLookUpCopy: false }));\r\n                                            }, 200);\r\n                                        }}\r\n                                        onClick={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUpCopy: true }))}\r\n                                        lookupOpen={property.bomCodeLookUpCopy}\r\n                                        columns={BomLookUpListCopy.columns}\r\n                                        rows={filter ? searchedRows : BomLookUpListCopy.rows}\r\n                                        changeLookupVal={changeLookupVal}\r\n                                        propertyName=\"DialogItemCode\"\r\n                                        listForSearch={BomLookUpListCopy.rows}\r\n                                        setSearchRowProp={(searchResult) => {\r\n                                            setSearchRows(searchResult);\r\n                                        }}\r\n                                        setFilterProp={(filter) => setFilter(filter)}\r\n                                        setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUpCopy: true }))}\r\n                                        value={CopyBom.ItemCode}\r\n                                        lookupValuesList={['ItemCode', 'Item']}\r\n                                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'BOMLookUpDialog')}\r\n                                    /> */}\r\n\r\n                                </Grid>\r\n                                {/* <Grid item xs={1}></Grid> */}\r\n                                <Grid item xs={12}>\r\n                                    <InputText value={CopyBom.ItemName} id=\"itemName\" disabled={true} label=\"ItemName*\" />\r\n\r\n                                </Grid>\r\n                                <Grid item xs={12} >\r\n                                    <InputText value={CopyBom.UOMCode} id=\"uomCode\" disabled={true} label=\"UoM*\" />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} >\r\n                                    <InputText value={CopyBom.RoutingCode} id=\"routingCode\" disabled={true} label=\"Routing Code*\" />\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const addData = () => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            viewList: false,\r\n            editList: false,\r\n            newList: true,\r\n            registerNotOpen: true\r\n        }));\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            ItemCode: '',\r\n            ItemName: '',\r\n            BillStatus: '', // bom Status\r\n            EffectiveDate: new Date(),\r\n            ObseleteDate: new Date(), // will enable jb bill status obs\r\n            StockMethod: '',\r\n            UOMCode: '',\r\n            UOM: '',\r\n            RoutingCode: '',\r\n            RoutingName: '',\r\n            UnitQty: ''\r\n\r\n        }))\r\n        setCopyBom((prevState) => ({\r\n            ...prevState,\r\n            BOMID: '',\r\n            DialogItemCode: '',\r\n            ItemName: '',\r\n            RoutingCode: '',\r\n            RoutingName: '',\r\n            StockMethod: '',\r\n            UOM: '',\r\n            UOMCode: ''\r\n        }))\r\n\r\n        SetItemTable((prevState) => ({\r\n            ...prevState,\r\n            rows: []\r\n        }))\r\n\r\n\r\n        getLookUpData();\r\n        getItemCodeLookUp();\r\n\r\n    };\r\n\r\n    const viewData = (rowData) => {\r\n        getSingleRec(rowData)\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            viewList: true,\r\n            newList: false,\r\n            editList: false,\r\n            registerNotOpen: true\r\n        }));\r\n        setisDisable(true)\r\n    };\r\n\r\n    const editData = (rowData) => {\r\n        getLookUpData();\r\n        getItemCodeLookUp();\r\n        getUomData(rowData.ItemCode);\r\n        getStagesData(rowData.RoutingCode);\r\n        setDisableStatusForCopyBom(false)\r\n\r\n        getSingleRec(rowData);\r\n\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            viewList: false,\r\n            newList: false,\r\n            editList: true,\r\n            registerNotOpen: true\r\n        }));\r\n\r\n        setDisableBOMStatus(false)\r\n    };\r\n\r\n    const getSingleRec = (rowData) => {\r\n        let payload1 = `FormName=${FormName}&BOMID=${rowData.BOMID}&BillStatus=${rowData.BillStatus}`\r\n        dispatch(getSingleList(payload1));\r\n    };\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const deleteRow = (rowData) => {\r\n        let arr = [...ItemTable.rows]\r\n        let index = arr.indexOf(rowData)\r\n        arr.splice(index, 1)\r\n        SetItemTable({ ...ItemTable, rows: arr })\r\n\r\n    }\r\n\r\n    const changeLookupVal = (property, value) => {\r\n        lookupTxtField = value;\r\n        lookupSelectRow = false;\r\n        Header[property] = value;\r\n        setHeader({ ...Header })\r\n    }\r\n\r\n    // Bom Status Check for Date\r\n\r\n    const bomStatusHandler = (status) => {\r\n        if (status.target.value === 'Obselete') {\r\n            setHeader({ ...Header, BillStatus: status.target.value });\r\n            setObseleteBomStatus(true);\r\n        } else {\r\n            setHeader({ ...Header, BillStatus: status.target.value });\r\n        }\r\n        if (Header.ItemCode != \"\" && !property.editList) {\r\n            let payload1 = `FormName=${FormName}&ItemCode=${Header.ItemCode}&BillStatus=${status.target.value}`\r\n            dispatch(getSingleList(payload1));\r\n        }\r\n\r\n    };\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n\r\n    const goback = () => {\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: false\r\n        }))\r\n        setisDisable(false)\r\n        // setProperty((prevState)=>())\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {property.registerNotOpen === true ? (\r\n                <>\r\n\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <MainCard>\r\n                                <ElevationScroll>\r\n                                    <CardActions>\r\n                                        <Grid container alignItems=\"center\" justifyContent=\"space-between\" >\r\n                                            <Grid item >\r\n                                                <GlobalHeader\r\n                                                    // loading={LoadingOnSave}\r\n                                                    goBack={() => goback()}\r\n                                                    clearAll_OnClick={() => clearAll()}\r\n                                                    clearAll={isDisable}\r\n                                                    copyBomDisabled={isDisable}\r\n                                                    saveAndClose={isDisable}\r\n                                                    saveAndClose_OnClick={() => {\r\n                                                        saveAndClose();\r\n                                                    }}\r\n                                                    FormID={1}\r\n                                                    submitButton={isDisable}\r\n                                                    SaveButton={isDisable}\r\n                                                    Button2={isDisable}\r\n                                                    submit={isDisable}\r\n                                                    showCopyBomIcon={false}\r\n                                                    SaveButton_OnClick={() => handleSave()}\r\n                                                    submitButton_OnClick={() => postAndSave()}\r\n                                                    Button2_OnClick={() => printVoucher()}\r\n                                                    copyBom={() => setCopyBomDialog(true)}\r\n                                                    isView={isDisable}\r\n                                                    isBOM={true}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                </ElevationScroll>\r\n                                <Divider />\r\n                                <CardContent>\r\n                                    <Grid container spacing={2} alignItems=\"center\">\r\n                                        <Grid item xs={4}>\r\n                                            {/* <DropDownLookup\r\n                                                disabled={property.viewList}\r\n                                                label=\"BoM Code*\"\r\n                                                reference={'BoM Code'}\r\n                                                onClick={() => setIsBoMLookUp(true)}\r\n                                                lookupOpen={isBoMLookUp}\r\n                                                columns={itemLookUpList.columns}\r\n                                                // rows={itemLookUpList?.rows}\r\n                                                onBlurDiv={() => setIsBoMLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow },\r\n                                                            lookupTxtField, itemLookUpList.rows,\r\n                                                            [\"ItemCode\", \"Item\"], [\"ItemCode\", \"Item\"], \"Item\",\r\n                                                            true, setLookUpData);\r\n                                                        setIsBoMLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"ItemCode\"\r\n                                                listForSearch={itemLookUpList?.rows}\r\n                                                // setSearchRowProp={(searchResult) => {\r\n                                                //     setSearchRows(searchResult);\r\n                                                // }}\r\n                                                setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                rows={filter ? searchedRows : itemLookUpList.rows}\r\n                                                // setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                value={Header.ItemCode}\r\n                                                lookupValuesList={['ItemCode', 'Item', 'UoMCode', 'RoutingCode']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"Item\")}\r\n                                            /> */}\r\n                                            <DropDownLookup\r\n                                                disabled={property.viewList || property.editList}\r\n                                                label={'BOM Code*'}\r\n                                                reference={'BOMCode'}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlurDiv={() => setBomLookUp(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow },\r\n                                                            lookupTxtField, itemLookUpList.rows,\r\n                                                            [\"ItemCode\", \"Item\"], [\"ItemCode\", \"Item\"], \"Item\",\r\n                                                            true, setLookUpData);\r\n                                                        setBomLookUp(false)\r\n                                                    }, 200);\r\n                                                }}\r\n                                                onClick={() => setBomLookUp(true)}\r\n                                                lookupOpen={bomLookUp}\r\n                                                columns={itemLookUpList?.columns}\r\n                                                rows={filter ? searchedRows : itemLookUpList?.rows}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"ItemCode\"\r\n                                                listForSearch={itemLookUpList?.rows}\r\n                                                setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setBomLookUp(true)}\r\n                                                value={Header.ItemCode}\r\n                                                lookupValuesList={[\"ItemCode\", \"Item\"]}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"Item\")}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <DropDown\r\n                                                value={Header.BillStatus}\r\n                                                Change={(e) => {\r\n                                                    bomStatusHandler(e);\r\n                                                }}\r\n                                                label=\"BOM Status*\"\r\n                                                disabled={property.viewList || disableBOMStatus || disableStatusForCopyBom}\r\n                                                list={statusList}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputDate\r\n                                                value={Header.effectiveDate}\r\n                                                id=\"EffectiveDate\"\r\n                                                Change={(date) => {\r\n                                                    setHeader({ ...Header, effectiveDate: date });\r\n                                                }}\r\n                                                Blur={() => null}\r\n                                                disabled={property.viewList}\r\n                                                label=\"Effective Date*\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputDate\r\n                                                value={Header.obseleteDate}\r\n                                                id=\"ObseleteDate\"\r\n                                                Change={(date) => {\r\n                                                    setHeader({ ...Header, obseleteDate: date });\r\n                                                }}\r\n                                                Blur={() => null}\r\n                                                disabled={property.viewList || ObseleteBomStatus}\r\n                                                label=\"Obselete Date*\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputText\r\n                                                value={Header.ItemName}\r\n                                                id=\"ItemName\"\r\n                                                // Change={(e) => setHeader({ ...Header, ItemName: e.target.value })} property.viewList\r\n                                                disabled={true}\r\n                                                label=\"ItemName*\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <DropDown\r\n                                                value={Header.StockMethod}\r\n                                                Change={(e) => setHeader({ ...Header, StockMethod: e.target.value })}\r\n                                                label=\"Stock Method*\"\r\n                                                disabled={property.viewList}\r\n                                                list={stockMethodsList}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                // disabled={property.viewList || disableUomLookUp}\r\n                                                disabled={true}\r\n                                                label=\"UOM Code*\"\r\n                                                reference={'UOM Code'}\r\n                                                onClick={() => setUomLookUp(true)}\r\n                                                lookupOpen={uomLookUp}\r\n                                                columns={uomLookUpList.columns}\r\n                                                // rows={uomLookUpList.rows}\r\n                                                onBlurDiv={() => setUomLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, uomLookUpList.rows, [\"UOMCode\", \"UOM\"], [\"UOMCode\", \"UOM\"], \"\");\r\n                                                        setUomLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"UOMCode\"\r\n                                                listForSearch={uomLookUpList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                rows={filter ? searchedRows : uomLookUpList.rows}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                // setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                setLookupEnable={() => setUomLookUp(true)}\r\n                                                value={Header.UOM}\r\n                                                lookupValuesList={[\"UOMCode\", \"UOM\"]}\r\n                                                // lookupValuesList={['ItemCode', 'Item', 'UoMCode', 'RoutingCode']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"UOM\")}\r\n                                            />\r\n                                            {/* <DropDownLookup\r\n                                                disabled={property.viewList || disableUomLookUp}\r\n                                                label={'UOM Code*'}\r\n                                                reference={'UOMCode'}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlurDiv={() => setUomLookUp(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, uomLookUpList.rows, [\"UOMCode\", \"UOM\"], [\"UOMCode\", \"UOM\"], \"\");\r\n                                                        // setProperty((prevState) => ({ ...prevState, uomCodeLookUp: false }))\r\n                                                        setUomLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                onClick={() => setUomLookUp(false)}\r\n                                                lookupOpen={uomLookUp}\r\n                                                columns={uomLookUpList.columns}\r\n                                                rows={filter ? searchedRows : uomLookUpList.rows}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"UOMCode\"\r\n                                                listForSearch={uomLookUpList.rows}\r\n                                                setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={setUomLookUp(true)}\r\n                                                value={Header.UOMCode}\r\n                                                lookupValuesList={[\"UOMCode\", \"UOM\"]}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"UOM\")}\r\n                                            /> */}\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                disabled={property.viewList || property.editList}\r\n                                                label=\"Routing Code*\"\r\n                                                reference={'Routing Code'}\r\n                                                onClick={() => setRoutingLookUp(true)}\r\n                                                lookupOpen={routingLookUp}\r\n                                                columns={RoutingLookUpList?.columns}\r\n                                                // rows={RoutingLookUpList.rows}\r\n                                                onBlurDiv={() => setRoutingLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, RoutingLookUpList.rows, [\"RoutingCode\", \"RoutingName\"], [\"RoutingCode\", \"RoutingName\"], \"Routing\", true, setLookUpData);\r\n                                                        setRoutingLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"RoutingCode\"\r\n                                                listForSearch={RoutingLookUpList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                rows={filter ? searchedRows : RoutingLookUpList.rows}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setRoutingLookUp(true)}\r\n                                                // setLookupEnable={() => null}\r\n                                                value={Header.RoutingCode}\r\n                                                lookupValuesList={[\"RoutingCode\", \"RoutingName\"]}\r\n                                                // lookupValuesList={[\"UOMCode\", \"UOM\"]}\r\n                                                // lookupValuesList={['ItemCode', 'Item', 'UoMCode', 'RoutingCode']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"Routing\")}\r\n                                            />\r\n                                            {/* <DropDownLookup\r\n                                                disabled={property.viewList}\r\n                                                label={'Routing Code*'}\r\n                                                reference={'RoutingCode'}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlurDiv={() => setProperty((prevState) => ({ ...prevState, routingCodeLookUp: false }))}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, RoutingLookUpList.rows, [\"RoutingCode\", \"RoutingName\"], [\"RoutingCode\", \"RoutingName\"], \"Routing\", true, setLookUpData);\r\n                                                        setProperty((prevState) => ({ ...prevState, routingCodeLookUp: false }))\r\n                                                    }, 200);\r\n                                                }}\r\n                                                onClick={() => setProperty((prevState) => ({ ...prevState, routingCodeLookUp: true }))}\r\n                                                lookupOpen={property.routingCodeLookUp}\r\n                                                columns={RoutingLookUpList.columns}\r\n                                                rows={filter ? searchedRows : RoutingLookUpList.rows}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"RoutingCode\"\r\n                                                listForSearch={RoutingLookUpList.rows}\r\n                                                setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, routingCodeLookUp: true }))}\r\n                                                setLookupEnable={() => null}\r\n                                                value={Header.RoutingCode}\r\n                                                lookupValuesList={[\"RoutingCode\", \"RoutingName\"]}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"Routing\")}\r\n                                            /> */}\r\n                                            {/* </Grid> */}\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n\r\n                                        </Grid>\r\n\r\n\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </MainCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    {/* /////////////////////////////////Material Table /////////////////////// */}\r\n                    <MaterialTable\r\n                        style={{ padding: '10px' }}\r\n                        title={\r\n                            <div>\r\n                                <AnimateButton>\r\n                                    <Button variant=\"text\" onClick={() => AddRow()}>\r\n                                        + Add Item\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </div>}\r\n                        // columns={ItemTable.columns}\r\n                        columns={\r\n                            [\r\n                                {\r\n                                    title: 'ItemCode',\r\n                                    field: 'CItemCode',\r\n                                    cellStyle: {\r\n                                        width: '15%'\r\n                                    },\r\n                                    render: (rowData, i) => (\r\n                                        <DropDownLookup\r\n                                            columns={[]}\r\n                                            value={rowData.CItemCode}\r\n                                            onClick={() => {\r\n                                                setItemTableLookupOpen(true);\r\n                                                SetSelectedRowData(rowData);\r\n                                            }}\r\n                                            onBlurDiv={() => null}\r\n                                            lookupOpen={false}\r\n                                            disabled={rowData.disableKeys}\r\n                                            rows={[]}\r\n                                        />\r\n                                    )\r\n                                },\r\n                                {\r\n                                    title: 'Item',\r\n                                    field: 'CItemName',\r\n                                    cellStyle: {\r\n                                        width: '20%',\r\n                                        alignContent: 'center'\r\n                                    },\r\n                                    render: (rowData, i) => <p>{rowData.CItemName}</p>\r\n                                },\r\n\r\n                                {\r\n                                    title: 'UOM',\r\n                                    field: 'UOMCode',\r\n                                    cellStyle: {\r\n                                        width: '15%'\r\n                                    },\r\n                                    render: (rowData) => (\r\n                                        <DropDownLookup\r\n                                            columns={[]}\r\n                                            disabled={true}\r\n                                            value={rowData.UOMCode}\r\n                                            onClick={() => {\r\n                                                setUomTableLookupOpen(true);\r\n                                                SetSelectedRowData(rowData);\r\n                                            }}\r\n                                            onBlurDiv={() => null}\r\n                                            lookupOpen={false}\r\n\r\n                                            rows={[]}\r\n                                        />\r\n\r\n                                    )\r\n                                },\r\n                                {\r\n                                    title: 'Quantity',\r\n                                    field: 'Quantity',\r\n                                    cellStyle: {\r\n                                        width: '15%'\r\n                                    },\r\n                                    render: (rowData) => (\r\n                                        <InputNumber\r\n                                            placeholder='0.00'\r\n                                            symbolIcon=''\r\n                                            thousandSeparator\r\n                                            disabled={rowData.disableKeys}\r\n                                            value={rowData.Quantity === 1 ? '' : rowData.Quantity}\r\n                                            Change={e => updateTableData(Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')), rowData, 'Quantity')}\r\n                                        />\r\n                                    )\r\n                                },\r\n                                {\r\n                                    title: 'Wastage',\r\n                                    field: 'Wastage',\r\n                                    cellStyle: {\r\n                                        width: '15%'\r\n                                    },\r\n                                    render: (rowData) => (\r\n                                        <InputNumber\r\n                                            placeholder='0.00'\r\n                                            symbolIcon=''\r\n                                            thousandSeparator\r\n                                            disabled={rowData.disableKeys}\r\n                                            value={rowData.Wastage}\r\n                                            Change={e => updateTableData(Number(e.target.value.replace(/,/gi, '').split(rowData.Symbol).join('')), rowData, 'Wastage')}\r\n                                        />\r\n                                    )\r\n                                },\r\n                                {\r\n                                    title: 'Stage',\r\n                                    field: 'StageName',\r\n                                    cellStyle: {\r\n                                        width: '25%'\r\n                                    },\r\n                                    render: (rowData) => (\r\n                                        <DropDownLookup\r\n                                            columns={[]}\r\n                                            value={rowData.StageName}\r\n                                            onClick={() => {\r\n                                                setStageTableLookupOpen(true);\r\n                                                SetSelectedRowData(rowData);\r\n                                            }}\r\n                                            onBlurDiv={() => null}\r\n                                            lookupOpen={false}\r\n                                            rows={[]}\r\n                                            disabled={rowData.disableKeys}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            ]\r\n\r\n                        }\r\n                        data={ItemTable.rows}\r\n                        options={{\r\n                            showTitle: true,\r\n                            toolbar: true,\r\n                            paging: false,\r\n                            actionsColumnIndex: -1,\r\n                            pageSize: 5,\r\n                            pageSizeOptions: [5, 10, 20, 30],\r\n                            search: false,\r\n                            loadingType: 'linear',\r\n                            actionsCellStyle: {\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                width: 20\r\n                            },\r\n                            headerStyle: {\r\n                                fontWeight: 'bold',\r\n                                paddingRight: '0px',\r\n                                paddingTop: '5px',\r\n                                paddingBottom: '5px',\r\n                                textAlign: 'center'\r\n                            }\r\n                        }}\r\n                        isLoading={loadingForRows}\r\n                        actions={[\r\n                            (rowData) => ({\r\n                                icon: () => <DeleteOutline sx={{ color: red[500] }} style={{ height: '1em', width: '1em' }} />,\r\n                                tooltip: 'Delete',\r\n                                disabled: property.viewList,\r\n                                onClick: (event) => {\r\n                                    deleteRow(event, rowData);\r\n                                }\r\n                            })\r\n                        ]}\r\n                    />\r\n                    {/* /////////////////////////////////PopupLookup /////////////////////// */}\r\n                    <PopupLookup\r\n                        LookUpOpen={ItemTableLookupOpen}\r\n                        large={false}\r\n                        LookUpHeading={'Item'}\r\n                        LookupList={itemLookUpList}\r\n                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'ItemLookUp')}\r\n                        LookUpClose={() => setItemTableLookupOpen(false)}\r\n                        ok={() => setItemTableLookupOpen(false)}\r\n                    />\r\n\r\n                    <PopupLookup\r\n                        LookUpOpen={UomTableLookupOpen}\r\n                        large={false}\r\n                        LookUpHeading={'UOM'}\r\n                        LookupList={uomListForTable}\r\n                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'UOMLookUp')}\r\n                        LookUpClose={() => setStageTableLookupOpen(false)}\r\n                        ok={() => setItemTableLookupOpen(false)}\r\n                    />\r\n\r\n                    <PopupLookup\r\n                        LookUpOpen={StageTableLookupOpen}\r\n                        large={false}\r\n                        LookUpHeading={'Stage'}\r\n                        LookupList={stageLookUpList}\r\n                        setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'StageLookUp')}\r\n                        LookUpClose={() => setStageTableLookupOpen(false)}\r\n                        ok={() => setItemTableLookupOpen(false)}\r\n                    />\r\n                    {/* /////////////////////////////////ReusableDialog /////////////////////// */}\r\n\r\n                    <ReusableDialog\r\n                        Title={\"BOM Information\"}\r\n                        Body={dialogBody()}\r\n                        hideDialog={() => { setCopyBomDialog(false) }}\r\n                        IsOpen={copyBomDialog}\r\n                        ButtonTitle1={\"OK\"}\r\n                        Close={() => { setCopyBomDialog(false) }}\r\n                        ButtonTitle2={\"CANCEL\"}\r\n                        Save={copyBomOk}\r\n                    />\r\n\r\n                </>\r\n\r\n            ) : (\r\n                <Register\r\n                    Details={'Bill Of Material List'}\r\n                    FormName={FormName}\r\n                    // FormId={BomId}\r\n                    ModuleName={ModuleName}\r\n                    props={props}\r\n                    dialog={true}\r\n                    AddData={addData}\r\n                    EditData={editData}\r\n                    payload={payload}\r\n                    isEditButton={true}\r\n                    saveFunction={saveFunction}\r\n                    SetRowDataID={SetRowDataID}\r\n                    setLoadingOnSave={setLoadingOnSave}\r\n                    ID={recID}\r\n                    FormCode={'BOMID'}\r\n                    ViewData={viewData}\r\n                    FormID={FormName}\r\n                    type=\"JV\"\r\n                    postingIcons={false}\r\n                />\r\n            )}\r\n        </>\r\n        // <Grid container  >\r\n        //     <Grid item xs={12}>\r\n        //         <Growl\r\n        //             property={property}\r\n        //             close={handleClose}\r\n        //             onClick={handleClose}\r\n        //         />\r\n\r\n        //     </Grid>\r\n        //     {\r\n        //         property.registerNotOpen === true ?\r\n        //             <Grid container justify='center'>\r\n        //                 <Grid item xs={11}>\r\n        //                     {/* <GlobalHeader\r\n        //                         loading={LoadingOnSave}\r\n        //                         // loading={true}\r\n        //                         // Button2={true}\r\n        //                         goBack={() => goback()}\r\n        //                         clearAll_OnClick={() => clearAll()}\r\n        //                         clearAll={property.newList ? true : false}\r\n        //                         saveAndClose={property.viewList ? false : true}\r\n        //                         saveAndClose_OnClick={() => { saveAndClose() }}\r\n        //                         FormID={constant.GeneralEntryFormID}\r\n        //                         submitButton={property.viewList ? false : true}\r\n        //                         SaveButton={property.viewList ? false : true}\r\n        //                         Button2={property.newList ? false : true}\r\n        //                         submit={property.viewList ? false : true}\r\n        //                         // Button2={property.viewList ? false : false}\r\n        //                         //  HeadingText={'General Journal Form'}\r\n        //                         SaveButton_OnClick={() => handleSave()}\r\n        //                         submitButton_OnClick={() => postAndSave()}\r\n        //                         Button2_OnClick={() => printVoucher()}\r\n        //                     /> */}\r\n\r\n        //                     <Card className=\"card card-w-title \" style={{ boxShadow: \"-1px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\" }} >\r\n        //                         <Grid container style={{ paddingLeft: 90, paddingBottom: 10 }} >\r\n        //                             <Grid item xs={2}>\r\n        //                                 <DropDownLookup\r\n        //                                     // disableUomLookUp\r\n        //                                     disabled={property.viewList}\r\n        //                                     label={'BOM Code*'}\r\n        //                                     reference={'BOMCode'}\r\n        //                                     onFocus={() => setSelected(false)}\r\n        //                                     onBlurDiv={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: false }))}\r\n        //                                     onBlur={(e) => {\r\n        //                                         setTimeout(() => {\r\n        //                                             setFilter(false);\r\n        //                                             // validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, CurrencyLookupList.rows, [\"CurrencyCode\", \"Currency\"], [\"Code\", \"Description\"], \"Currency Code\");\r\n        //                                             setProperty((prevState) => ({ ...prevState, bomCodeLookUp: false }))\r\n        //                                         }, 200);\r\n        //                                     }}\r\n        //                                     onClick={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n        //                                     lookupOpen={property.bomCodeLookUp}\r\n        //                                     // columns={bomCode.columns}\r\n        //                                     columns={itemLookUpList.columns}\r\n        //                                     // rows={filter ? searchedRows : bomCode.rows}\r\n        //                                     rows={itemLookUpList.rows}\r\n        //                                     changeLookupVal={changeLookupVal}\r\n        //                                     propertyName=\"BOMCode\"\r\n        //                                     listForSearch={itemLookUpList.rows}\r\n        //                                     setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n        //                                     setFilterProp={(filter) => setFilter(filter)}\r\n        //                                     setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n        //                                     value={Header.ItemCode}\r\n        //                                     lookupValuesList={[\"ItemCode\", \"Item\"]}\r\n        //                                     setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"Item\")}\r\n        //                                 />\r\n        //                             </Grid>\r\n        //                             <Grid item xs={1}>\r\n\r\n        //                             </Grid>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <DropDown\r\n        //                                     value={Header.BillStatus}\r\n        //                                     Change={(e) => { bomStatusHandler(e) }}\r\n        //                                     label=\"BOM Status*\"\r\n        //                                     disabled={property.viewList}\r\n        //                                     list={statusList}\r\n        //                                 />\r\n        //                             </Grid>\r\n        //                             <Grid item xs={1}></Grid>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <InputDate value={Header.effectiveDate} id=\"EffectiveDate\"\r\n        //                                     Change={(date) => { setHeader({ ...Header, effectiveDate: date }); }}\r\n        //                                     Blur={() => null}\r\n        //                                     disabled={property.viewList}\r\n        //                                     label=\"Effective Date*\" />\r\n        //                             </Grid>\r\n        //                             <Grid item xs={1}></Grid>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <InputDate value={Header.obseleteDate} id=\"ObseleteDate\"\r\n        //                                     Change={(date) => { setHeader({ ...Header, obseleteDate: date }); }}\r\n        //                                     Blur={() => null}\r\n        //                                     disabled={property.viewList || ObseleteBomStatus}\r\n        //                                     label=\"Obselete Date*\" />\r\n        //                             </Grid>\r\n        //                         </Grid>\r\n        //                         <Grid container style={{ paddingLeft: 90, paddingBottom: 10 }}>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <InputText value={Header.ItemName} id=\"ItemName\"\r\n        //                                     // Change={(e) => setHeader({ ...Header, ItemName: e.target.value })} property.viewList\r\n        //                                     disabled={true}\r\n        //                                     label=\"ItemName*\" />\r\n        //                             </Grid>\r\n        //                             <Grid item xs={1}></Grid>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <DropDown\r\n        //                                     value={Header.StockMethod}\r\n        //                                     Change={(e) => setHeader({ ...Header, StockMethod: e.target.value })}\r\n        //                                     label=\"Stock Method*\"\r\n        //                                     disabled={property.viewList}\r\n        //                                     list={stockMethodsList}\r\n        //                                 />\r\n        //                             </Grid>\r\n        //                             <Grid item xs={1}></Grid>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <DropDownLookup\r\n        //                                     disabled={property.viewList}\r\n        //                                     label={'UOM Code*'}\r\n        //                                     reference={'UOMCode'}\r\n        //                                     onFocus={() => setSelected(false)}\r\n        //                                     onBlurDiv={() => setProperty((prevState) => ({ ...prevState, uomCodeLookUp: false }))}\r\n        //                                     onBlur={(e) => {\r\n        //                                         setTimeout(() => {\r\n        //                                             setFilter(false);\r\n        //                                             // validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, CurrencyLookupList.rows, [\"CurrencyCode\", \"Currency\"], [\"Code\", \"Description\"], \"Currency Code\");\r\n        //                                             setProperty((prevState) => ({ ...prevState, uomCodeLookUp: false }))\r\n        //                                         }, 200);\r\n        //                                     }}\r\n        //                                     onClick={() => setProperty((prevState) => ({ ...prevState, uomCodeLookUp: true }))}\r\n        //                                     lookupOpen={property.uomCodeLookUp}\r\n        //                                     // columns={bomCode.columns}\r\n        //                                     columns={uomLookUpList.columns}\r\n        //                                     // rows={filter ? searchedRows : bomCode.rows}\r\n        //                                     rows={uomLookUpList.rows}\r\n        //                                     changeLookupVal={changeLookupVal}\r\n        //                                     propertyName=\"UMOID\"\r\n        //                                     // listForSearch={uomCode.rows}\r\n        //                                     setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n        //                                     setFilterProp={(filter) => setFilter(filter)}\r\n        //                                     setLookupEnable={() => setProperty((prevState) => ({ ...prevState, uomCodeLookUp: true }))}\r\n        //                                     value={Header.UOMCode}\r\n        //                                     lookupValuesList={[\"UMOID\", \"UOM\"]}\r\n        //                                     setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"UOM\")}\r\n        //                                 />\r\n        //                             </Grid>\r\n        //                             <Grid item xs={1}></Grid>\r\n        //                             <Grid item xs={2}>\r\n        //                                 <DropDownLookup\r\n        //                                     disabled={property.viewList}\r\n        //                                     label={'Routing Code*'}\r\n        //                                     reference={'RoutingCode'}\r\n        //                                     onFocus={() => setSelected(false)}\r\n        //                                     onBlurDiv={() => setProperty((prevState) => ({ ...prevState, routingCodeLookUp: false }))}\r\n        //                                     onBlur={(e) => {\r\n        //                                         setTimeout(() => {\r\n        //                                             setFilter(false);\r\n        //                                             // validateLookup({ setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow }, lookupTxtField, CurrencyLookupList.rows, [\"CurrencyCode\", \"Currency\"], [\"Code\", \"Description\"], \"Currency Code\");\r\n        //                                             setProperty((prevState) => ({ ...prevState, routingCodeLookUp: false }))\r\n        //                                         }, 200);\r\n        //                                     }}\r\n        //                                     onClick={() => setProperty((prevState) => ({ ...prevState, routingCodeLookUp: true }))}\r\n        //                                     lookupOpen={property.routingCodeLookUp}\r\n        //                                     // columns={routingLookUpList.columns}\r\n        //                                     columns={RoutingLookUpList.columns}\r\n        //                                     // rows={filter ? searchedRows : RoutingLookUpList.rows}\r\n        //                                     rows={RoutingLookUpList.rows}\r\n        //                                     changeLookupVal={changeLookupVal}\r\n        //                                     propertyName=\"RoutingCode\"\r\n        //                                     listForSearch={routingCode.rows}\r\n        //                                     setSearchRowProp={(searchResult) => { setSearchRows(searchResult) }}\r\n        //                                     setFilterProp={(filter) => setFilter(filter)}\r\n        //                                     setLookupEnable={() => setProperty((prevState) => ({ ...prevState, routingCodeLookUp: true }))}\r\n        //                                     value={Header.RoutingCode}\r\n        //                                     lookupValuesList={[\"RoutingCode\", \"RoutingName\"]}\r\n        //                                     setLookUpData={(e, rowData) => setLookUpData(e, rowData, \"Routing\")}\r\n        //                                 />\r\n        //                             </Grid>\r\n        //                         </Grid>\r\n        //                         <Grid container style={{ paddingLeft: 90 }}>\r\n        //                             <Grid item xs={12}>\r\n        //                                 <Button variant=\"contained\" onClick={() => { setCopyBomDialog(true) }} style={{ width: '16.5%', color: 'yellow' }} color=\"primary\" >\r\n        //                                     Copy BOM\r\n        //                                 </Button></Grid>\r\n        //                             <Grid item xs={12}>\r\n        //                                 <Button variant=\"contained\" onClick={() => handleSave()} style={{ width: '16.5%', paddingTop: 10 }} color=\"primary\" >\r\n        //                                     Save Temp\r\n        //                                 </Button></Grid>\r\n\r\n        //                         </Grid>\r\n        //                     </Card>\r\n\r\n        //                     <MaterialTable\r\n\r\n        //                         title=\r\n        //                         {\r\n        //                             <div className=\"table-button\" >\r\n        //                                 <span className=\"table-title\" style={{ fontWeight: \"bold\", fontSize: \"20px\" }}></span>\r\n        //                                 {property.viewList === false && <Button variant=\"contained\" onClick={() => AddRow()} className=\"table-button\">Add<i className=\"fa fa-plus\" style={{ marginLeft: '10px' }} disabled={false}></i></Button>}\r\n\r\n        //                             </div>\r\n\r\n        //                         }\r\n        //                         isLoading={loading}\r\n        //                         columns={ItemTable.columns}\r\n        //                         data={ItemTable.rows}\r\n\r\n        //                         options={{\r\n        //                             paging: false,\r\n        //                             actionsColumnIndex: -1,\r\n        //                             pageSize: 5,\r\n        //                             pageSizeOptions: [5, 10, 20, 30],\r\n        //                             search: false,\r\n        //                             loadingType: 'linear',\r\n        //                             headerStyle: {\r\n\r\n        //                                 fontWeight: 'bold',\r\n        //                                 paddingLeft: '10px',\r\n        //                                 paddingRight: '0px',\r\n        //                                 paddingTop: '0px',\r\n        //                                 paddingBottom: '0px',\r\n        //                                 textAlign: 'left'\r\n\r\n        //                             },\r\n        //                             actionsCellStyle: {\r\n        //                                 justifyContent: 'center', alignItems: 'center', width: 20\r\n        //                             }\r\n        //                         }}\r\n        //                         actions={[\r\n\r\n        //                             {\r\n        //                                 icon: 'delete',\r\n        //                                 tooltip: 'Delete',\r\n        //                                 hidden: property.viewList,\r\n        //                                 onClick: (event, rowData) => {\r\n        //                                     onClickDelete(rowData)\r\n        //                                 },\r\n\r\n        //                             },\r\n        //                         ]}\r\n        //                         localization={{\r\n        //                             body: {\r\n        //                                 emptyDataSourceMessage: 'No records to display',\r\n        //                                 filterRow: {\r\n        //                                     filterTooltip: 'Filter'\r\n        //                                 }\r\n        //                             }\r\n        //                         }}\r\n\r\n        //                     />\r\n\r\n        //                 </Grid>\r\n        //                 <ReusableDialog\r\n        //                     Title={\"BOM Information\"}\r\n        //                     Body={dialogBody()}\r\n        //                     hideDialog={() => { setCopyBomDialog(false) }}\r\n        //                     IsOpen={copyBomDialog}\r\n        //                     ButtonTitle1={\"OK\"}\r\n        //                     ButtonTitle2={\"CANCEL\"}\r\n        //                     Save={copyBomOk}\r\n        //                 />\r\n\r\n        //                 <PopupLookup large={false}\r\n        //                     LookUpHeading={\"BOM LookUp\"}\r\n        //                     LookUpOpen={bomLookUp}\r\n        //                     LookUpClose={() => setBomLookUp(false)}\r\n        //                     setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Machine')}\r\n        //                     LookupList={BomLookUpList} />\r\n\r\n        //             </Grid > :\r\n\r\n        //     }\r\n        //     <PopupLookup\r\n        //         LookUpOpen={ItemTableLookupOpen}\r\n        //         large={false}\r\n        //         LookUpHeading={'Item'}\r\n        //         LookupList={itemLookUpList}\r\n        //         setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'ItemLookUp')}\r\n        //         LookUpClose={() => setItemTableLookupOpen(false)}\r\n        //         ok={() => setItemTableLookupOpen(false)}\r\n        //     />\r\n\r\n        //     <PopupLookup\r\n        //         LookUpOpen={StageTableLookupOpen}\r\n        //         large={false}\r\n        //         LookUpHeading={'Stage'}\r\n        //         LookupList={stageLookUpList}\r\n        //         setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'StageLookUp')}\r\n        //         LookUpClose={() => setStageTableLookupOpen(false)}\r\n        //         ok={() => setItemTableLookupOpen(false)}\r\n        //     />\r\n\r\n        //     <PopupLookup\r\n        //         LookUpOpen={UomTableLookupOpen}\r\n        //         large={false}\r\n        //         LookUpHeading={'UOM'}\r\n        //         LookupList={uomListForTable}\r\n        //         setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'UOMLookUp')}\r\n        //         LookUpClose={() => setStageTableLookupOpen(false)}\r\n        //         ok={() => setItemTableLookupOpen(false)}\r\n        //     />\r\n        // </Grid >\r\n    );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useMediaQuery, useScrollTrigger } from '@mui/material';\r\n\r\n// project import\r\nimport { useSelector } from 'store';\r\n\r\n// ==============================|| elevation scroll ||============================== //\r\nfunction ElevationScroll({ children, window }) {\r\n    const theme = useTheme();\r\n    const matchDown = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const { drawerOpen } = useSelector((state) => state.menu);\r\n\r\n    const fullStickyLeft = drawerOpen ? 281 : 42;\r\n\r\n    const responsiveTop = matchDown ? 80 : 83;\r\n    const responsiveRight = matchDown ? 38 : 41;\r\n    const responsiveLeft = matchDown ? 38 : fullStickyLeft;\r\n\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 180,\r\n        target: window || undefined\r\n    });\r\n\r\n    const darkBorder = theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.grey[200];\r\n\r\n    return React.cloneElement(children, {\r\n        style: {\r\n            backgroundColor: theme.palette.background.default,\r\n            zIndex: 1099,\r\n            borderTop: trigger ? '1px solid' : 'none',\r\n            borderBottom: trigger ? '1px solid' : 'none',\r\n            borderColor: trigger ? darkBorder : '',\r\n            position: trigger ? 'fixed' : 'relative',\r\n\r\n            top: trigger ? responsiveTop : 'auto',\r\n            right: trigger ? responsiveRight : 'auto',\r\n            left: trigger ? responsiveLeft : 'auto'\r\n        }\r\n    });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n    children: PropTypes.node,\r\n    window: PropTypes.object\r\n};\r\n\r\nexport default ElevationScroll;\r\n","\r\nexport function validateLookup(stateProps, value, listForSearch, headerValuesList, lookupValuesList, msgProp, callApi, setLookUpData) {\r\n\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            value = value.toLowerCase()\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toString().toLowerCase().indexOf(value) > -1 ||\r\n                    x[lookupValuesList[1]].toString().toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty((prevState) => ({\r\n                        ...prevState,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    }));\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        stateProps.Header[headerValuesList[i]] = \"\"\r\n                        stateProps.setHeader({ ...stateProps.Header })\r\n                    }\r\n                    console.log({ Header: stateProps.Header })\r\n                    // stateProps.setHeader({ ...stateProps.Header })\r\n                }\r\n                else if (filteredVal.length && value) {\r\n                    if (callApi) {\r\n                        switch (msgProp) {\r\n                            case \"Customers\":\r\n                                setLookUpData(null, filteredVal[0], \"Customers\")\r\n                                break;\r\n                            case \"Item\":\r\n                                setLookUpData(null, filteredVal[0], \"Item\")\r\n                                break;\r\n                            case \"Routing\":\r\n                                setLookUpData(null, filteredVal[0], \"Routing\")\r\n                                break;\r\n                            default:\r\n                                setLookUpData(\"donor\", filteredVal[0], headerValuesList, lookupValuesList)\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else {\r\n                        for (var i = 0; i < headerValuesList.length; i++) {\r\n                            stateProps.Header[headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                            stateProps.setHeader({ ...stateProps.Header })\r\n                        }\r\n\r\n                        if (msgProp === 'Bank') {\r\n                            // const dispatch = useDispatch();\r\n                            setLookUpData(filteredVal[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                stateProps.Header[headerValuesList[i]] = \"\";\r\n                stateProps.setHeader({ ...stateProps.Header })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateLookupinJV(stateProps, value, listForSearch, rowData, filterFlag, headerValuesList, lookupValuesList, msgProp) {\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toLowerCase().indexOf(value) > -1 || x[lookupValuesList[1]].toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty({\r\n                        ...stateProps.property,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    });\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                        stateProps.setJV({ ...stateProps.JV })\r\n                    }\r\n                    stateProps.setJV({ ...stateProps.JV })\r\n                }\r\n                else if (filteredVal.length && value && filterFlag === false) {\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                        stateProps.setJV({ ...stateProps.JV });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                let index = stateProps.JV.indexOf(rowData);\r\n                stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                stateProps.setJV({ ...stateProps.JV })\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}