{"version":3,"sources":["views/Manufacturing/Transactions/MoEntry/index.js","ui-component/ElevationScroll.js","utilities/validateLookup.js"],"names":["FormName","MoEntry","props","lookupTxtField","useState","isDisable","setisDisable","rowEntryCode","setRowEntryCode","isLocationLookUp","setIsLocationLookUp","isBoMLookUp","setIsBoMLookUp","setLoadingOnSave","selectLookupVal","setSelected","setSearchRows","setFilter","dosaveFunction","setIsEditorView","React","Date","lookupSelectRow","TransDate","TransNo","TransType","LocationCode","Location","ItemCode","Item","UOMCode","UOM","RoutingCode","RoutingName","TransStatus","UnitQuantity","Quantity","BaseQuantity","MOStatus","BOMID","Header","setHeader","registerNotOpen","viewList","newList","editList","property","setProperty","columns","field","title","headerName","width","editable","align","type","rows","ItemTable","SetItemTable","cellStyle","border","paddingTop","paddingBottom","headerStyle","fontWeight","background","LocationName","locationLookupList","setLocationLookupList","ItemName","BoMLookupList","setBoMLookupList","dispatch","useDispatch","lookupRes","useSelector","AllActionsRes","onViewData","singleList","Message","useEffect","error","nullList","Success","Detail","setOnBlueDisable","validationOnSave","undefined","open","severity","msg","ShiftHeaLocationd","handleSnakeBarClose","changeLookupVal","value","setLookUpData","e","rowData","Lookupname","target","UnitQty","getLocationLookUpData","getInventoryLookupData","getBoMLookUpData","getLookupData","setMOStatus","val","getLookup2Data","prevState","lookupDataInventory","lookupData","BOM","lookupData2","MODetail","item","xs","close","onClick","container","Details","DialogClose","prevstate","Prev","FormId","MOEntryId","dialog","AddData","data","EditData","row","SetRowDataID","Button","ID","ViewData","CodeMsg","payload","getSingleList","FormID","FormCode","isPostButton","isEditButton","spacing","alignItems","justifyContent","goBack","clearAll_OnClick","clearAll","copyBomDisabled","saveAndClose","saveAndClose_OnClick","submitButton","SaveButton","Button2","submit","SaveButton_OnClick","MODetails","createOrUpdate","prev","HandleSave","submitButton_OnClick","postAndSave","Button2_OnClick","printVoucher","isView","label","name","disabled","id","Change","date","reference","lookupOpen","onBlurDiv","onFocus","onBlur","setTimeout","validateLookup","propertyName","listForSearch","setSearchRowProp","searchResult","setFilterProp","filter","setLookupEnable","bomCodeLookUp","lookupValuesList","symbol","list","sx","boxShadow","borderColor","hideFooter","autoHeight","disableColumnMenu","getRowId","CItemCode","ElevationScroll","children","window","theme","useTheme","matchDown","useMediaQuery","breakpoints","down","drawerOpen","state","menu","responsiveTop","responsiveRight","responsiveLeft","trigger","useScrollTrigger","disableHysteresis","threshold","darkBorder","palette","mode","dark","grey","cloneElement","style","backgroundColor","default","zIndex","borderTop","borderBottom","position","top","right","left","stateProps","headerValuesList","msgProp","callApi","toLowerCase","filteredVal","x","i","toString","indexOf","length","console","log"],"mappings":"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","file":"static/js/15.51c95c95.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, CardActions, Divider, CardContent } from '@mui/material';\r\nimport MaterialTable from 'material-table';\r\nimport Icons from 'ui-component/material-icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getInventoryLookupData, getLookupData, getLookup2Data, createOrUpdate, getSingleList, nullList } from 'store/actions/index';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    DropDown,\r\n    InputDate,\r\n    InputTime,\r\n    Growl\r\n} from 'ui-component/globalcomponents';\r\nimport { validateLookup } from 'utilities/validateLookup';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport GlobalHeader from 'ui-component/globalcomponents/GlobalHeader/GlobalHeader';\r\nimport ElevationScroll from 'ui-component/ElevationScroll';\r\nimport { padding } from '@mui/system';\r\nimport { MOEntryId } from 'utilities/FormIds';\r\nlet FormName = 'MO';\r\n\r\nconst MoEntry = (props) => {\r\n    const [isDisable, setisDisable] = useState(false);\r\n    const [onBlurDisable, setOnBlurDisable] = useState(false);\r\n    const [rowEntryCode, setRowEntryCode] = useState('');\r\n    const [isLocationLookUp, setIsLocationLookUp] = useState(false);\r\n    const [isBoMLookUp, setIsBoMLookUp] = useState(false);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [selectLookupVal, setSelected] = useState(true);\r\n    const [searchedRows, setSearchRows] = useState([]);\r\n    const [filter, setFilter] = useState(false);\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [IsEditorView, setIsEditorView] = useState(false);\r\n    const [valueBasic, setValueBasic] = React.useState(new Date());\r\n    const [addItemClicked, setAddItemClicked] = useState(false);\r\n\r\n    const deleteProductHandler = (id) => {\r\n        setProductsData(productsData.filter((item) => item.id !== id));\r\n    };\r\n\r\n    // Dialog Handler\r\n    const handleDialogOk = () => {\r\n        setOpen(false);\r\n        formik.resetForm();\r\n    };\r\n\r\n    // add item handler\r\n    const handleAddItem = (addingData) => {\r\n        setProductsData([\r\n            ...productsData,\r\n            {\r\n                id: addingData.id,\r\n                product: addingData.name,\r\n                description: addingData.desc,\r\n                quantity: addingData.selectedQuantity,\r\n                amount: addingData.amount,\r\n                total: addingData.totalAmount\r\n            }\r\n        ]);\r\n\r\n        setAddItemClicked(false);\r\n    };\r\n\r\n    var lookupSelectRow = false;\r\n    var lookupTxtField;\r\n\r\n    const [Header, setHeader] = useState({\r\n        TransDate: new Date(),\r\n        TransNo: '',\r\n        TransType: 'MO',\r\n        LocationCode: '',\r\n        Location: '',\r\n        ItemCode: '',\r\n        Item: '',\r\n        UOMCode: '',\r\n        UOM: '',\r\n        RoutingCode: '',\r\n        RoutingName: '',\r\n        TransStatus: '',\r\n        UnitQuantity: '',\r\n        Quantity: '',\r\n        BaseQuantity: '',\r\n        MOStatus: '',\r\n        BOMID: ''\r\n    });\r\n\r\n    const [property, setProperty] = useState({\r\n        registerNotOpen: true,\r\n        viewList: false,\r\n        newList: false,\r\n        editList: false\r\n    });\r\n\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                field: 'CItemCode',\r\n                title: 'Item Code',\r\n                headerName: 'Item Code',\r\n                width: 250,\r\n                editable: true\r\n                // renderCell: (params) => <InputText value={params.CItemCode} name=\"shiftName\" disabled={isDisable} />\r\n                // align: 'left',\r\n                // type: 'lookUp',\r\n                // render: (rowData) => <InputText value={rowData.CItemCode} name=\"shiftName\" disabled={isDisable} />\r\n            },\r\n\r\n            {\r\n                field: 'CItemName',\r\n                title: 'Item Name',\r\n                headerName: 'Item Name',\r\n                width: 350,\r\n                editable: false\r\n                // align: 'left',\r\n                // type: 'text',\r\n                // column: '40%',\r\n                // render: (rowData) => <InputText value={rowData.CItemName} disabled={isDisable} />\r\n            },\r\n            {\r\n                title: 'UOM',\r\n                field: 'UOM',\r\n                headerName: 'UOM',\r\n                width: 150,\r\n                editable: true,\r\n                align: 'left'\r\n                // type: 'lookup',\r\n                // width: '15%',\r\n                // render: (rowData) => <InputText value={rowData.UOM} disabled={isDisable} />\r\n            },\r\n            {\r\n                title: 'Stage',\r\n                field: 'StageName',\r\n                headerName: 'Stage',\r\n                width: 150,\r\n                editable: false\r\n                // type: 'lookup',\r\n                // align: 'left',\r\n                // width: '15%',\r\n                // render: (rowData) => <InputText value={rowData.StageName} disabled={isDisable} />\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                field: 'Quantity',\r\n                headerName: 'Quantity',\r\n                width: 150,\r\n                editable: true,\r\n                type: 'number',\r\n                align: 'right'\r\n                // width: '10%',\r\n                // render: (rowData) => <InputNumber symbol={false} value={rowData.Quantity} disabled={isDisable} />\r\n            },\r\n            // {\r\n            //     field: 'action',\r\n            //     headerName: 'Actions',\r\n            //     // width: 150,\r\n            //     sortable: false,\r\n            //     renderCell: (params) => {\r\n            //         //   const onClick = (e) => {\r\n            //         //     e.stopPropagation(); // don't select this row after clicking\r\n\r\n            //         //     const api: GridApi = params.api;\r\n            //         //     const thisRow: Record<string, GridCellValue> = {};\r\n\r\n            //         //     api\r\n            //         //       .getAllColumns()\r\n            //         //       .filter((c) => c.field !== \"__check__\" && !!c)\r\n            //         //       .forEach(\r\n            //         //         (c) => (thisRow[c.field] = params.getValue(params.id, c.field))\r\n            //         //       );\r\n\r\n            //         //     return alert(JSON.stringify(thisRow, null, 4));\r\n            //         //   };\r\n\r\n            //         return (\r\n            //             <Button\r\n            //             //   onClick={onClick}\r\n            //             >\r\n            //                 Click\r\n            //             </Button>\r\n            //         );\r\n            //     }\r\n            // }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    const [locationLookupList, setLocationLookupList] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Location Code',\r\n                field: 'LocationCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'Location',\r\n                field: 'LocationName',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            }\r\n        ],\r\n        rows: [\r\n            { LocationCode: '001', LocationName: 'Factory' },\r\n            { LocationCode: '002', LocationName: 'WareHouse' },\r\n            { LocationCode: '003', LocationName: 'Plant' }\r\n        ]\r\n    });\r\n    const [BoMLookupList, setBoMLookupList] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Item Code',\r\n                field: 'ItemCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'Item',\r\n                field: 'ItemName',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'UoM code',\r\n                field: 'UOMCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'Routing Code',\r\n                field: 'RoutingName',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            }\r\n        ],\r\n        rows: [\r\n            { ItemCode: 'Buttons', ItemName: 'Buttons', UOMCode: 'NOS', RoutingName: 'Textile' },\r\n            { ItemCode: 'F-001', ItemName: 'Fabric 12/16', UOMCode: 'METER', RoutingName: '001' },\r\n            { ItemCode: 'MENS TROUSER', ItemName: 'MENS TROUSER', UOMCode: 'NOS', RoutingName: 'TEXTILE' },\r\n            { ItemCode: 'MENS T-SHIRT', ItemName: 'MENS T-SHIRT', UOMCode: 'NOS', RoutingName: 'TEXTILE' }\r\n        ]\r\n    });\r\n    const dispatch = useDispatch();\r\n    const lookupRes = useSelector(({ lookupRes }) => lookupRes);\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n    const onViewData = AllActionsRes?.singleList?.Message?.Header;\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes?.singleList?.Message.Header);\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: AllActionsRes?.singleList?.Message.Detail\r\n                });\r\n                dispatch(nullList());\r\n            } else {\r\n                setOnBlueDisable(false);\r\n            }\r\n        }\r\n    }, [AllActionsRes]);\r\n\r\n    const goback = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true,\r\n            msg: ''\r\n        }));\r\n\r\n        setHeader({\r\n            TransDate: new Date(),\r\n            TransNo: '',\r\n            TransType: 'MO',\r\n            LocationCode: '',\r\n            Location: '',\r\n            ItemCode: '',\r\n            Item: '',\r\n            UOMCode: '',\r\n            UOM: '',\r\n            RoutingCode: '',\r\n            RoutingName: '',\r\n            TransStatus: '',\r\n            UnitQuantity: '',\r\n            Quantity: '',\r\n            BaseQuantity: '',\r\n            MOStatus: '',\r\n            BOMID: ''\r\n        });\r\n\r\n        SetItemTable((Prev) => ({\r\n            ...Prev,\r\n            rows: []\r\n        }));\r\n\r\n        setIsEditorView(false);\r\n\r\n        setisDisable(false);\r\n        // setOnBlurDisable(false)\r\n    };\r\n    const handleClose = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true,\r\n            msg: ''\r\n        }));\r\n\r\n        setHeader({\r\n            TransDate: new Date(),\r\n            TransNo: '',\r\n            TransType: 'MO',\r\n            LocationCode: '',\r\n            Location: '',\r\n            ItemCode: '',\r\n            Item: '',\r\n            UOMCode: '',\r\n            UOM: '',\r\n            RoutingCode: '',\r\n            RoutingName: '',\r\n            TransStatus: '',\r\n            UnitQuantity: '',\r\n            Quantity: '',\r\n            BaseQuantity: '',\r\n            MOStatus: '',\r\n            BOMID: ''\r\n        });\r\n\r\n        SetItemTable((Prev) => ({\r\n            ...Prev,\r\n            rows: []\r\n        }));\r\n\r\n        setIsEditorView(false);\r\n\r\n        setisDisable(false);\r\n        // setOnBlurDisable(false)\r\n    };\r\n\r\n    const addData = (data) => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: false,\r\n            viewList: false\r\n        }));\r\n        getLocationLookUpData();\r\n        getBoMLookUpData();\r\n\r\n        SetItemTable({\r\n            ...ItemTable,\r\n            rows: []\r\n        });\r\n    };\r\n\r\n    const editData = (row) => {\r\n        setIsEditorView(true);\r\n        setHeader(row);\r\n        SetItemTable({\r\n            ...ItemTable,\r\n            rows: lookupRes?.lookupData2?.Message.MODetail\r\n        });\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: false,\r\n            viewList: false\r\n        }));\r\n        getLocationLookUpData();\r\n        getBoMLookUpData();\r\n        // setHeader({\r\n        //   TransDate: row.TransDate,\r\n        //   TransNo: row.TransNo,\r\n        //   TransType: row.TransType,\r\n        //   LocationCode: row.LocationCode,\r\n        //   Location: row.Location,\r\n        //   ItemCode: \"\",\r\n        //   Item: \"\",\r\n        //   UOMCode: \"\",\r\n        //   UOM: \"\",\r\n        //   RoutingCode: \"\",\r\n        //   RoutingName: \"\",\r\n        //   TransStatus: \"\",\r\n        //   UnitQuantity: \"\",\r\n        //   Quantity: \"\",\r\n        //   BaseQuantity: \"\",\r\n        //   MOStatus: \"\",\r\n        //   BOMID: \"\",\r\n\r\n        // })\r\n        // setProperty((prevState) => ({\r\n        //     ...prevState,\r\n        //     dialogNotOpen: true,\r\n\r\n        // }))\r\n        // setOnBlurDisable(true)\r\n    };\r\n\r\n    const viewData = (row) => {\r\n        setIsEditorView(true);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            CodeMsg: '',\r\n            registerNotOpen: false,\r\n            viewList: true\r\n        }));\r\n\r\n        let payload = `FormName=${'MOEntry'}&TransNo=${row.TransNo}`;\r\n        dispatch(getSingleList(payload));\r\n        setHeader({\r\n            ...Header,\r\n            RoutingName: onViewData?.RoutingName\r\n        });\r\n        setisDisable(true);\r\n    };\r\n\r\n    const SetRowDataID = (data, Button) => {\r\n        if (Button === 'Delete') {\r\n            if (data.TransStatus == '1') {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'This entry cannot b deleted',\r\n                    registerNotOpen: true\r\n                });\r\n                setRowEntryCode('');\r\n            } else {\r\n                setRowEntryCode(data.TransNo);\r\n            }\r\n        }\r\n    };\r\n\r\n    const validationOnSave = () => {\r\n        if (Header.ItemCode === '' || Header.ItemCode === undefined || Header.ItemCode === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty BoM Code Not Allowed'\r\n            });\r\n            return false;\r\n        } else if (Header.Quantity === '' || Header.Quantity === undefined || Header.Quantity === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Qunatity Not Allowed'\r\n            });\r\n            return false;\r\n        } else if (Header.Location === '' || Header.Location === undefined || Header.ShiftHeaLocationd === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Location Not Allowed'\r\n            });\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const HandleSave = () => {\r\n        if (validationOnSave()) {\r\n            let MODetails = Header.MOStatus === 'Release' ? [...lookupRes?.lookupData2?.Message?.MODetail] : [];\r\n\r\n            let payload = {\r\n                FormName,\r\n                Header,\r\n                Detail: MODetails\r\n            };\r\n\r\n            dispatch(createOrUpdate(payload));\r\n\r\n            setHeader({\r\n                TransDate: new Date(),\r\n                TransNo: '',\r\n                TransType: 'MO',\r\n                LocationCode: '',\r\n                Location: '',\r\n                ItemCode: '',\r\n                Item: '',\r\n                UOMCode: '',\r\n                UOM: '',\r\n                RoutingCode: '',\r\n                RoutingName: '',\r\n                TransStatus: '',\r\n                UnitQuantity: '',\r\n                Quantity: '',\r\n                BaseQuantity: '',\r\n                MOStatus: ''\r\n            });\r\n\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                registerNotOpen: true,\r\n                open: false,\r\n                severity: null,\r\n                msg: ''\r\n            }));\r\n\r\n            SetItemTable((prev) => ({\r\n                ...prev,\r\n                rows: []\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const changeLookupVal = (property, value) => {\r\n        lookupTxtField = value;\r\n        lookupSelectRow = false;\r\n        // Header[property] = value;\r\n        // setHeader({ ...Header,  })\r\n    };\r\n\r\n    const setLookUpData = (e, rowData, Lookupname) => {\r\n        let value = e.target.value;\r\n        if (Lookupname == 'Location') {\r\n            setHeader({\r\n                ...Header,\r\n                Location: rowData?.Location,\r\n                LocationCode: rowData?.LocationCode\r\n            });\r\n            setIsLocationLookUp(false);\r\n        } else if (Lookupname == 'BoMCode') {\r\n            setHeader({\r\n                ...Header,\r\n                Item: rowData?.ItemName,\r\n                ItemCode: rowData?.ItemCode,\r\n                UOM: rowData?.UOM,\r\n                UOMCode: rowData?.UOMCode,\r\n                UnitQuantity: rowData?.UnitQty,\r\n                RoutingName: rowData?.RoutingName,\r\n                RoutingCode: rowData?.RoutingCode,\r\n                BOMID: rowData?.BOMID\r\n            });\r\n\r\n            setIsBoMLookUp(false);\r\n        }\r\n    };\r\n\r\n    const getLocationLookUpData = () => {\r\n        dispatch(getInventoryLookupData(`FormName=${'Locations'}`));\r\n    };\r\n    const getBoMLookUpData = () => {\r\n        dispatch(getLookupData(`FormName=ActiveBOM`));\r\n    };\r\n\r\n    const getMoEntryData = () => {\r\n        dispatch(getLookup2Data(`FormName=MOEntry&BOMID=${Header.BOMID}&Qty=${Header.BaseQuantity}`));\r\n    };\r\n\r\n    const setMOStatus = (val) => {\r\n        if (val === 'Release') {\r\n            if (validationOnSave()) {\r\n                getMoEntryData();\r\n                setHeader((prevState) => ({\r\n                    ...prevState,\r\n                    MOStatus: val\r\n                }));\r\n            }\r\n        } else {\r\n            if (validationOnSave()) {\r\n                setHeader((prevState) => ({\r\n                    ...prevState,\r\n                    MOStatus: val\r\n                }));\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: []\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const clearAll = () => {\r\n        setHeader({\r\n            ...Header,\r\n            TransDate: new Date(),\r\n            TransNo: '',\r\n            TransType: 'MO',\r\n            TransStatus: '',\r\n            UnitQuantity: '',\r\n            Quantity: '',\r\n            BaseQuantity: '',\r\n            MOStatus: ''\r\n        });\r\n    };\r\n\r\n    // useEffect(() => {\r\n\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupDataInventory) {\r\n            if (lookupRes?.lookupDataInventory.Success === true) {\r\n                setLocationLookupList(lookupRes.lookupDataInventory.Message.Location);\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupDataInventory]);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupData) {\r\n            if (lookupRes?.lookupData?.Success === true) {\r\n                setBoMLookupList(lookupRes?.lookupData?.Message.BOM);\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupData]);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupData2) {\r\n            if (lookupRes?.lookupData2?.Success === true) {\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: lookupRes?.lookupData2?.Message.MODetail\r\n                });\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupData2]);\r\n\r\n    const handleGetRowId = (e) => {\r\n        return e.CItemCode;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid item xs={12}>\r\n                <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n            </Grid>\r\n            {property.registerNotOpen ? (\r\n                <Grid container>\r\n                    <Register\r\n                        Details={'MO Entry List'}\r\n                        FormName={FormName}\r\n                        DialogClose={handleClose}\r\n                        FormId={MOEntryId}\r\n                        dialog={true}\r\n                        AddData={addData}\r\n                        props={props}\r\n                        EditData={editData}\r\n                        SetRowDataID={SetRowDataID}\r\n                        dosaveFunction={dosaveFunction}\r\n                        setLoadingOnSave={setLoadingOnSave}\r\n                        ID={rowEntryCode}\r\n                        ViewData={viewData}\r\n                        FormID={FormName}\r\n                        FormCode={'TransNo'}\r\n                        isPostButton={true}\r\n                        isEditButton={true}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <MainCard>\r\n                                <ElevationScroll>\r\n                                    <CardActions>\r\n                                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                            <Grid item>\r\n                                                <GlobalHeader\r\n                                                    // loading={LoadingOnSave}\r\n                                                    goBack={() => goback()}\r\n                                                    clearAll_OnClick={() => clearAll()}\r\n                                                    clearAll={isDisable}\r\n                                                    copyBomDisabled={isDisable}\r\n                                                    saveAndClose={property.viewList}\r\n                                                    saveAndClose_OnClick={() => {\r\n                                                        saveAndClose();\r\n                                                    }}\r\n                                                    FormID={1}\r\n                                                    submitButton={property.viewList}\r\n                                                    SaveButton={property.viewList}\r\n                                                    Button2={!property.newList}\r\n                                                    submit={!property.viewList}\r\n                                                    SaveButton_OnClick={() => HandleSave()}\r\n                                                    submitButton_OnClick={() => postAndSave()}\r\n                                                    Button2_OnClick={() => printVoucher()}\r\n                                                    isView={isDisable}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                </ElevationScroll>\r\n                                <Divider />\r\n                                <CardContent>\r\n                                    <Grid container spacing={2} alignItems=\"center\">\r\n                                        <Grid item xs={4}>\r\n                                            <InputText label=\"MO Number\" name=\"TransNo\" value={Header.TransNo} disabled={true} />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputDate\r\n                                                id=\"MODate\"\r\n                                                label=\"MO Date*\"\r\n                                                name=\"TransaDate\"\r\n                                                value={Header.TransDate}\r\n                                                Change={(date) => setHeader({ ...Header, TransDate: date })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                disabled={isDisable}\r\n                                                // disabled={property.viewList}\r\n                                                label=\"Location*\"\r\n                                                name=\"Location\"\r\n                                                reference={'Location'}\r\n                                                onClick={() => setIsLocationLookUp(true)}\r\n                                                lookupOpen={isLocationLookUp}\r\n                                                columns={locationLookupList.columns}\r\n                                                rows={locationLookupList?.rows}\r\n                                                onBlurDiv={() => setIsLocationLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup(\r\n                                                            {\r\n                                                                setProperty,\r\n                                                                property,\r\n                                                                Header,\r\n                                                                setHeader,\r\n                                                                selectLookupVal,\r\n                                                                lookupSelectRow\r\n                                                            },\r\n                                                            lookupTxtField,\r\n                                                            locationLookupList.rows,\r\n                                                            ['LocationCode', 'Location'],\r\n                                                            ['Code', 'Description'],\r\n                                                            'Location Code'\r\n                                                        );\r\n                                                        setIsLocationLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"LocationCode\"\r\n                                                listForSearch={locationLookupList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                // rows={filter ? searchedRows : bomCode.rows}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                value={Header.Location}\r\n                                                lookupValuesList={['LocationCode', 'Location']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Location')}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                disabled={isDisable}\r\n                                                label=\"BoM Code*\"\r\n                                                reference={'BoM Code'}\r\n                                                onClick={() => setIsBoMLookUp(true)}\r\n                                                lookupOpen={isBoMLookUp}\r\n                                                columns={BoMLookupList?.columns}\r\n                                                rows={BoMLookupList?.rows}\r\n                                                onBlurDiv={() => setIsBoMLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup(\r\n                                                            {\r\n                                                                setProperty,\r\n                                                                property,\r\n                                                                Header,\r\n                                                                setHeader,\r\n                                                                selectLookupVal,\r\n                                                                lookupSelectRow\r\n                                                            },\r\n                                                            lookupTxtField,\r\n                                                            BoMLookupList?.rows,\r\n                                                            ['LocationCode', 'Location'],\r\n                                                            ['Code', 'Description'],\r\n                                                            'Location Code'\r\n                                                        );\r\n                                                        setIsBoMLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"ItemCode\"\r\n                                                listForSearch={BoMLookupList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                // rows={filter ? searchedRows : bomCode.rows}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                value={Header.ItemCode}\r\n                                                lookupValuesList={['ItemCode', 'Item', 'UoMCode', 'RoutingCode']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'BoMCode')}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputText\r\n                                                label=\"Item Name\"\r\n                                                name=\"Item\"\r\n                                                value={Header.Item}\r\n                                                Change={(e) => setHeader({ ...Header, Item: e.target.value })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <InputNumber\r\n                                                label=\"MO Quantity\"\r\n                                                name=\"Quantity\"\r\n                                                value={Header.Quantity}\r\n                                                symbol={false}\r\n                                                Change={(e) =>\r\n                                                    setHeader({\r\n                                                        ...Header,\r\n                                                        Quantity: e.target.value,\r\n                                                        BaseQuantity: e.target.value * Header.UnitQuantity\r\n                                                    })\r\n                                                }\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <InputText\r\n                                                label=\"UoM\"\r\n                                                name=\"UOM\"\r\n                                                value={Header.UOM}\r\n                                                Change={(e) => setHeader({ ...Header, UOM: e.target.value })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <InputText\r\n                                                // style={{ width: 500 }}\r\n                                                label=\"Routing\"\r\n                                                name=\"Routing\"\r\n                                                value={Header.RoutingName ? Header.RoutingName : Header.RoutingCode}\r\n                                                Change={(e) => setHeader({ ...Header, RoutingName: e.target.value })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            {property.viewList === true ? (\r\n                                                <InputText\r\n                                                    label=\"Status\"\r\n                                                    name=\"Status\"\r\n                                                    value={Header.MOStatus}\r\n                                                    disabled={property.viewList}\r\n                                                />\r\n                                            ) : (\r\n                                                <DropDown\r\n                                                    list={['Release', 'Not Release']}\r\n                                                    label={'Status'}\r\n                                                    name=\"MOStatus\"\r\n                                                    id={'Status'}\r\n                                                    // value={onViewData?.MOStatus ? onViewData?.MOStatus : Header.MOStatus}\r\n                                                    value={Header.MOStatus}\r\n                                                    Change={(e) => {\r\n                                                        setMOStatus(e.target.value);\r\n                                                    }}\r\n                                                    disabled={isDisable}\r\n                                                />\r\n                                            )}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </MainCard>\r\n                            <br />\r\n\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={12}>\r\n                                    {/* <MaterialTable\r\n                                        // isLoading={loading}\r\n                                        columns={ItemTable.columns}\r\n                                        data={ItemTable.rows}\r\n                                        icons={Icons}\r\n                                        options={{\r\n                                            showTitle: false,\r\n                                            toolbar: false,\r\n                                            actionsColumnIndex: -1,\r\n                                            pageSize: 5,\r\n                                            pageSizeOptions: [5, 10, 20, 30],\r\n                                            search: false,\r\n                                            headerStyle: {\r\n                                                fontWeight: 'bold',\r\n                                                // paddingLeft: '10px',\r\n                                                // paddingRight: '0px',\r\n                                                // paddingTop: '5px',\r\n                                                // paddingBottom: '10px',\r\n                                                textAlign: 'left',\r\n                                                padding: '15px'\r\n                                            },\r\n                                            actionsCellStyle: {\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                                width: 20\r\n                                            }\r\n                                        }}\r\n                                        actions={[]}\r\n                                        localization={{\r\n                                            body: {\r\n                                                emptyDataSourceMessage: 'No records to display',\r\n                                                filterRow: {\r\n                                                    filterTooltip: 'Filter'\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                    /> */}\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <MainCard>\r\n                                        <DataGrid\r\n                                            sx={{\r\n                                                boxShadow: 2,\r\n                                                border: 2,\r\n                                                borderColor: 'primary.light'\r\n                                            }}\r\n                                            rows={ItemTable.rows}\r\n                                            columns={ItemTable.columns}\r\n                                            hideFooter={true}\r\n                                            autoHeight={true}\r\n                                            disableColumnMenu={true}\r\n                                            getRowId={handleGetRowId}\r\n                                            // rowSpacingType='border'\r\n                                        />\r\n                                    </MainCard>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MoEntry;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useMediaQuery, useScrollTrigger } from '@mui/material';\r\n\r\n// project import\r\nimport { useSelector } from 'store';\r\n\r\n// ==============================|| elevation scroll ||============================== //\r\nfunction ElevationScroll({ children, window }) {\r\n    const theme = useTheme();\r\n    const matchDown = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const { drawerOpen } = useSelector((state) => state.menu);\r\n\r\n    const fullStickyLeft = drawerOpen ? 281 : 42;\r\n\r\n    const responsiveTop = matchDown ? 80 : 83;\r\n    const responsiveRight = matchDown ? 38 : 41;\r\n    const responsiveLeft = matchDown ? 38 : fullStickyLeft;\r\n\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 180,\r\n        target: window || undefined\r\n    });\r\n\r\n    const darkBorder = theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.grey[200];\r\n\r\n    return React.cloneElement(children, {\r\n        style: {\r\n            backgroundColor: theme.palette.background.default,\r\n            zIndex: 1099,\r\n            borderTop: trigger ? '1px solid' : 'none',\r\n            borderBottom: trigger ? '1px solid' : 'none',\r\n            borderColor: trigger ? darkBorder : '',\r\n            position: trigger ? 'fixed' : 'relative',\r\n\r\n            top: trigger ? responsiveTop : 'auto',\r\n            right: trigger ? responsiveRight : 'auto',\r\n            left: trigger ? responsiveLeft : 'auto'\r\n        }\r\n    });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n    children: PropTypes.node,\r\n    window: PropTypes.object\r\n};\r\n\r\nexport default ElevationScroll;\r\n","\r\nexport function validateLookup(stateProps, value, listForSearch, headerValuesList, lookupValuesList, msgProp, callApi, setLookUpData) {\r\n\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            value = value.toLowerCase()\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toString().toLowerCase().indexOf(value) > -1 ||\r\n                    x[lookupValuesList[1]].toString().toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty((prevState) => ({\r\n                        ...prevState,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    }));\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        stateProps.Header[headerValuesList[i]] = \"\"\r\n                        stateProps.setHeader({ ...stateProps.Header })\r\n                    }\r\n                    console.log({ Header: stateProps.Header })\r\n                    // stateProps.setHeader({ ...stateProps.Header })\r\n                }\r\n                else if (filteredVal.length && value) {\r\n                    if (callApi) {\r\n                        switch (msgProp) {\r\n                            case \"Customers\":\r\n                                setLookUpData(null, filteredVal[0], \"Customers\")\r\n                                break;\r\n                            case \"Item\":\r\n                                setLookUpData(null, filteredVal[0], \"Item\")\r\n                                break;\r\n                            case \"Routing\":\r\n                                setLookUpData(null, filteredVal[0], \"Routing\")\r\n                                break;\r\n                            default:\r\n                                setLookUpData(\"donor\", filteredVal[0], headerValuesList, lookupValuesList)\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else {\r\n                        for (var i = 0; i < headerValuesList.length; i++) {\r\n                            stateProps.Header[headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                            stateProps.setHeader({ ...stateProps.Header })\r\n                        }\r\n\r\n                        if (msgProp === 'Bank') {\r\n                            // const dispatch = useDispatch();\r\n                            setLookUpData(filteredVal[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                stateProps.Header[headerValuesList[i]] = \"\";\r\n                stateProps.setHeader({ ...stateProps.Header })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateLookupinJV(stateProps, value, listForSearch, rowData, filterFlag, headerValuesList, lookupValuesList, msgProp) {\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toLowerCase().indexOf(value) > -1 || x[lookupValuesList[1]].toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty({\r\n                        ...stateProps.property,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    });\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                        stateProps.setJV({ ...stateProps.JV })\r\n                    }\r\n                    stateProps.setJV({ ...stateProps.JV })\r\n                }\r\n                else if (filteredVal.length && value && filterFlag === false) {\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                        stateProps.setJV({ ...stateProps.JV });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                let index = stateProps.JV.indexOf(rowData);\r\n                stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                stateProps.setJV({ ...stateProps.JV })\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}