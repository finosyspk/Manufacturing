{"version":3,"sources":["views/Transactions/MoRecepit/index.js","ui-component/ElevationScroll.js","utilities/validateLookup.js"],"names":["MoRecepit","lookupTxtField","useState","isDisable","setisDisable","ReceiptCode","setReceiptCode","isLocationLookUp","setIsLocationLookUp","isMoNumberLookUp","setIsMoNumberLookUp","setIsEditorView","selectLookupVal","setSelected","dosaveFunction","setLoadingOnSave","setSearchRows","setFilter","FormName","lookupSelectRow","TransNo","TransDate","Date","TransType","MOTransNo","LocationCode","Location","ItemCode","Item","UOMCode","UOM","UnitQuantity","Quantity","BaseQuantity","Header","setHeader","registerNotOpen","property","setProperty","columns","title","field","align","width","render","rowData","value","CItemCode","disabled","CItemName","rows","ItemTable","SetItemTable","cellStyle","border","paddingTop","paddingBottom","headerStyle","fontWeight","background","LocationName","locationLookupList","setLocationLookupList","MOCode","MOdate","MONumberLookupList","setMONumberLookupList","dispatch","useDispatch","lookupRes","useSelector","AllActionsRes","useEffect","error","nullList","singleList","Success","Message","Detail","handleClose","prevstate","msg","HandleSave","lookupData2","MODetail","console","log","undefined","open","severity","payload","createOrUpdate","prevState","handleSnakeBarClose","changeLookupVal","setLookUpData","e","Lookupname","prev","getReceiptDetailData","getLocationLookUpData","getInventoryLookupData","getMoNumberLookUpData","getLookupData","getLookup2Data","lookupDataInventory","lookupData","MO","item","xs","close","onClick","container","justify","alignItems","justifyContent","goBack","clearAll_OnClick","clearAll","newList","saveAndClose","viewList","saveAndClose_OnClick","FormID","submitButton","SaveButton","Button2","submit","SaveButton_OnClick","submitButton_OnClick","postAndSave","Button2_OnClick","printVoucher","spacing","label","id","Change","date","name","reference","lookupOpen","onBlurDiv","onFocus","onBlur","setTimeout","validateLookup","propertyName","listForSearch","setSearchRowProp","searchResult","setFilterProp","filter","setLookupEnable","bomCodeLookUp","lookupValuesList","symbol","target","data","icons","options","showTitle","actionsColumnIndex","pageSize","pageSizeOptions","search","paddingLeft","paddingRight","textAlign","actionsCellStyle","actions","localization","body","emptyDataSourceMessage","filterRow","filterTooltip","Details","dialog","DialogClose","AddData","EditData","row","SetRowDataID","ID","ViewData","FormNameID","FormCode","FormNameIDValue","CodeMsg","getSingleList","isPostButton","ElevationScroll","children","window","theme","useTheme","matchDown","useMediaQuery","breakpoints","down","drawerOpen","state","menu","responsiveTop","responsiveRight","responsiveLeft","trigger","useScrollTrigger","disableHysteresis","threshold","darkBorder","palette","mode","dark","grey","React","cloneElement","style","backgroundColor","default","zIndex","borderTop","borderBottom","borderColor","position","top","right","left","stateProps","headerValuesList","msgProp","callApi","toLowerCase","filteredVal","x","i","toString","indexOf","length"],"mappings":"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","file":"static/js/12.e98c6dda.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Grid, Card, Button, CardActions, Divider, CardContent } from '@mui/material';\r\nimport ReusableDialog from '../../../ui-component/globalcomponents/ReusableDialog';\r\nimport MaterialTable from 'material-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getInventoryLookupData, getLookupData, getLookup2Data, createOrUpdate, getSingleList, nullList } from '../../../store/actions/index';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport GlobalHeader from 'ui-component/globalcomponents/GlobalHeader/GlobalHeader';\r\nimport ElevationScroll from 'ui-component/ElevationScroll';\r\nimport { AddItemPage, ProductsPage } from 'ui-component/globalcomponents';\r\nimport icons from 'ui-component/material-icons'\r\n\r\nimport {\r\n    InputText,\r\n    CheckboxButton,\r\n    Register,\r\n    Growl,\r\n    Loader,\r\n    InputCode,\r\n    InputNumber,\r\n    DropDownLookup,\r\n    FormButton,\r\n    DropDown,\r\n    InputDate,\r\n    PopupLookup,\r\n    InputTime\r\n} from '../../../ui-component/globalcomponents';\r\nimport { validateLookup } from '../../../utilities/validateLookup';\r\n\r\n// let FormName = 'MOReceipt'\r\n\r\nconst MoRecepit = () => {\r\n    const [isDisable, setisDisable] = useState(false);\r\n    const [onBlurDisable, setOnBlurDisable] = useState(false);\r\n    const [ReceiptCode, setReceiptCode] = useState('');\r\n    const [isLocationLookUp, setIsLocationLookUp] = useState(false);\r\n    const [isMoNumberLookUp, setIsMoNumberLookUp] = useState(false);\r\n    const [IsEditorView, setIsEditorView] = useState(false);\r\n\r\n    const [selectLookupVal, setSelected] = useState(true);\r\n    const [saveFunction, dosaveFunction] = useState(0);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [searchedRows, setSearchRows] = useState([]);\r\n    const [filter, setFilter] = useState(false);\r\n\r\n    const FormName = 'MOReceipt';\r\n    var lookupSelectRow = false;\r\n    var lookupTxtField;\r\n\r\n    const [Header, setHeader] = useState({\r\n        TransNo: '',\r\n        TransDate: new Date(),\r\n        TransType: 'MR',\r\n        MOTransNo: '',\r\n        LocationCode: '',\r\n        Location: '',\r\n        ItemCode: '',\r\n        Item: '',\r\n        UOMCode: '',\r\n        UOM: '',\r\n        UnitQuantity: 0,\r\n        Quantity: 0,\r\n        BaseQuantity: 0\r\n    });\r\n\r\n    const deleteProductHandler = (id) => {\r\n        setProductsData(productsData.filter((item) => item.id !== id));\r\n    };\r\n\r\n    const [property, setProperty] = useState({\r\n        registerNotOpen: false\r\n    });\r\n\r\n    const [ItemTable, SetItemTable] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Item Code',\r\n                field: 'CItemCode',\r\n                align: 'left',\r\n                width: '20%',\r\n                render: (rowData) => <InputText value={rowData.CItemCode} disabled={isDisable} />\r\n            },\r\n\r\n            {\r\n                title: 'Item',\r\n                field: 'CItemName',\r\n                align: 'left',\r\n                width: '40%',\r\n                render: (rowData) => <InputText value={rowData.CItemName} disabled={isDisable} />\r\n            },\r\n            {\r\n                title: 'UOM',\r\n                field: 'UOM',\r\n                align: 'left',\r\n                width: '20%',\r\n                render: (rowData) => <InputText value={rowData.UOM} disabled={isDisable} />\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                field: 'Quantity',\r\n                align: 'left',\r\n                width: '20%',\r\n                render: (rowData) => <InputText value={rowData.Quantity} disabled={isDisable} />\r\n            }\r\n        ],\r\n        rows: []\r\n    });\r\n\r\n    const [locationLookupList, setLocationLookupList] = useState({\r\n        columns: [\r\n            {\r\n                title: 'Location Code',\r\n                field: 'LocationCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'Location',\r\n                field: 'LocationName',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            }\r\n        ],\r\n        rows: [\r\n            { LocationCode: '001', LocationName: 'Factory' },\r\n            { LocationCode: '002', LocationName: 'WareHouse' },\r\n            { LocationCode: '003', LocationName: 'Plant' }\r\n        ]\r\n    });\r\n\r\n    const [MONumberLookupList, setMONumberLookupList] = useState({\r\n        columns: [\r\n            {\r\n                title: 'MO Number',\r\n                field: 'MOCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'MO Date',\r\n                field: 'MOdate',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            },\r\n            {\r\n                title: 'Item Code',\r\n                field: 'ItemCode',\r\n                cellStyle: { border: '1px solid #ccc8c8', paddingTop: 1, paddingBottom: 1, width: '35%' },\r\n                headerStyle: { border: '1px solid #ccc8c8', fontWeight: 'bolder', background: '#e3dede', paddingTop: 1, width: '35%' }\r\n            }\r\n        ],\r\n        rows: [\r\n            { MOCode: 'Buttons', MOdate: 'Buttons', ItemCode: 'NOS' },\r\n            { MOCode: 'F-001', MOdate: 'Fabric 12/16', ItemCode: 'METER' },\r\n            { MOCode: 'MENS TROUSER', MOdate: 'MENS TROUSER', ItemCode: 'NOS' },\r\n            { MOCode: 'MENS T-SHIRT', MOdate: 'MENS T-SHIRT', ItemCode: 'NOS' }\r\n        ]\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const lookupRes = useSelector(({ lookupRes }) => lookupRes);\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                setHeader(AllActionsRes?.singleList?.Message.Header);\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: AllActionsRes?.singleList?.Message.Detail\r\n                });\r\n                dispatch(nullList());\r\n            } else {\r\n                // setOnBlueDisable(false);\r\n            }\r\n        }\r\n    }, [AllActionsRes]);\r\n\r\n    const DiloagBody = () => {\r\n        return (\r\n            <>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={5}>\r\n                        <InputText\r\n                            label={'Shift Head ID'}\r\n                            type={'text'}\r\n                            value={Header.ShiftHead}\r\n                            Change={(e) => setHeader({ ...Header, ShiftHead: e.target.value })}\r\n                            Blur={HandleOnBlur}\r\n                            disabled={onBlurDisable || isDisable}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <InputText\r\n                            disabled={isDisable}\r\n                            label={'Shift Head Name'}\r\n                            type={'text'}\r\n                            value={Header.ShiftName}\r\n                            Change={(e) => setHeader({ ...Header, ShiftName: e.target.value })}\r\n                        // disable={isDisable}\r\n                        />\r\n                    </Grid>\r\n                    {/* <Grid item xs={1}>\r\n\r\n                </Grid> */}\r\n                    <Grid item xs={1}>\r\n                        <CheckboxButton\r\n                            label={'Active'}\r\n                            value={Header.IsActive}\r\n                            Change={(e) => setHeader({ ...Header, IsActive: e.target.checked })}\r\n                            disabled={isDisable}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <InputTime\r\n                            label={'Day Start At'}\r\n                            value={Header.StartAt}\r\n                            Change={(e) => setHeader({ ...Header, StartAt: e.target.value })}\r\n                            disabled={isDisable}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <DropDown\r\n                            label={'Total Shifts'}\r\n                            list={[1, 2, 3]}\r\n                            id={'totalShifts'}\r\n                            Change={(e) => {\r\n                                setHeader({ ...Header, Shifts: e.target.value });\r\n                            }}\r\n                            disabled={isDisable}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <MaterialTable\r\n                            columns={ItemTable.columns}\r\n                            data={ItemTable.rows}\r\n                            style={{\r\n                                border: 'none',\r\n                                backgroundColor: 'transparent',\r\n                                boxShadow: 'none',\r\n                                paddingTop: '0px !important'\r\n                            }}\r\n                            options={{\r\n                                showTitle: false,\r\n                                paging: false,\r\n                                actionsColumnIndex: -1,\r\n                                pageSize: 5,\r\n                                pageSizeOptions: [5, 10, 20, 30],\r\n                                search: false,\r\n                                loadingType: 'linear',\r\n                                headerStyle: {\r\n                                    fontWeight: 'bold',\r\n                                    paddingLeft: '10px',\r\n                                    paddingRight: '0px',\r\n                                    paddingTop: '0px',\r\n                                    paddingBottom: '0px',\r\n                                    textAlign: 'left'\r\n                                },\r\n                                actionsCellStyle: {\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    width: 20\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const HandleOnBlur = () => {\r\n        let payload = {\r\n            FormNameID: FormName,\r\n            FormCode: 'ShiftHead'\r\n            // FormNameIDValue: Header.ShiftHead\r\n        };\r\n        setOnBlurDisable(true);\r\n        // dispatch(getSingleList(payload))\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: false,\r\n            msg: ''\r\n        }));\r\n\r\n        setHeader({\r\n            TransNo: '',\r\n            TransDate: new Date(),\r\n            TransType: 'MR',\r\n            MOTransNo: '',\r\n            LocationCode: '',\r\n            Location: '',\r\n            ItemCode: '',\r\n            Item: '',\r\n            UOMCode: '',\r\n            UOM: '',\r\n            UnitQuantity: 0,\r\n            Quantity: 0,\r\n            BaseQuantity: 0\r\n        });\r\n\r\n        // SetItemTable((Prev) => ({\r\n        //   ...Prev,\r\n        //   rows: []\r\n        // }))\r\n\r\n        setisDisable(false);\r\n        // setOnBlurDisable(false)\r\n    };\r\n\r\n    const addData = (data) => {\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true\r\n        }));\r\n        getLocationLookUpData();\r\n        getMoNumberLookUpData();\r\n\r\n    };\r\n\r\n    const editData = (row) => { // Not in Use\r\n        // setHeader(row);\r\n        // console.log('row', row);\r\n\r\n        // setProperty((prevstate) => ({\r\n        //     ...prevstate,\r\n        //     registerNotOpen: true,\r\n        //     msg: ''\r\n        // }));\r\n        // // setOnBlurDisable(true)\r\n        // getLocationLookUpData();\r\n        // getMoNumberLookUpData();\r\n\r\n    };\r\n\r\n    const viewData = (row) => {\r\n        setIsEditorView(true);\r\n        let payload = {\r\n            FormNameID: 'MOReceipt',\r\n            FormCode: 'TransNo',\r\n            FormNameIDValue: row.TransNo\r\n        };\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            CodeMsg: ''\r\n        }));\r\n        dispatch(getSingleList(payload));\r\n        setProperty((prevstate) => ({\r\n            ...prevstate,\r\n            registerNotOpen: true,\r\n        }));\r\n        setisDisable(true);\r\n    };\r\n\r\n    const SetRowDataID = (data) => {\r\n        setReceiptCode(data.MOTransNo);\r\n    };\r\n\r\n    const validationOnSave = () => {\r\n        if (Header.Location === '' || Header.Location === undefined || Header.Location === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Location Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.Item === '' || Header.Item === undefined || Header.Item === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Item Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.Quantity === 0 || Header.Quantity === undefined || Header.Quantity === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty quantity Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.UOM === 0 || Header.UOM === undefined || Header.UOM === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty UoM Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else if (Header.MOTransNo === 0 || Header.MOTransNo === undefined || Header.MOTransNo === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty MO Number Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const HandleSave = () => {\r\n        let Detail = lookupRes?.lookupData2?.Message?.MODetail;\r\n        console.log('Detail', Detail);\r\n\r\n        if (validationOnSave()) {\r\n            let payload = {\r\n                FormName,\r\n                Header,\r\n                Detail\r\n            };\r\n\r\n            dispatch(createOrUpdate(payload));\r\n            setHeader({\r\n                TransNo: '',\r\n                TransDate: new Date(),\r\n                TransType: 'MR',\r\n                MOTransNo: '',\r\n                LocationCode: '',\r\n                Location: '',\r\n                ItemCode: '',\r\n                Item: '',\r\n                UOMCode: '',\r\n                UOM: '',\r\n                UnitQuantity: 0,\r\n                Quantity: 0,\r\n                BaseQuantity: 0\r\n            });\r\n\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                registerNotOpen: false,\r\n                open: false,\r\n                severity: null,\r\n                msg: ''\r\n            }));\r\n        }\r\n\r\n        // SetItemTable(prev => ({\r\n        //     ...prev,\r\n        //     rows: []\r\n        // }))\r\n    };\r\n\r\n    const clearAll = () => {\r\n        setHeader(\r\n            {\r\n                ...Header,\r\n                TransDate: new Date(),\r\n                TransType: 'MR',\r\n                Quantity: 0,\r\n                BaseQuantity: 0\r\n            }\r\n        )\r\n    }\r\n\r\n    const handleSnakeBarClose = () => {\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    const changeLookupVal = (property, value) => {\r\n        lookupTxtField = value;\r\n        lookupSelectRow = false;\r\n        // Header[property] = value;\r\n        // setHeader({ ...Header })\r\n    };\r\n\r\n    const setLookUpData = (e, rowData, Lookupname) => {\r\n        if (Lookupname == 'Location') {\r\n            setHeader({\r\n                ...Header,\r\n                Location: rowData?.Location,\r\n                LocationCode: rowData?.LocationCode\r\n            });\r\n            setIsLocationLookUp(false);\r\n        } else if (Lookupname == 'MONumber') {\r\n            setHeader((prev) => ({\r\n                ...prev\r\n            }));\r\n            setHeader({\r\n                ...Header,\r\n                TransNo: rowData.TransNo,\r\n                TransDate: rowData.TransDate,\r\n                MOTransNo: rowData.TransNo,\r\n                ItemCode: rowData.ItemCode,\r\n                Item: rowData.Item,\r\n                UOMCode: rowData.UOMCode,\r\n                UOM: rowData.UOM,\r\n                UnitQuantity: rowData.UnitQuantity,\r\n                Quantity: rowData.Quantity,\r\n                BaseQuantity: rowData.Quantity * rowData.UnitQuantity\r\n            });\r\n            getReceiptDetailData(rowData.TransNo);\r\n            setIsMoNumberLookUp(false);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    const getLocationLookUpData = () => {\r\n        dispatch(getInventoryLookupData(`FormName=${'Locations'}`));\r\n    };\r\n\r\n    const getMoNumberLookUpData = () => {\r\n        dispatch(getLookupData(`FormName=${FormName}`));\r\n    };\r\n    const getReceiptDetailData = (TransNo) => {\r\n        dispatch(getLookup2Data(`FormName=MOReceiptDetail&MOTransNo=${TransNo}`));\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //         // getBoMLookUpData()\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupDataInventory) {\r\n            if (lookupRes?.lookupDataInventory.Success === true) {\r\n                setLocationLookupList(lookupRes.lookupDataInventory.Message.Location);\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupDataInventory]);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupData) {\r\n            if (lookupRes?.lookupData?.Success === true) {\r\n                console.log(lookupRes?.lookupData?.Message.MO);\r\n                setMONumberLookupList(lookupRes?.lookupData?.Message.MO);\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupData]);\r\n\r\n    useEffect(() => {\r\n        if (lookupRes?.lookupData2) {\r\n            if (lookupRes?.lookupData2?.Success === true) {\r\n                SetItemTable({\r\n                    ...ItemTable,\r\n                    rows: lookupRes?.lookupData2?.Message?.MODetail\r\n                });\r\n            } else {\r\n                setProperty({\r\n                    open: true,\r\n                    severity: 'error',\r\n                    msg: 'Some Thing Went Wrong'\r\n                });\r\n            }\r\n        }\r\n    }, [lookupRes?.lookupData2]);\r\n\r\n    return (\r\n        <>\r\n            <Grid item xs={12}>\r\n                <Growl property={property} close={handleSnakeBarClose} onClick={handleSnakeBarClose} />\r\n            </Grid>\r\n            {!property.registerNotOpen ? (\r\n                <Grid container>\r\n                    <Register\r\n                        Details={'MO Recepit List'}\r\n                        FormName={FormName}\r\n                        // FormID={constant.GeneralEntryFormID}\r\n                        // props={props}\r\n                        dialog={true}\r\n                        DialogClose={handleClose}\r\n                        AddData={addData}\r\n                        EditData={editData}\r\n                        // payload={payload}\r\n                        // saveFunction={saveFunction}\r\n                        SetRowDataID={SetRowDataID}\r\n                        // hideDialog={hideDialog}\r\n                        dosaveFunction={dosaveFunction}\r\n                        setLoadingOnSave={setLoadingOnSave}\r\n                        ID={ReceiptCode}\r\n                        ViewData={viewData}\r\n                        FormID={FormName}\r\n                        FormCode={'MOTransNo'}\r\n                        isPostButton={true}\r\n                    // type='JV'\r\n                    // postingIcons={false}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <>\r\n                    <Grid container justify=\"center\">\r\n                        <Grid item xs={12}>\r\n                            <MainCard>\r\n                                <ElevationScroll>\r\n                                    <CardActions>\r\n                                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                            <Grid item>\r\n                                                <GlobalHeader\r\n                                                    // loading={LoadingOnSave}\r\n                                                    // goBack={() => goback()}\r\n                                                    goBack={() => handleClose()}\r\n                                                    clearAll_OnClick={() => clearAll()}\r\n                                                    clearAll={property.newList}\r\n                                                    saveAndClose={!property.viewList}\r\n                                                    saveAndClose_OnClick={() => {\r\n                                                        saveAndClose();\r\n                                                    }}\r\n                                                    FormID={1}\r\n                                                    submitButton={!property.viewList}\r\n                                                    SaveButton={!property.viewList}\r\n                                                    Button2={!property.newList}\r\n                                                    submit={!property.viewList}\r\n                                                    SaveButton_OnClick={() => HandleSave()}\r\n                                                    submitButton_OnClick={() => postAndSave()}\r\n                                                    Button2_OnClick={() => printVoucher()}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                </ElevationScroll>\r\n                                <Divider />\r\n                                <CardContent>\r\n                                    <Grid container spacing={2} justify=\"center\">\r\n                                        <Grid item xs={4}>\r\n                                            <InputText label=\"MO Recepit\" value={Header.TransNo} />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <InputDate\r\n                                                value={Header.TransDate}\r\n                                                id=\"ObseleteDate\"\r\n                                                Change={(date) => setHeader({ ...Header, TransDate: date })}\r\n                                                // Blur={() => null}\r\n                                                disabled={isDisable}\r\n                                                label=\"Recepit Date*\"\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                disabled={isDisable}\r\n                                                label=\"Location*\"\r\n                                                name=\"Location\"\r\n                                                reference={'Location'}\r\n                                                onClick={() => setIsLocationLookUp(true)}\r\n                                                lookupOpen={isLocationLookUp}\r\n                                                columns={locationLookupList.columns}\r\n                                                rows={locationLookupList?.rows}\r\n                                                onBlurDiv={() => setIsLocationLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup(\r\n                                                            { setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow },\r\n                                                            lookupTxtField,\r\n                                                            locationLookupList.rows,\r\n                                                            ['LocationCode', 'Location'],\r\n                                                            ['Code', 'Description'],\r\n                                                            'Location Code'\r\n                                                        );\r\n                                                        setIsLocationLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"LocationCode\"\r\n                                                listForSearch={locationLookupList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                // rows={filter ? searchedRows : bomCode.rows}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                value={Header.Location}\r\n                                                lookupValuesList={['LocationCode', 'Location']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'Location')}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <DropDownLookup\r\n                                                // disabled={property.viewList}\r\n                                                disabled={isDisable}\r\n                                                label=\"MO Number*\"\r\n                                                reference={'MO Number'}\r\n                                                onClick={() => setIsMoNumberLookUp(true)}\r\n                                                lookupOpen={isMoNumberLookUp}\r\n                                                columns={MONumberLookupList?.columns}\r\n                                                rows={MONumberLookupList?.rows}\r\n                                                onBlurDiv={() => setIsMoNumberLookUp(false)}\r\n                                                onFocus={() => setSelected(false)}\r\n                                                onBlur={(e) => {\r\n                                                    setTimeout(() => {\r\n                                                        setFilter(false);\r\n                                                        validateLookup(\r\n                                                            { setProperty, property, Header, setHeader, selectLookupVal, lookupSelectRow },\r\n                                                            lookupTxtField,\r\n                                                            MONumberLookupList.rows,\r\n                                                            ['Mo Number', 'Mo, Date, Item Code'],\r\n                                                            ['Code', 'Description, Item'],\r\n                                                            'MO Number'\r\n                                                        );\r\n                                                        setIsMoNumberLookUp(false);\r\n                                                    }, 200);\r\n                                                }}\r\n                                                changeLookupVal={changeLookupVal}\r\n                                                propertyName=\"Mo Number\"\r\n                                                listForSearch={MONumberLookupList?.rows}\r\n                                                setSearchRowProp={(searchResult) => {\r\n                                                    setSearchRows(searchResult);\r\n                                                }}\r\n                                                // rows={filter ? searchedRows : bomCode.rows}\r\n                                                setFilterProp={(filter) => setFilter(filter)}\r\n                                                setLookupEnable={() => setProperty((prevState) => ({ ...prevState, bomCodeLookUp: true }))}\r\n                                                value={Header.MOTransNo}\r\n                                                lookupValuesList={['MO Mumber', 'MO Date', 'Item Code']}\r\n                                                setLookUpData={(e, rowData) => setLookUpData(e, rowData, 'MONumber')}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <InputText\r\n                                                value={Header.Item}\r\n                                                // Change={(e) => setHeader({ ...Header, StockMethod: e.target.value })}\r\n                                                label=\"Item Name\"\r\n                                                disabled={isDisable}\r\n                                            // disabled={property.viewList}\r\n                                            // list={stockMethodsList}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <InputNumber\r\n                                                label=\"Recepit Quantity\"\r\n                                                name=\"Quantity\"\r\n                                                value={Header.Quantity}\r\n                                                symbol={false}\r\n                                                Change={(e) => setHeader({ ...Header, Quantity: e.target.value, BaseQuantity: e.target.value * Header.UnitQuantity })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={4}>\r\n                                            <InputText\r\n                                                label=\"UoM\"\r\n                                                value={Header.UOM}\r\n                                                Change={(e) => setHeader({ ...Header, UOM: e.target.value })}\r\n                                                disabled={isDisable}\r\n                                            />\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={4}>\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={HandleSave} disabled={isDisable}>\r\n                                                Save\r\n                                            </Button>\r\n                                            <Button style={{ marginLeft: 30 }} variant=\"outlined\" onClick={handleClose}>\r\n                                                Cancel\r\n                                            </Button>\r\n                                        </Grid> */}\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </MainCard>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <MainCard>\r\n                        <Grid container spacing={2} alignItems=\"center\">\r\n                            {/* <Grid item xs={12}>\r\n                                <ProductsPage\r\n                                    columns={ItemTable.columns}\r\n                                    rows={ItemTable.rows}\r\n                                    deleteProductHandler={deleteProductHandler}\r\n                                    allowDelete={false}\r\n                                />\r\n                            </Grid> */}\r\n\r\n                            <Grid item xs={12}>\r\n                                <MaterialTable\r\n                                    // isLoading={loading}\r\n                                    columns={ItemTable.columns}\r\n                                    data={ItemTable.rows}\r\n                                    icons={icons}\r\n                                    options={{\r\n                                        showTitle: false,\r\n                                        actionsColumnIndex: -1,\r\n                                        pageSize: 5,\r\n                                        pageSizeOptions: [5, 10, 20, 30],\r\n                                        search: false,\r\n                                        headerStyle: {\r\n                                            fontWeight: 'bold',\r\n                                            paddingLeft: '10px',\r\n                                            paddingRight: '0px',\r\n                                            paddingTop: '0px',\r\n                                            paddingBottom: '0px',\r\n                                            textAlign: 'left'\r\n\r\n                                        },\r\n                                        actionsCellStyle: {\r\n                                            justifyContent: 'center', alignItems: 'center', width: 20\r\n                                        }\r\n                                    }}\r\n                                    actions={[\r\n\r\n\r\n                                        // {\r\n                                        //     icon: DeleteIcon,\r\n                                        //     tooltip: 'Delete',\r\n                                        //     hidden: property.viewList,\r\n                                        //     onClick: (event, rowData) => {\r\n                                        //         onClickDelete(rowData)\r\n                                        //     },\r\n\r\n                                        // },\r\n\r\n\r\n                                        // rowData => ({\r\n                                        //     icon: BusinessCenterIcon,\r\n                                        //     hidden: rowData.ItemTrackBy !== 'None' ? false : true,\r\n                                        //     disabled: rowData.UOM === \"\" ? true : false,\r\n                                        //     tooltip: 'View Batch',\r\n                                        //     // disabled: rowData.SubmitStatus === 1?true:false,\r\n                                        //     // onClick: (event, rowData) => {\r\n                                        //     //     openBatchDetails(event, rowData)\r\n                                        //     // },\r\n\r\n\r\n                                        // }),\r\n\r\n                                    ]}\r\n                                    localization={{\r\n                                        body: {\r\n                                            emptyDataSourceMessage: 'No records to display',\r\n                                            filterRow: {\r\n                                                filterTooltip: 'Filter'\r\n                                            }\r\n                                        }\r\n                                    }}\r\n\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </MainCard>\r\n                    {/* <br />\r\n                    <MaterialTable\r\n                        // isLoading={loading}\r\n                        style={{ padding: '10px' }}\r\n                        columns={ItemTable.columns}\r\n                        data={ItemTable.rows}\r\n                        options={{\r\n                            showTitle: false,\r\n                            paging: false,\r\n                            actionsColumnIndex: -1,\r\n                            pageSize: 5,\r\n                            pageSizeOptions: [5, 10, 20, 30],\r\n                            search: false,\r\n                            loadingType: 'linear',\r\n                            headerStyle: {\r\n                                fontWeight: 'bold',\r\n                                paddingLeft: '10px',\r\n                                paddingRight: '0px',\r\n                                paddingTop: '0px',\r\n                                paddingBottom: '0px',\r\n                                textAlign: 'left'\r\n                            },\r\n                            actionsCellStyle: {\r\n                                justifyContent: 'center',\r\n                                alignItems: 'center',\r\n                                width: 20\r\n                            }\r\n                        }}\r\n                        actions={[\r\n                            {\r\n                                icon: 'delete',\r\n                                tooltip: 'Delete',\r\n                                hidden: property.viewList\r\n                                // onClick: (event, rowData) => {\r\n                                //   onClickDelete(rowData)\r\n                                // },\r\n                            }\r\n                        ]}\r\n                        localization={{\r\n                            body: {\r\n                                emptyDataSourceMessage: 'No records to display',\r\n                                filterRow: {\r\n                                    filterTooltip: 'Filter'\r\n                                }\r\n                            }\r\n                        }}\r\n                    /> */}\r\n                </>\r\n            )}\r\n            {/* </Grid> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MoRecepit;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { useMediaQuery, useScrollTrigger } from '@mui/material';\r\n\r\n// project import\r\nimport { useSelector } from 'store';\r\n\r\n// ==============================|| elevation scroll ||============================== //\r\nfunction ElevationScroll({ children, window }) {\r\n    const theme = useTheme();\r\n    const matchDown = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const { drawerOpen } = useSelector((state) => state.menu);\r\n\r\n    const fullStickyLeft = drawerOpen ? 281 : 42;\r\n\r\n    const responsiveTop = matchDown ? 80 : 83;\r\n    const responsiveRight = matchDown ? 38 : 41;\r\n    const responsiveLeft = matchDown ? 38 : fullStickyLeft;\r\n\r\n    const trigger = useScrollTrigger({\r\n        disableHysteresis: true,\r\n        threshold: 180,\r\n        target: window || undefined\r\n    });\r\n\r\n    const darkBorder = theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.grey[200];\r\n\r\n    return React.cloneElement(children, {\r\n        style: {\r\n            backgroundColor: theme.palette.background.default,\r\n            zIndex: 1099,\r\n            borderTop: trigger ? '1px solid' : 'none',\r\n            borderBottom: trigger ? '1px solid' : 'none',\r\n            borderColor: trigger ? darkBorder : '',\r\n            position: trigger ? 'fixed' : 'relative',\r\n\r\n            top: trigger ? responsiveTop : 'auto',\r\n            right: trigger ? responsiveRight : 'auto',\r\n            left: trigger ? responsiveLeft : 'auto'\r\n        }\r\n    });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n    children: PropTypes.node,\r\n    window: PropTypes.object\r\n};\r\n\r\nexport default ElevationScroll;\r\n","\r\nexport function validateLookup(stateProps, value, listForSearch, headerValuesList, lookupValuesList, msgProp, callApi, setLookUpData) {\r\n\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            value = value.toLowerCase()\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toString().toLowerCase().indexOf(value) > -1 ||\r\n                    x[lookupValuesList[1]].toString().toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty((prevState) => ({\r\n                        ...prevState,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    }));\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        stateProps.Header[headerValuesList[i]] = \"\"\r\n                        stateProps.setHeader({ ...stateProps.Header })\r\n                    }\r\n                    console.log({ Header: stateProps.Header })\r\n                    // stateProps.setHeader({ ...stateProps.Header })\r\n                }\r\n                else if (filteredVal.length && value) {\r\n                    if (callApi) {\r\n                        switch (msgProp) {\r\n                            case \"Customers\":\r\n                                setLookUpData(null, filteredVal[0], \"Customers\")\r\n                                break;\r\n                            case \"Item\":\r\n                                setLookUpData(null, filteredVal[0], \"Item\")\r\n                                break;\r\n                            case \"Routing\":\r\n                                setLookUpData(null, filteredVal[0], \"Routing\")\r\n                                break;\r\n                            default:\r\n                                setLookUpData(\"donor\", filteredVal[0], headerValuesList, lookupValuesList)\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else {\r\n                        for (var i = 0; i < headerValuesList.length; i++) {\r\n                            stateProps.Header[headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                            stateProps.setHeader({ ...stateProps.Header })\r\n                        }\r\n\r\n                        if (msgProp === 'Bank') {\r\n                            // const dispatch = useDispatch();\r\n                            setLookUpData(filteredVal[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                stateProps.Header[headerValuesList[i]] = \"\";\r\n                stateProps.setHeader({ ...stateProps.Header })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateLookupinJV(stateProps, value, listForSearch, rowData, filterFlag, headerValuesList, lookupValuesList, msgProp) {\r\n    if (stateProps.lookupSelectRow === false) {\r\n        if (value !== undefined) {\r\n            if (!stateProps.selectLookupVal) {\r\n                let filteredVal = listForSearch.filter((x, i) => x[lookupValuesList[0]].toLowerCase().indexOf(value) > -1 || x[lookupValuesList[1]].toLowerCase().indexOf(value) > -1)\r\n                if (filteredVal.length === 0 && value) {\r\n                    stateProps.setProperty({\r\n                        ...stateProps.property,\r\n                        open: true,\r\n                        severity: 'error',\r\n                        msg: `Invalid ${msgProp}`,\r\n                    });\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                        stateProps.setJV({ ...stateProps.JV })\r\n                    }\r\n                    stateProps.setJV({ ...stateProps.JV })\r\n                }\r\n                else if (filteredVal.length && value && filterFlag === false) {\r\n                    for (let i = 0; i < headerValuesList.length; i++) {\r\n                        let index = stateProps.JV.indexOf(rowData);\r\n                        stateProps.JV[index][headerValuesList[i]] = filteredVal[0][lookupValuesList[i]]\r\n                        stateProps.setJV({ ...stateProps.JV });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (value === '') {\r\n            for (let i = 0; i < headerValuesList.length; i++) {\r\n                let index = stateProps.JV.indexOf(rowData);\r\n                stateProps.JV[index][headerValuesList[i]] = \"\"\r\n                stateProps.setJV({ ...stateProps.JV })\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}