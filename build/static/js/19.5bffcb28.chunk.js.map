{"version":3,"sources":["views/Manufacturing/Setup/ProductionStages/index.js","ui-component/globalcomponents/Lookup/TableLookup.js"],"names":["ProductionStages","props","useState","setDialogOpen","setonBlurDisable","open","severity","msg","viewList","editList","addList","property","setProperty","StageCode","StageName","IsActive","Header","setHeader","console","log","rowProductionCode","setRowProductionCode","dispatch","useDispatch","AllActionsRes","useSelector","SingleList","singleList","handleClose","CreatedUser","ModifyUser","prevState","registerNotOpen","newList","useEffect","error","nullList","Success","har","createOrUpdateData","Message","checkUniqueCode","payload","getSingleList","handleCloseGrowl","event","reason","container","item","xs","close","onClick","Details","FormName","dialog","DialogClose","AddData","EditData","rowData","viewData","newData","FormCode","SetRowDataID","data","hideDialog","ID","ViewData","FormID","isEditButton","maxWidth","Title","IsOpen","Close","Body","spacing","gridSpacing","alignItems","iserror","label","type","value","helperText","disabled","Change","e","target","Blur","checked","Save","undefined","createOrUpdate","ButtonTitle1","ButtonTitle2","Component"],"mappings":"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","file":"static/js/19.5bffcb28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ReusableDialog from 'ui-component/globalcomponents/ReusableDialog';\r\nimport MaterialTable from 'material-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { Register, Growl, InputText, CheckboxButton } from 'ui-component/globalcomponents';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Checkbox,\r\n    Divider,\r\n    Grid,\r\n    InputAdornment,\r\n    TextField,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    RadioGroup,\r\n    Radio,\r\n    Typography\r\n} from '@mui/material';\r\n\r\nimport TableLookup from 'ui-component/globalcomponents/Lookup/TableLookup';\r\nimport { nullList, getSingleList, createOrUpdate } from 'store/actions/index';\r\n\r\n// assets\r\nimport LockTwoToneIcon from '@mui/icons-material/LockTwoTone';\r\nimport LinkTwoToneIcon from '@mui/icons-material/LinkTwoTone';\r\n\r\n\r\nlet FormName = \"Stages\"\r\n\r\nconst ProductionStages = (props) => {\r\n    const [DialogOpen, setDialogOpen] = useState(false);\r\n    const [LoadingOnSave, setLoadingOnSave] = useState(false);\r\n    const [isError, setisError] = useState(false);\r\n    const [onBlurDisable, setonBlurDisable] = useState(false)\r\n    const [property, setProperty] = useState({\r\n        open: false,\r\n        severity: '',\r\n        msg: '',\r\n        viewList: false,\r\n        editList: false,\r\n        addList: true\r\n    });\r\n\r\n    const [Header, setHeader] = useState({\r\n        StageCode: '',\r\n        StageName: '',\r\n        IsActive: true,\r\n    });\r\n    console.log('Header', Header);\r\n    const [rowProductionCode, setRowProductionCode] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n    const AllActionsRes = useSelector(({ AllActionsRes }) => AllActionsRes);\r\n    const SingleList = useSelector(({ AllActionsRes }) => AllActionsRes?.singleList);\r\n\r\n    console.log('SingleList', SingleList);\r\n\r\n    const handleOpen = () => {\r\n        setDialogOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setDialogOpen(false);\r\n        setHeader({\r\n            StageCode: '',\r\n            StageName: '',\r\n            IsActive: false,\r\n            CreatedUser: '',\r\n            ModifyUser: ''\r\n        });\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: false,\r\n            viewList: false,\r\n            editList: false,\r\n            newList: false\r\n        }));\r\n    };\r\n\r\n    const checkFields = () => {\r\n        if (Header.StageCode === '' || Header.StageCode === undefined || Header.StageCode === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Code Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n            return false;\r\n        } else if (Header.StageName === '' || Header.StageName === undefined || Header.StageName === null) {\r\n            setProperty({\r\n                open: true,\r\n                severity: 'error',\r\n                msg: 'Empty Stage Name Not Allowed',\r\n                registerNotOpen: true\r\n            });\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (checkFields()) {\r\n            let payload = {\r\n                FormName: 'Stages',\r\n                Header\r\n            };\r\n            dispatch(createOrUpdate(payload));\r\n\r\n            setProperty((prevState) => ({\r\n                ...prevState,\r\n                registerNotOpen: false\r\n            }))\r\n        }\r\n    };\r\n\r\n    const addData = () => {\r\n        setDialogOpen(true);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: true,\r\n            editList: false,\r\n            newList: true,\r\n            viewList: false\r\n\r\n        }));\r\n        setHeader((prevState) => ({\r\n            ...prevState,\r\n            StageCode: '',\r\n            StageName: '',\r\n            IsActive: true,\r\n\r\n        }))\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        }\r\n        // else if (AllActionsRes.createOrUpdateData) {\r\n        //     if (AllActionsRes.createOrUpdateData.Success === true) {\r\n        //         // console.log({ message: AllActionsRes.createOrUpdateData })\r\n        //         setProperty({\r\n        //             ...property,\r\n        //             open: true,\r\n        //             registerNotOpen: false,\r\n        //             severity: 'success',\r\n        //             msg: AllActionsRes?.createOrUpdateData?.Message,\r\n        //         });\r\n        //         setDialogOpen(false)\r\n\r\n        //     }\r\n        //     else {\r\n        //         // setProperty({\r\n        //         //     ...property,\r\n        //         //     open: true,\r\n        //         //     severity: 'error',\r\n        //         //     msg: AllActionsRes?.insertData?.Message,\r\n        //         //     dialogOpen: false,\r\n        //         //     loadingOnSave: false,\r\n        //         // });\r\n        //     }\r\n        //     dispatch(nullList());\r\n        // }\r\n        else if (AllActionsRes?.singleList) {\r\n            if (AllActionsRes?.singleList.Success === true) {\r\n                console.log({ har: AllActionsRes?.singleList });\r\n                // setHeader({\r\n                //     MachineCode: SingleList.MachineCode,\r\n                //     MachineName: SingleList.MachineName,\r\n                //     PurchaseDate: SingleList.PurchaseDate,\r\n                //     InstalledDate: SingleList.InstalledDate,\r\n                //     IsActive: SingleList.IsActive,\r\n                //     PowerPerUnit: SingleList.PowerPerUnit,\r\n                //     LaborPerUnit: SingleList.LaborPerUnit,\r\n                //     OutputPerUnit: SingleList.OutputPerUnit,\r\n                //     CreatedUser: \"\",\r\n                //     ModifyUser: \"\",\r\n                // })\r\n                // setisDisable(true)\r\n            } else {\r\n                // setProperty({\r\n                //     ...property,\r\n                //     open: true,\r\n                //     severity: 'error',\r\n                //     msg: AllActionsRes?.singleList?.Message,\r\n                //     dialogOpen: false,\r\n                //     loadingOnSave: false,\r\n                // });\r\n            }\r\n        }\r\n    }, [AllActionsRes?.createOrUpdateData?.Message, AllActionsRes?.singleList?.Message]);\r\n\r\n    const viewData = (rowData) => {\r\n        setHeader(rowData);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: true,\r\n            editList: false,\r\n            newList: false,\r\n            viewList: true\r\n        }));\r\n    };\r\n\r\n    const editData = (rowData) => {\r\n        setHeader(rowData);\r\n        setProperty((prevState) => ({\r\n            ...prevState,\r\n            registerNotOpen: true,\r\n            viewData: false,\r\n            editList: true,\r\n            newData: false\r\n        }));\r\n    };\r\n\r\n    const SetRowDataID = (data) => {\r\n        setRowProductionCode(data.StageCode);\r\n    };\r\n\r\n    const checkUniqueCode = () => {    \r\n        let payload = `FormName=${FormName}&StageCode=${Header.StageCode}`\r\n        dispatch(getSingleList(payload));\r\n        setonBlurDisable(true)\r\n    };\r\n\r\n    const DiloagBody = () => {\r\n        return (\r\n            <>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <MainCard //title=\"Routing Stages\"\r\n                        >\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item xs={8}>\r\n                                    <InputText\r\n                                        iserror={property.open}\r\n                                        label={'Production Code'}\r\n                                        type={'text'}\r\n                                        value={Header.StageCode}\r\n                                        helperText={property.msg}\r\n                                        disabled={property.viewList || property.editList}\r\n                                        Change={(e) => setHeader({ ...Header, StageCode: e.target.value })}\r\n                                        Blur={checkUniqueCode}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={1}></Grid>\r\n                                <Grid item xs={3}>\r\n                                    <CheckboxButton\r\n                                        label={'Is Active'}\r\n                                        disabled={property.viewList}\r\n                                        checked={Header.IsActive}\r\n                                        Change={(e) => setHeader({ ...Header, IsActive: e.target.checked })}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <InputText\r\n                                        iserror={false}\r\n                                        label={'Production Description'}\r\n                                        type={'text'}\r\n                                        // placeholder=\"Enter Production Description\"\r\n                                        value={Header.StageName}\r\n                                        helperText={\"Please enter Production Description\"}\r\n                                        disabled={property.viewList}\r\n                                        Change={(e) => setHeader({ ...Header, StageName: e.target.value })}\r\n                                        Blur={checkUniqueCode}\r\n                                    />\r\n\r\n                                    {/* <InputLabel>Production Description</InputLabel>\r\n                                    <TextField fullWidth placeholder=\"Enter Production Description\" />\r\n                                    <FormHelperText>Please enter Production Description</FormHelperText> */}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* <Grid container spacing={3}>\r\n                    <Grid item xs={10}>\r\n                        <InputText\r\n                            label={'Stage ID'}\r\n                            type={'text'}\r\n                            value={Header.StageCode}\r\n                            disabled={property.viewList}\r\n                            Change={(e) => setHeader({ ...Header, StageCode: e.target.value })}\r\n                            Blur={checkUniqueCode}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1}>\r\n                        <CheckboxButton\r\n                            label={\"Active\"}\r\n                            disabled={property.viewList}\r\n                            checked={Header.IsActive}\r\n                            Change={(e) => setHeader({ ...Header, IsActive: e.target.checked })}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <InputText\r\n\r\n                            label={'Stage Name'}\r\n                            type={'text'}\r\n                            disabled={property.viewList}\r\n                            value={Header.StageName}\r\n                            Change={(e) => setHeader({ ...Header, StageName: e.target.value })}\r\n\r\n                        />\r\n                    </Grid>\r\n\r\n\r\n                </Grid> */}\r\n            </>\r\n        );\r\n    };\r\n\r\n    const handleCloseGrowl = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setProperty({ ...property, open: false });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (AllActionsRes.error) {\r\n            dispatch(nullList());\r\n        } else if (SingleList) {\r\n            if (SingleList?.Success) {\r\n                setHeader({\r\n                    StageCode: SingleList.Message.StageCode,\r\n                    StageName: SingleList.Message.StageName,\r\n                    IsActive: SingleList.Message.IsActive,\r\n                    CreatedUser: '',\r\n                    ModifyUser: ''\r\n                });\r\n            }\r\n        }\r\n    }, [SingleList?.Message]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Growl property={property} close={handleCloseGrowl} onClick={handleCloseGrowl} />\r\n                </Grid>\r\n                <Register\r\n                    Details={'Bill Of Material List'}\r\n                    FormName={'Stages'}\r\n                    // FormID={constant.GeneralEntryFormID}\r\n                    props={props}\r\n                    dialog={true}\r\n                    DialogClose={handleClose}\r\n                    AddData={addData}\r\n                    EditData={editData}\r\n                    FormCode={'StageCode'}\r\n                    // payload={payload}\r\n                    // saveFunction={saveFunction}\r\n                    SetRowDataID={SetRowDataID}\r\n                    hideDialog={handleClose}\r\n                    // dosaveFunction={dosaveFunction}\r\n                    // setLoadingOnSave={setLoadingOnSave}\r\n                    ID={rowProductionCode}\r\n                    ViewData={viewData}\r\n                    FormID={'Stages'}\r\n                    isEditButton={true}\r\n                // type='JV'\r\n                // postingIcons={false}\r\n                />\r\n            </Grid>\r\n            <ReusableDialog\r\n                maxWidth={'md'}\r\n                Title={'Production Stage'}\r\n                IsOpen={property.registerNotOpen}\r\n                Close={handleClose}\r\n                Body={DiloagBody()}\r\n                Save={handleSave}\r\n                ButtonTitle1={'Save'}\r\n                ButtonTitle2={'Cancel'}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductionStages;\r\n","import React, { Component } from 'react';\r\nimport { Dialog } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport MaterialTable from 'material-table'\r\n\r\nclass TableLookup extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            lookUpFilter: null,\r\n            pageSize: 20\r\n\r\n        };\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.props.LookUpOpen === false && this.state.lookUpFilter !== null) {\r\n            this.setState({\r\n                lookUpFilter: null,\r\n                pageSize: 20\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    pageChange = (e) => {\r\n        this.setState({ pageSize: e })\r\n        console.log(\"Page change\", e)\r\n    }\r\n\r\n    render() {\r\n        var { LookUpClose, setLookUpData, onSelChangeLookUpData, LookUpOpen } = this.props;\r\n        return (\r\n            <Dialog dismissable={true} style={this.props.large === true ? { width: \"80%\", marginLeft: '2cm' } : { width: \"50%\", marginLeft: '2cm' }} header={this.props.LookUpHeading} visible={LookUpOpen} modal={true} onHide={LookUpClose}  >\r\n                {this.props.LookupList &&\r\n                    <MaterialTable\r\n                        icons={{ Filter: () => <div /> }}\r\n                        options={{\r\n                            pageSize: this.props.changeSize === true ? this.props.pageSize : 20,\r\n                            selection: this.props.selection,\r\n                            // pageSizeOptions: [15],\r\n                            showTitle: false,\r\n                            search: false,\r\n                            filtering: true,\r\n                            filterCellStyle: {\r\n                                paddingTop: 1,\r\n                                paddingBottom: 1,\r\n                            },\r\n                            headerStyle: {\r\n                                fontWeight: \"bolder\"\r\n                            },\r\n                            showTextRowsSelected: false,\r\n                        }}\r\n                        onRowClick={(e, x) => setLookUpData(e, x)}\r\n                        onChangeRowsPerPage={(e) => { console.log(\"Page change\", e) }}\r\n                        columns={this.props.LookupList.columns}\r\n                        data={this.props.LookupList.rows}\r\n                    />\r\n                }\r\n            </Dialog>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nTableLookup.propTypes = {\r\n\r\n    LookUpClose: PropTypes.func,\r\n    setLookUpData: PropTypes.func,\r\n    onSelChangeLookUpData: PropTypes.func,\r\n    lookUpOpen: PropTypes.bool\r\n};\r\n\r\n\r\nexport default TableLookup;\r\n"],"sourceRoot":""}